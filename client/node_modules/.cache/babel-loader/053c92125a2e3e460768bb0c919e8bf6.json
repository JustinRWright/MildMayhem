{"ast":null,"code":"//convienence function(src, [options]);\nfunction uglify(orig_code, options) {\n  options || (options = {});\n  var jsp = uglify.parser;\n  var pro = uglify.uglify;\n  var ast = jsp.parse(orig_code, options.strict_semicolons); // parse code and get the initial AST\n\n  ast = pro.ast_mangle(ast, options.mangle_options); // get a new AST with mangled names\n\n  ast = pro.ast_squeeze(ast, options.squeeze_options); // get an AST with compression optimizations\n\n  var final_code = pro.gen_code(ast, options.gen_options); // compressed code here\n\n  return final_code;\n}\n\n;\nuglify.parser = require(\"./lib/parse-js\");\nuglify.uglify = require(\"./lib/process\");\nmodule.exports = uglify;","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/uglify-js/uglify-js.js"],"names":["uglify","orig_code","options","jsp","parser","pro","ast","parse","strict_semicolons","ast_mangle","mangle_options","ast_squeeze","squeeze_options","final_code","gen_code","gen_options","require","module","exports"],"mappings":"AAAA;AACA,SAASA,MAAT,CAAgBC,SAAhB,EAA2BC,OAA3B,EAAmC;AACjCA,EAAAA,OAAO,KAAKA,OAAO,GAAG,EAAf,CAAP;AACA,MAAIC,GAAG,GAAGH,MAAM,CAACI,MAAjB;AACA,MAAIC,GAAG,GAAGL,MAAM,CAACA,MAAjB;AAEA,MAAIM,GAAG,GAAGH,GAAG,CAACI,KAAJ,CAAUN,SAAV,EAAqBC,OAAO,CAACM,iBAA7B,CAAV,CALiC,CAK0B;;AAC3DF,EAAAA,GAAG,GAAGD,GAAG,CAACI,UAAJ,CAAeH,GAAf,EAAoBJ,OAAO,CAACQ,cAA5B,CAAN,CANiC,CAMkB;;AACnDJ,EAAAA,GAAG,GAAGD,GAAG,CAACM,WAAJ,CAAgBL,GAAhB,EAAqBJ,OAAO,CAACU,eAA7B,CAAN,CAPiC,CAOoB;;AACrD,MAAIC,UAAU,GAAGR,GAAG,CAACS,QAAJ,CAAaR,GAAb,EAAkBJ,OAAO,CAACa,WAA1B,CAAjB,CARiC,CAQwB;;AACzD,SAAOF,UAAP;AACD;;AAAA;AAEDb,MAAM,CAACI,MAAP,GAAgBY,OAAO,CAAC,gBAAD,CAAvB;AACAhB,MAAM,CAACA,MAAP,GAAgBgB,OAAO,CAAC,eAAD,CAAvB;AAEAC,MAAM,CAACC,OAAP,GAAiBlB,MAAjB","sourcesContent":["//convienence function(src, [options]);\nfunction uglify(orig_code, options){\n  options || (options = {});\n  var jsp = uglify.parser;\n  var pro = uglify.uglify;\n\n  var ast = jsp.parse(orig_code, options.strict_semicolons); // parse code and get the initial AST\n  ast = pro.ast_mangle(ast, options.mangle_options); // get a new AST with mangled names\n  ast = pro.ast_squeeze(ast, options.squeeze_options); // get an AST with compression optimizations\n  var final_code = pro.gen_code(ast, options.gen_options); // compressed code here\n  return final_code;\n};\n\nuglify.parser = require(\"./lib/parse-js\");\nuglify.uglify = require(\"./lib/process\");\n\nmodule.exports = uglify"]},"metadata":{},"sourceType":"script"}