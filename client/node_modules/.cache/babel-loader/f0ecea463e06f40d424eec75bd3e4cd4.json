{"ast":null,"code":"import{Scene}from'phaser';import Player from\"../sprites/Player.js\";import Controls from\"../controls/Controls.js\";import MagicBlast from\"../sprites/MagicBlast.js\";import SwordSwing from\"../sprites/SwordSwing.js\";import Phaser from'phaser';import bckg from'../assets/bckg.png';import HealthBar from\"../sprites/HealthBar.js\";import CoolDown from\"../sprites/CoolDown.js\";import LightningBolt from'../sprites/lightningBolt.js';import LightningHB from'../sprites/lightningBoltHitbox.js';import io from'socket.io-client';//import proxy from 'socket.io-proxy';\nvar LocalGameScene={preload:function preload(){//I load the images from my publicly hosted imgur\n//because the file system seems to break for some reason when this is run in IonPhaser\n//(Which is inside a React application)\n//I make these drawings/spritesheets in piskel\nthis.load.image('bckg','https://i.imgur.com/DMVC2IQ.png');this.load.image('wall','https://i.imgur.com/av8q7Or.png');this.load.image('vwall','https://i.imgur.com/UB2GdEL.png');this.load.spritesheet('swordSwing','https://i.imgur.com/ULyXfap.png',{frameWidth:500,frameHeight:500});this.load.image('swordCool','https://i.imgur.com/SnLjQdR.png');this.load.image('blastCool','https://i.imgur.com/d4Enueh.png');this.load.spritesheet('magicBlast','https://i.imgur.com/dEhNPqO.png',{frameWidth:150,frameHeight:150});this.load.spritesheet('explosion','https://i.imgur.com/UHZiUKC.png',{frameWidth:192,frameHeight:192});this.load.spritesheet('player','https://i.imgur.com/WlEeiKT.png',{frameWidth:68,frameHeight:68});this.load.spritesheet('otherPlayer','https://i.imgur.com/NYAJusD.png',{frameWidth:68,frameHeight:68});this.load.spritesheet('Background','https://i.imgur.com/8SzCikO.png',{frameWidth:800,frameHeight:600});this.load.image('dodgeCool','https://i.imgur.com/mTklmkU.png');this.load.spritesheet('lightningBolt','https://i.imgur.com/3MskIUy.png',{frameWidth:16,frameHeight:1000});this.load.image('lightningCool','https://i.imgur.com/FVquIxw.png');},create:function create(){var self=this;/*I define some of the functions ex:this.deflectBlast\r\n           this way instead of outside of the preload/create/update\r\n           because that is the way they don't throw an error while using IonPhaser,\r\n           Perhaps they can be moved to another file and imported in*/ //Deflect Magic Blast with sword\nthis.deflectBlast=function(magicBlast,swordHitbox){if(swordHitbox.inSwordSweep(magicBlast)){magicBlast.deflectFrom(swordHitbox.getOwner());}};//Create explosion animation\nthis.explosionAnim=this.anims.create({key:'explode',frames:this.anims.generateFrameNumbers('explosion',{start:1,end:23}),frameRate:10,repeat:-1});//This needs to be added because the player2 animation breaks when called for some reason, unsure why?\n//It must have to do with something where 'explode' is played\nthis.explosionAnim=this.anims.create({key:'explode2',frames:this.anims.generateFrameNumbers('explosion',{start:1,end:23}),frameRate:10,repeat:-1});//Callback function for player/magicBlast Collision\nthis.playerHit=function(magicBlast,player){//Check that the magicBlast is hitting the right player\nif(magicBlast.getOwner()!==player){//In online mode, only the opposing player(who does not active hitbox in your game) will get hit, when they do, this is called\n//Depending on how we implement magic blasts, this may require an index to be sent through for selecting and destroy the object\nconsole.log('this.roomName is: '+self.roomName);self.socket.emit('destroyMagicBlast',self.roomName);magicBlast.explode();//Check if player is stunned or dodging, if neither is true, play stun animation and calculate damage\nif(player.getStun()===false||player.getDodging()===false){self.socket.emit('damagePlayer',self.roomName);player.playStun();//Reduce player health\n//When the healthbar reaches 0, this evaluates to true\nif(player.getHealthBar().decrease(4)){//This function has the player blow up\nplayer.gameOver();player.anims.play('explode',true);//Win Screen and link people back to main menu   \n//How could we access the react router DOM here?\nvar timedEvent=player.scene.time.delayedCall(3000,player.scene.redirect,[],this);};//Knock opponent backwards\nplayer.knockBack(magicBlast);}}};//Collision between lightning and player\nthis.playerHitLightning=function(lightningBolt,player){//Players cannot hit themselves with their own attacks\nif(lightningBolt.getOwner()!==player){if(player.getStun()===false&&player.getDodging()===false){//Stun is started for player\nplayer.playStun();self.socket.emit('destroyLightningBolt',self.roomName);self.socket.emit('damagePlayer',self.roomName);if(player.getHealthBar().decrease(4)){//Player dies\nplayer.gameOver();player.anims.play('explode',true);//Send players back to main menu\nvar timedEvent=player.scene.time.delayedCall(3000,player.scene.redirect,[],this);}player.knockBack(lightningBolt);//Destroy the animation associated with these hitboxes\nlightningBolt.destroyAnimationSprite();//Find all other associated lightning bolt hitboxes and destroy them\nlightningBolt.scene.lightningBolts.getChildren().forEach(function(lightningBolt){if(lightningBolt.getOwner()!==player){lightningBolt.body.enable=false;}});}}};//Callback for sending user back to main page when game ends\nthis.redirect=function(){window.location.replace('https://mildmayhem.herokuapp.com/');};//Glowing Background Sprite\nthis.background=this.add.sprite(400,300,'Background');this.anims.create({key:'glow',frames:this.anims.generateFrameNumbers('Background',{start:1,end:12}),frameRate:4,repeat:-1,yoyo:true});this.background.anims.play('glow');//Refactoring idea: make every variable passed into constructors \n//descriptive javascript properties for readability\nthis.setCoolDowns=function(swordCoolDown,dodgeCoolDown,magicCoolDown,lightningCoolDown,position){if(position==='top'){//Create Cooldowns: Note, final variable passed in is a timer, it sets how long the cooldown lasts in milliseconds            \nthis[swordCoolDown]=new CoolDown(this,570,40,'swordCool',700);this[magicCoolDown]=new CoolDown(this,618,40,'blastCool',1000);this[dodgeCoolDown]=new CoolDown(this,665,40,'dodgeCool',1000);this[lightningCoolDown]=new CoolDown(this,713,40,'lightningCool',5000);}else if(position==='bottom'){this[swordCoolDown]=new CoolDown(this,230,560,'swordCool',700);this[magicCoolDown]=new CoolDown(this,278,560,'blastCool',1000);this[dodgeCoolDown]=new CoolDown(this,326,560,'dodgeCool',1000);this[lightningCoolDown]=new CoolDown(this,374,560,'lightningCool',5000);}};//Create Health Bars\nthis.healthBarP1=new HealthBar({scene:this,x:0,y:584});this.healthBarP2=new HealthBar({scene:this,x:0,y:0});//console.log('gameconfig is: ' + this.gameConfig);\nif(this.gameConfig==='joinOnline'){this.player1=new Player(this,400,200,'otherPlayer',this.explosionAnim);this.player2=new Player(this,400,500,'player',this.explosionAnim);this.player1.setHealthBar(this.healthBarP2);this.player2.setHealthBar(this.healthBarP1);this.setCoolDowns('swordCoolDownP1','dodgeCoolDownP1','magicCoolDownP1','lightningCoolDownP1',\"top\");this.setCoolDowns('swordCoolDownP2','dodgeCoolDownP2','magicCoolDownP2','lightningCoolDownP2',\"bottom\");this.player1.createAnimations(this);this.player2.createAnimations(this);console.log('my id is: '+this.socket.id);this.player2.setVisible(true);}if(this.gameConfig==='createOnline'){this.player1=new Player(this,400,500,'player',this.explosionAnim);this.player2=new Player(this,400,200,'otherPlayer',this.explosionAnim);this.player1.setHealthBar(this.healthBarP1);this.player2.setHealthBar(this.healthBarP2);this.player1.createAnimations(this);this.setCoolDowns('swordCoolDownP1','dodgeCoolDownP1','magicCoolDownP1','lightningCoolDownP1',\"bottom\");this.setCoolDowns('swordCoolDownP2','dodgeCoolDownP2','magicCoolDownP2','lightningCoolDownP2',\"top\");this.player2.createAnimations(this);this.player2.setVisible(false);this.socket.emit('createOnlineRoom');this.socket.emit('getRoomName');}/* //Create Cooldowns: Note, final variable passed in is a timer, it sets how long the cooldown lasts in milliseconds            \r\n            this.swordCoolDownP1 = new CoolDown(this, 230, 560, 'swordCool', 700);\r\n            this.swordCoolDownP2 = new CoolDown(this, 570, 40, 'swordCool', 700);\r\n           \r\n            this.magicCoolDownP1 = new CoolDown(this, 278, 560, 'blastCool', 1000);\r\n            this.magicCoolDownP2 = new CoolDown(this, 618, 40, 'blastCool', 1000);\r\n            \r\n            this.dodgeCoolDownP1 = new CoolDown(this, 326, 560, 'dodgeCool', 1000);\r\n            this.dodgeCoolDownP2 = new CoolDown(this, 665, 40, 'dodgeCool', 1000);\r\n\r\n            this.lightningCoolDownP1 = new CoolDown(this, 374, 560, 'lightningCool', 5000);\r\n            this.lightningCoolDownP2 = new CoolDown(this, 713, 40, 'lightningCool', 5000);\r\n            */this.player2.moving=false;this.player2.moveTimer=0;this.socket.on('yourRoomName',function(roomName){//console.log('myroomName is called here');\nself.roomName=roomName;});this.socket.on('opponentJoined',function(opponentSocketId){self.player2.setVisible(true);//console.log('opponentJoined, id: ' + opponentSocketId);\nself.opponentSocketId=opponentSocketId;self.socket.emit('confirmJoinRoom',opponentSocketId);});this.socket.on('joinedRoom',function(opponentSocketId){//console.log('joined Room socket event happened')\nself.opponentSocketId=opponentSocketId;});this.socket.on('playerMoved',function(player2Movement){self.player2.moving=true;self.player2.x=player2Movement.x;self.player2.y=player2Movement.y;self.player2.setOrientationVector(player2Movement.direction);if(self.player2.isAlive()){self.player2.setMovementAnim(player2Movement.direction);}});this.socket.on('swordSwung',function(){self.onlinePlayerSwing(self.player2,self.swordCoolDownP2);});this.socket.on('magicBlastCreated',function(){self.magicCoolDownP2.startCoolDown();self.createMagicBlast(self.player2);});this.socket.on('magicBlastDestroyed',function(){//console.log('magicBlastDestroyed ran');\nself.magicBlasts.getChildren().forEach(function(magicBlast){if(magicBlast.getOwner()!==self.player2){magicBlast.explode();}});});this.socket.on('playerDamaged',function(){self.player2.playStun();if(self.player2.getHealthBar().decrease(4)){self.player2.gameOver();self.player2.anims.play('explode2',false);var timedEvent=self.time.delayedCall(3000,self.redirect,[],self);}});this.socket.on('dodgeCoolDownStarted',function(){self.dodgeCoolDownP2.startCoolDown();});this.socket.on('lightningBoltCreated',function(){self.lightningCoolDownP2.startCoolDown();self.createLightningBolt(self.player2);});this.socket.on('lightningBoltDestroyed',function(){//console.log('animation destruction ran');\n//Destroy the animation associated with these hitboxes\nvar lightningAnimDestroyed=false;//Find all other associated lightning bolt hitboxes and destroy them\nself.lightningBolts.getChildren().forEach(function(lightningBolt){if(lightningBolt.getOwner()!==self.player2){lightningBolt.body.enable=false;if(lightningAnimDestroyed===false){//console.log('animation destruction ran');\nlightningAnimDestroyed=true;lightningBolt.destroyAnimationSprite();}}});});//Create Win Text\nthis.youWin=this.add.text(150,300-60,'PLAYER2 WINS ',{fontSize:'70px',color:'#66FF00'});this.youWin.setVisible(false);//Checks for the amount of gamepads connected to the phaser game, if the passed controls do not match the quantity of connected gamepads,\n//the controls will be reset, this can be fixed later\nvar pad;var gamePadCount=this.controlConfig.player1.Movement==='GamePad'?1:0;//Create controls object which can be accessed in the update logic for game object interactions\nthis.controlsP1=new Controls(this,{directionals:this.controlConfig.player1.Movement,magicBlast:this.controlConfig.player1.MagicBlast,swordSwing:this.controlConfig.player1.SwordSlash},gamePadCount,1);//These phaser groups allow for collisino detection of classes of objects at scale, for example all magic blasts have the same collision callack that is called\nthis.magicBlasts=this.physics.add.group();this.swordHitBoxes=this.physics.add.group();this.lightningBolts=this.physics.add.group();//Create a sprite group in order to handle collisions\nthis.players=this.physics.add.group();this.players.add(this.player1);//Attach healthbars to the selected players, this is so the game knows whose healthbar is whose\n//this.player1.setHealthBar(this.healthBarP1);\n//phaser has a prebuilt bounce physics setup, any value greater than 1 causes an exponential growth in object velocity as it multiplies each bounce\nthis.player1.setBounce(1);//Collision handling for object groups (group1, group2, callback)\nthis.physics.add.overlap(this.magicBlasts,this.swordHitBoxes,this.deflectBlast);this.physics.add.overlap(this.magicBlasts,this.players,this.playerHit);this.physics.add.overlap(this.lightningBolts,this.players,this.playerHitLightning);//4 walls on the outside\nthis.leftWall=this.physics.add.sprite(-55,300,'vwall');//Set immovable allows the objects to not move on collision\nthis.leftWall.body.immovable=true;this.rightWall=this.physics.add.sprite(855,300,'vwall');this.rightWall.body.immovable=true;this.topWall=this.physics.add.sprite(400,-55,'wall');this.topWall.body.immovable=true;this.bottomWall=this.physics.add.sprite(400,655,'wall');this.bottomWall.body.immovable=true;//staticGroup is a different type of group that doesn't move I believe\nthis.walls=this.physics.add.staticGroup();this.walls.add(this.leftWall);this.walls.add(this.rightWall);this.walls.add(this.topWall);this.walls.add(this.bottomWall);//midline barrier wall\nthis.midWall=this.physics.add.sprite(400,300,'wall');this.midWall.setScale(1,.08);this.midWall.setVisible(false);this.midWall.body.immovable=true;this.physics.add.collider(this.midWall,this.players);//The order of the objects in the collider matters, magicBlasts \n//will only bounce off the walls if this.magicBlasts is the first argument\nthis.physics.add.collider(this.magicBlasts,this.walls);this.physics.add.collider(this.walls,this.players);self.createMagicBlast=function(player){//Create magic Blast\nvar magicBlast=new MagicBlast(self,player.getX(),player.getY(),'magicBlast',{owner:player});//Add to collision group\nself.magicBlasts.add(magicBlast);//Fire in direction of player orientation\nmagicBlast.setMagicBlastVelocity(player.getOrientationVector());//Set magicBlast bounce\nmagicBlast.setCollideWorldBounds(true);magicBlast.setBounce(1);};this.createLightningBolt=function(player){//DO NOT CALL SOCKET EMITS IN HERE, INFINITE FEEDBACK LOOP\n//create lightning Bolt animation object\nvar lightningBolt=new LightningBolt(this,player.getX(),player.getY(),'lightningBolt',{owner:player});//Creates 4 lightning bolt hitboxes which are the WIDTH of the lightning bolt, they travel \n//at a speed so fast that it mimics a diagonal hitbox. This normally\n//can't be created using Arcade physics and its Axis aligned bounding boxes;\nvar lightningBoltHB1=new LightningHB(this,player.getX(),player.getY(),'magicBlast',{owner:player,animationSprite:lightningBolt,Olength:100});var lightningBoltHB2=new LightningHB(this,player.getX(),player.getY(),'magicBlast',{owner:player,animationSprite:lightningBolt,Olength:50});var lightningBoltHB3=new LightningHB(this,player.getX(),player.getY(),'magicBlast',{owner:player,animationSprite:lightningBolt,Olength:25});var lightningBoltHB4=new LightningHB(this,player.getX(),player.getY(),'magicBlast',{owner:player,animationSprite:lightningBolt,Olength:75});//Add to collision group\nthis.lightningBolts.add(lightningBoltHB1);this.lightningBolts.add(lightningBoltHB2);this.lightningBolts.add(lightningBoltHB3);this.lightningBolts.add(lightningBoltHB4);};this.checkForSwingThenSwing=function(attackInput,player,coolDown){//Check if swordSwing exists, and then check if it belongs to the player\nthis.swordHitBoxes.getChildren().forEach(function(swordSwing){if(swordSwing.getOwner()===player){var _swordToCheck=swordSwing;}});//Check if sword swing can be activated\n//if the attack button is pressed,\n//and there is no sword currently active on the player,\n//and the cooldown is no active, then the sword can be swung\nif(attackInput.swordSwingFiring&&typeof swordToCheck=='undefined'&&!coolDown.isActive()){//Send sword swing to server\nthis.socket.emit('swingSword',this.roomName);//Set sword swing spawn point\nvar swordSpawnX=player.getX();var swordSpawnY=player.getY();//emit sword swing event:\n//Create new sword swing\nvar newSwordSwing=new SwordSwing(this,swordSpawnX,swordSpawnY,'swordSwing',{owner:player});newSwordSwing.swingSword();coolDown.startCoolDown();this.swordHitBoxes.add(newSwordSwing);}};this.onlinePlayerSwing=function(player,coolDown){//Set sword swing spawn point\nvar swordSpawnX=player.getX();var swordSpawnY=player.getY();//emit sword swing event:\n//Create new sword swing\nvar newSwordSwing=new SwordSwing(this,swordSpawnX,swordSpawnY,'swordSwing',{owner:player});newSwordSwing.body.active=false;newSwordSwing.swingSword();coolDown.startCoolDown();this.swordHitBoxes.add(newSwordSwing);};},update:function update(){//Checks if player 1 or player2 have lost, can events be used for this instead?\nif(!this.player1.isAlive()){this.youWin.setVisible(true);this.youWin.setText('OPPONENT WINS');}//Checks if player 1 or player2 have lost, can events be used for this instead?\nelse if(!this.player2.isAlive()){this.youWin.setVisible(true);this.youWin.setText('YOU WIN');console.log(\"is player 2 anim playing?\"+this.player2.anims.getTotalFrames());}//Get Player input\nthis.movementVectorP1=this.controlsP1.getMovementVector();//Set the orientation of the player\nthis.player1.setOrientationVector(this.movementVectorP1);// emit player movement data\nvar x=this.player1.x;var y=this.player1.y;var d=this.player1.getOrientationVector();if(this.player1.oldPosition&&(x!==this.player1.oldPosition.x||y!==this.player1.oldPosition.y||d!==this.player1.oldPosition.direction)){this.socket.emit('playerMovement',{x:x,y:y,direction:d,roomName:this.roomName});}// save old position data\nthis.player1.oldPosition={x:x,y:y,direction:d};//Stop animation if not moving and alive(explode animation can play)\nif(this.player2.moving===false&&this.player2.isAlive()){this.player2.anims.pause();}else{//Count some update frames, compensating for server delay,\n//If there is an acceptable delay from the server, then it can be assumed that the opponent\n//has stopped moving since the last time\n//They triggered a movmement event\nthis.player2.moveTimer+=1;if(this.player2.moveTimer>17){this.player2.moving=false;this.player2.moveTimer=0;}}//Check to make sure the player is not stunned, alive, and is not dodging\nif(!this.player1.getStun()&&this.player1.isAlive()&&!this.player1.getDodging()){this.player1.setPlayerVelocity(this.movementVectorP1);this.player1.setMovementAnim(this.movementVectorP1);}//Get attack inputs every update cycle\nvar attackInputsP1=this.controlsP1.getMoveInput();//Check for user firing magic blast and that the cooldown is not active\nif(attackInputsP1.magicBlastFiring&&!this.magicCoolDownP1.isActive()){this.magicCoolDownP1.startCoolDown();this.socket.emit('createMagicBlast',this.roomName);this.createMagicBlast(this.player1);};//Check for user firing Lightning Bolt\nif(attackInputsP1.lightningBoltFiring&&!this.lightningCoolDownP1.isActive()){this.lightningCoolDownP1.startCoolDown();this.socket.emit('createLightningBolt',this.roomName);this.createLightningBolt(this.player1);};//Check for user dodging and check that they aren't already in dodge mode\nif(attackInputsP1.dodgeFiring&&!this.player1.getDodging()&&!this.dodgeCoolDownP1.isActive()){this.dodgeCoolDownP1.startCoolDown();this.socket.emit('startDodgeCoolDown',this.roomName);this.player1.dodge();};//Check if sword swings exist, and update them as needed, \n//this is the best way I can think of for tracking and following player position in the main loop\n//Perhaps there's a better way? Without it \n//the sword is stuck in place, perhaps it can be attached to a reference to player position?\n//I took a look at an update pattern for a situation like this\nvar swordSwings=this.swordHitBoxes.getChildren();if(swordSwings.length>0){swordSwings.forEach(function(swordSwing){swordSwing.update();});}//Check for user swinging sword and then swing, starting the cooldown\n//I think functions are supposed to do only one thing, I'll fix this later\nthis.checkForSwingThenSwing(attackInputsP1,this.player1,this.swordCoolDownP1);}};export default LocalGameScene;","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/src/phaser/scenes/OnlineGameScene.js"],"names":["Scene","Player","Controls","MagicBlast","SwordSwing","Phaser","bckg","HealthBar","CoolDown","LightningBolt","LightningHB","io","LocalGameScene","preload","load","image","spritesheet","frameWidth","frameHeight","create","self","deflectBlast","magicBlast","swordHitbox","inSwordSweep","deflectFrom","getOwner","explosionAnim","anims","key","frames","generateFrameNumbers","start","end","frameRate","repeat","playerHit","player","console","log","roomName","socket","emit","explode","getStun","getDodging","playStun","getHealthBar","decrease","gameOver","play","timedEvent","scene","time","delayedCall","redirect","knockBack","playerHitLightning","lightningBolt","destroyAnimationSprite","lightningBolts","getChildren","forEach","body","enable","window","location","replace","background","add","sprite","yoyo","setCoolDowns","swordCoolDown","dodgeCoolDown","magicCoolDown","lightningCoolDown","position","healthBarP1","x","y","healthBarP2","gameConfig","player1","player2","setHealthBar","createAnimations","id","setVisible","moving","moveTimer","on","opponentSocketId","player2Movement","setOrientationVector","direction","isAlive","setMovementAnim","onlinePlayerSwing","swordCoolDownP2","magicCoolDownP2","startCoolDown","createMagicBlast","magicBlasts","dodgeCoolDownP2","lightningCoolDownP2","createLightningBolt","lightningAnimDestroyed","youWin","text","fontSize","color","pad","gamePadCount","controlConfig","Movement","controlsP1","directionals","swordSwing","SwordSlash","physics","group","swordHitBoxes","players","setBounce","overlap","leftWall","immovable","rightWall","topWall","bottomWall","walls","staticGroup","midWall","setScale","collider","getX","getY","owner","setMagicBlastVelocity","getOrientationVector","setCollideWorldBounds","lightningBoltHB1","animationSprite","Olength","lightningBoltHB2","lightningBoltHB3","lightningBoltHB4","checkForSwingThenSwing","attackInput","coolDown","swordToCheck","swordSwingFiring","isActive","swordSpawnX","swordSpawnY","newSwordSwing","swingSword","active","update","setText","getTotalFrames","movementVectorP1","getMovementVector","d","oldPosition","pause","setPlayerVelocity","attackInputsP1","getMoveInput","magicBlastFiring","magicCoolDownP1","lightningBoltFiring","lightningCoolDownP1","dodgeFiring","dodgeCoolDownP1","dodge","swordSwings","length","swordCoolDownP1"],"mappings":"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","sourcesContent":["import { Scene } from 'phaser';\r\nimport Player from \"../sprites/Player.js\";\r\nimport Controls from \"../controls/Controls.js\";\r\nimport MagicBlast from \"../sprites/MagicBlast.js\";\r\nimport SwordSwing from \"../sprites/SwordSwing.js\";\r\nimport Phaser from 'phaser';\r\nimport bckg from '../assets/bckg.png';\r\nimport HealthBar from \"../sprites/HealthBar.js\";\r\nimport CoolDown from \"../sprites/CoolDown.js\";\r\nimport LightningBolt from '../sprites/lightningBolt.js';\r\nimport LightningHB from '../sprites/lightningBoltHitbox.js';\r\nimport io from 'socket.io-client';\r\n//import proxy from 'socket.io-proxy';\r\nlet LocalGameScene = {\r\n    \r\n    \r\n    preload: function()\r\n        {\r\n            //I load the images from my publicly hosted imgur\r\n            //because the file system seems to break for some reason when this is run in IonPhaser\r\n            //(Which is inside a React application)\r\n            //I make these drawings/spritesheets in piskel\r\n            this.load.image('bckg', 'https://i.imgur.com/DMVC2IQ.png');\r\n            this.load.image('wall', 'https://i.imgur.com/av8q7Or.png');\r\n            this.load.image('vwall', 'https://i.imgur.com/UB2GdEL.png');\r\n            this.load.spritesheet('swordSwing', 'https://i.imgur.com/ULyXfap.png', {frameWidth: 500, frameHeight: 500});\r\n            this.load.image('swordCool', 'https://i.imgur.com/SnLjQdR.png');\r\n            this.load.image('blastCool', 'https://i.imgur.com/d4Enueh.png');\r\n            this.load.spritesheet('magicBlast', 'https://i.imgur.com/dEhNPqO.png', {frameWidth: 150, frameHeight: 150});\r\n            this.load.spritesheet('explosion','https://i.imgur.com/UHZiUKC.png', {frameWidth: 192, frameHeight: 192});\r\n            this.load.spritesheet('player', 'https://i.imgur.com/WlEeiKT.png', { frameWidth: 68, frameHeight: 68 });\r\n            this.load.spritesheet('otherPlayer','https://i.imgur.com/NYAJusD.png', { frameWidth: 68, frameHeight: 68 });\r\n            this.load.spritesheet('Background','https://i.imgur.com/8SzCikO.png', {frameWidth: 800, frameHeight: 600});\r\n            this.load.image('dodgeCool', 'https://i.imgur.com/mTklmkU.png');\r\n            this.load.spritesheet('lightningBolt', 'https://i.imgur.com/3MskIUy.png', {frameWidth: 16, frameHeight: 1000});\r\n            this.load.image('lightningCool', 'https://i.imgur.com/FVquIxw.png');\r\n        },\r\n\r\n    create: function()\r\n        {   \r\n             let self = this;\r\n           /*I define some of the functions ex:this.deflectBlast\r\n           this way instead of outside of the preload/create/update\r\n           because that is the way they don't throw an error while using IonPhaser,\r\n           Perhaps they can be moved to another file and imported in*/\r\n\r\n          //Deflect Magic Blast with sword\r\n            this.deflectBlast = function(magicBlast,swordHitbox){\r\n                if(swordHitbox.inSwordSweep(magicBlast)){\r\n                    magicBlast.deflectFrom(swordHitbox.getOwner());\r\n                }\r\n            };\r\n           //Create explosion animation\r\n            this.explosionAnim = this.anims.create({\r\n                key: 'explode',\r\n                frames: this.anims.generateFrameNumbers('explosion',{ start: 1, end: 23}),\r\n                frameRate: 10,\r\n                repeat: -1\r\n            });\r\n            //This needs to be added because the player2 animation breaks when called for some reason, unsure why?\r\n            //It must have to do with something where 'explode' is played\r\n            this.explosionAnim = this.anims.create({\r\n                key: 'explode2',\r\n                frames: this.anims.generateFrameNumbers('explosion',{ start: 1, end: 23}),\r\n                frameRate: 10,\r\n                repeat: -1\r\n            });\r\n            //Callback function for player/magicBlast Collision\r\n            this.playerHit = function(magicBlast,player){\r\n               //Check that the magicBlast is hitting the right player\r\n                if (magicBlast.getOwner()!==player){\r\n                    //In online mode, only the opposing player(who does not active hitbox in your game) will get hit, when they do, this is called\r\n                    //Depending on how we implement magic blasts, this may require an index to be sent through for selecting and destroy the object\r\n                    console.log('this.roomName is: ' + self.roomName);\r\n                    self.socket.emit('destroyMagicBlast', self.roomName);\r\n                   \r\n                    magicBlast.explode();\r\n                    //Check if player is stunned or dodging, if neither is true, play stun animation and calculate damage\r\n                    if (player.getStun() === false || player.getDodging() === false){\r\n                        self.socket.emit('damagePlayer', self.roomName);\r\n                        player.playStun();\r\n                        //Reduce player health\r\n                        //When the healthbar reaches 0, this evaluates to true\r\n                        if(player.getHealthBar().decrease(4)){\r\n                            //This function has the player blow up\r\n                            player.gameOver();\r\n                            player.anims.play('explode', true);\r\n                            //Win Screen and link people back to main menu   \r\n                            //How could we access the react router DOM here?\r\n\r\n                            let timedEvent = player.scene.time.delayedCall(3000, player.scene.redirect, [], this);\r\n                        };\r\n                        //Knock opponent backwards\r\n                        player.knockBack(magicBlast);\r\n                    }\r\n                    \r\n                }\r\n            }\r\n            \r\n            //Collision between lightning and player\r\n            this.playerHitLightning = function(lightningBolt,player){\r\n                //Players cannot hit themselves with their own attacks\r\n                if(lightningBolt.getOwner()!==player){\r\n                   \r\n                    if (player.getStun() === false && player.getDodging() === false){\r\n                        \r\n                        //Stun is started for player\r\n                        player.playStun();\r\n                        self.socket.emit('destroyLightningBolt', self.roomName);\r\n                        self.socket.emit('damagePlayer', self.roomName);\r\n                        if(player.getHealthBar().decrease(4)){\r\n                           \r\n                            //Player dies\r\n                            player.gameOver();\r\n                            player.anims.play('explode', true);\r\n                            //Send players back to main menu\r\n                            let timedEvent = player.scene.time.delayedCall(3000, player.scene.redirect, [], this);\r\n                        }\r\n                        \r\n                        player.knockBack(lightningBolt);\r\n                      \r\n                        //Destroy the animation associated with these hitboxes\r\n                        lightningBolt.destroyAnimationSprite();\r\n\r\n                        //Find all other associated lightning bolt hitboxes and destroy them\r\n                        lightningBolt.scene.lightningBolts.getChildren().forEach(lightningBolt => {\r\n                            if (lightningBolt.getOwner() !== player) {\r\n                                lightningBolt.body.enable = false;\r\n                            }\r\n                    });\r\n                }\r\n            }\r\n            }\r\n            //Callback for sending user back to main page when game ends\r\n            this.redirect = function(){\r\n                 window.location.replace('https://mildmayhem.herokuapp.com/');\r\n            }\r\n            //Glowing Background Sprite\r\n            this.background = this.add.sprite(400,300,'Background');\r\n            this.anims.create({\r\n                key: 'glow',\r\n                frames: this.anims.generateFrameNumbers('Background', { start: 1, end: 12 }),\r\n                frameRate: 4,\r\n                repeat: -1,\r\n                yoyo: true\r\n            });\r\n            this.background.anims.play('glow');\r\n            \r\n            //Refactoring idea: make every variable passed into constructors \r\n            //descriptive javascript properties for readability\r\n            this.setCoolDowns = function(swordCoolDown,dodgeCoolDown,magicCoolDown,lightningCoolDown,position){\r\n               if (position === 'top'){\r\n                //Create Cooldowns: Note, final variable passed in is a timer, it sets how long the cooldown lasts in milliseconds            \r\n                this[swordCoolDown] = new CoolDown(this, 570, 40, 'swordCool', 700); \r\n                this[magicCoolDown] = new CoolDown(this, 618, 40, 'blastCool', 1000);  \r\n                this[dodgeCoolDown] = new CoolDown(this, 665, 40, 'dodgeCool', 1000);\r\n                this[lightningCoolDown] = new CoolDown(this, 713, 40, 'lightningCool', 5000);\r\n               }\r\n               else if(position === 'bottom'){\r\n                this[swordCoolDown] = new CoolDown(this, 230, 560, 'swordCool', 700);\r\n                this[magicCoolDown] = new CoolDown(this, 278, 560, 'blastCool', 1000);\r\n                this[dodgeCoolDown] = new CoolDown(this, 326, 560, 'dodgeCool', 1000);\r\n                this[lightningCoolDown] = new CoolDown(this, 374, 560, 'lightningCool', 5000);\r\n               }\r\n            }\r\n           //Create Health Bars\r\n            this.healthBarP1 = new HealthBar({scene: this, x: 0, y:584});\r\n            this.healthBarP2 = new HealthBar({scene: this, x: 0, y:0});\r\n\r\n            //console.log('gameconfig is: ' + this.gameConfig);\r\n            if (this.gameConfig === 'joinOnline') {\r\n                this.player1 = new Player(this, 400, 200,'otherPlayer', this.explosionAnim);\r\n                this.player2 = new Player(this, 400, 500,'player', this.explosionAnim);\r\n                this.player1.setHealthBar(this.healthBarP2);\r\n                this.player2.setHealthBar(this.healthBarP1);\r\n                this.setCoolDowns('swordCoolDownP1','dodgeCoolDownP1','magicCoolDownP1','lightningCoolDownP1',\"top\");\r\n                this.setCoolDowns('swordCoolDownP2','dodgeCoolDownP2','magicCoolDownP2','lightningCoolDownP2',\"bottom\");\r\n                this.player1.createAnimations(this);\r\n                this.player2.createAnimations(this);\r\n                console.log('my id is: ' + this.socket.id);    \r\n                this.player2.setVisible(true);\r\n                \r\n               \r\n            }\r\n            if (this.gameConfig === 'createOnline'){\r\n                this.player1 = new Player(this, 400, 500,'player', this.explosionAnim);\r\n                this.player2 = new Player(this, 400, 200,'otherPlayer', this.explosionAnim);\r\n                this.player1.setHealthBar(this.healthBarP1);\r\n                this.player2.setHealthBar(this.healthBarP2);\r\n                this.player1.createAnimations(this);\r\n                this.setCoolDowns('swordCoolDownP1','dodgeCoolDownP1','magicCoolDownP1','lightningCoolDownP1',\"bottom\");\r\n                this.setCoolDowns('swordCoolDownP2','dodgeCoolDownP2','magicCoolDownP2','lightningCoolDownP2',\"top\");\r\n                this.player2.createAnimations(this);\r\n                this.player2.setVisible(false);\r\n                this.socket.emit('createOnlineRoom');\r\n                this.socket.emit('getRoomName');\r\n                \r\n            }\r\n            \r\n           /* //Create Cooldowns: Note, final variable passed in is a timer, it sets how long the cooldown lasts in milliseconds            \r\n            this.swordCoolDownP1 = new CoolDown(this, 230, 560, 'swordCool', 700);\r\n            this.swordCoolDownP2 = new CoolDown(this, 570, 40, 'swordCool', 700);\r\n           \r\n            this.magicCoolDownP1 = new CoolDown(this, 278, 560, 'blastCool', 1000);\r\n            this.magicCoolDownP2 = new CoolDown(this, 618, 40, 'blastCool', 1000);\r\n            \r\n            this.dodgeCoolDownP1 = new CoolDown(this, 326, 560, 'dodgeCool', 1000);\r\n            this.dodgeCoolDownP2 = new CoolDown(this, 665, 40, 'dodgeCool', 1000);\r\n\r\n            this.lightningCoolDownP1 = new CoolDown(this, 374, 560, 'lightningCool', 5000);\r\n            this.lightningCoolDownP2 = new CoolDown(this, 713, 40, 'lightningCool', 5000);\r\n            */\r\n            this.player2.moving = false;\r\n            this.player2.moveTimer = 0;\r\n            this.socket.on('yourRoomName', function(roomName) {\r\n                //console.log('myroomName is called here');\r\n                self.roomName = roomName;\r\n            });\r\n            this.socket.on('opponentJoined', function(opponentSocketId) {\r\n                self.player2.setVisible(true);\r\n                //console.log('opponentJoined, id: ' + opponentSocketId);\r\n                self.opponentSocketId = opponentSocketId;\r\n                self.socket.emit('confirmJoinRoom', opponentSocketId);\r\n            });\r\n            this.socket.on('joinedRoom', function(opponentSocketId) {\r\n                //console.log('joined Room socket event happened')\r\n                self.opponentSocketId = opponentSocketId;\r\n            });\r\n            this.socket.on('playerMoved', function (player2Movement){\r\n               \r\n                    self.player2.moving = true;\r\n                    self.player2.x = player2Movement.x;\r\n                    self.player2.y = player2Movement.y;\r\n                    self.player2.setOrientationVector(player2Movement.direction);\r\n                    if(self.player2.isAlive()){\r\n                         self.player2.setMovementAnim(player2Movement.direction);\r\n                    }\r\n                   \r\n            });\r\n           this.socket.on('swordSwung', function(){\r\n               self.onlinePlayerSwing(self.player2, self.swordCoolDownP2);\r\n           })\r\n           this.socket.on('magicBlastCreated', function(){\r\n               self.magicCoolDownP2.startCoolDown();\r\n               self.createMagicBlast(self.player2);\r\n           });\r\n           this.socket.on('magicBlastDestroyed', function(){\r\n               //console.log('magicBlastDestroyed ran');\r\n               \r\n                self.magicBlasts.getChildren().forEach(magicBlast => {\r\n                    if (magicBlast.getOwner() !== self.player2) {\r\n                        magicBlast.explode();\r\n                    }\r\n                });\r\n           });\r\n           this.socket.on('playerDamaged', function() {\r\n               self.player2.playStun();\r\n               if (self.player2.getHealthBar().decrease(4)){\r\n                   self.player2.gameOver();\r\n                   self.player2.anims.play('explode2', false);\r\n                   \r\n                   \r\n                   let timedEvent = self.time.delayedCall(3000, self.redirect, [], self);\r\n               }\r\n           });\r\n           this.socket.on('dodgeCoolDownStarted', function(){\r\n               self.dodgeCoolDownP2.startCoolDown();\r\n           });\r\n           this.socket.on('lightningBoltCreated', function(){\r\n               self.lightningCoolDownP2.startCoolDown();\r\n               self.createLightningBolt(self.player2);\r\n           });\r\n           this.socket.on('lightningBoltDestroyed', function(){\r\n               //console.log('animation destruction ran');\r\n                         //Destroy the animation associated with these hitboxes\r\n                        let lightningAnimDestroyed = false;\r\n                        //Find all other associated lightning bolt hitboxes and destroy them\r\n                        self.lightningBolts.getChildren().forEach(lightningBolt => {\r\n                            if (lightningBolt.getOwner() !== self.player2) {\r\n                                lightningBolt.body.enable = false;\r\n                                if (lightningAnimDestroyed === false){\r\n                                    //console.log('animation destruction ran');\r\n                                    lightningAnimDestroyed = true;\r\n                                    lightningBolt.destroyAnimationSprite();\r\n                                }\r\n                            }\r\n                    });\r\n           });\r\n            //Create Win Text\r\n            this.youWin = this.add.text(150,300-60,'PLAYER2 WINS ',{fontSize: '70px', color: '#66FF00'});\r\n            this.youWin.setVisible(false);\r\n\r\n            \r\n          \r\n\r\n            //Checks for the amount of gamepads connected to the phaser game, if the passed controls do not match the quantity of connected gamepads,\r\n            //the controls will be reset, this can be fixed later\r\n            let pad: Phaser.Input.Gamepad.Gamepad;\r\n            let gamePadCount = ((this.controlConfig.player1.Movement==='GamePad')? 1:0);\r\n           \r\n\r\n            //Create controls object which can be accessed in the update logic for game object interactions\r\n            this.controlsP1 = new Controls(this,{directionals: this.controlConfig.player1.Movement, magicBlast: this.controlConfig.player1.MagicBlast, swordSwing: this.controlConfig.player1.SwordSlash},gamePadCount,1);\r\n           \r\n            \r\n            //These phaser groups allow for collisino detection of classes of objects at scale, for example all magic blasts have the same collision callack that is called\r\n            this.magicBlasts = this.physics.add.group();\r\n            this.swordHitBoxes = this.physics.add.group();\r\n            this.lightningBolts = this.physics.add.group();\r\n\r\n            //Create a sprite group in order to handle collisions\r\n            this.players = this.physics.add.group();\r\n            this.players.add(this.player1);\r\n          \r\n\r\n            //Attach healthbars to the selected players, this is so the game knows whose healthbar is whose\r\n            //this.player1.setHealthBar(this.healthBarP1);\r\n\r\n          \r\n\r\n            //phaser has a prebuilt bounce physics setup, any value greater than 1 causes an exponential growth in object velocity as it multiplies each bounce\r\n            this.player1.setBounce(1);\r\n\r\n\r\n            //Collision handling for object groups (group1, group2, callback)\r\n            this.physics.add.overlap(this.magicBlasts,this.swordHitBoxes,this.deflectBlast);\r\n            this.physics.add.overlap(this.magicBlasts,this.players,this.playerHit);\r\n            this.physics.add.overlap(this.lightningBolts,this.players,this.playerHitLightning);\r\n            \r\n            //4 walls on the outside\r\n            this.leftWall = this.physics.add.sprite(-55,300,'vwall');\r\n            //Set immovable allows the objects to not move on collision\r\n            this.leftWall.body.immovable = true;\r\n            this.rightWall = this.physics.add.sprite(855,300,'vwall');\r\n            this.rightWall.body.immovable = true;\r\n            this.topWall = this.physics.add.sprite(400,-55,'wall');\r\n            this.topWall.body.immovable = true;\r\n            this.bottomWall = this.physics.add.sprite(400,655,'wall');\r\n            this.bottomWall.body.immovable = true;\r\n            \r\n            //staticGroup is a different type of group that doesn't move I believe\r\n            this.walls = this.physics.add.staticGroup();\r\n            this.walls.add(this.leftWall);\r\n            this.walls.add(this.rightWall);\r\n            this.walls.add(this.topWall);\r\n            this.walls.add(this.bottomWall);\r\n            \r\n            //midline barrier wall\r\n            this.midWall = this.physics.add.sprite(400,300,'wall');\r\n            this.midWall.setScale(1,.08);\r\n            this.midWall.setVisible(false);\r\n            this.midWall.body.immovable = true;\r\n\r\n            this.physics.add.collider(this.midWall,this.players);\r\n            \r\n            //The order of the objects in the collider matters, magicBlasts \r\n            //will only bounce off the walls if this.magicBlasts is the first argument\r\n            this.physics.add.collider(this.magicBlasts,this.walls);\r\n            this.physics.add.collider(this.walls,this.players);\r\n             \r\n            self.createMagicBlast = function(player){\r\n                    //Create magic Blast\r\n                    var magicBlast = new MagicBlast(self,player.getX(),\r\n                    player.getY(),'magicBlast',{owner: player});\r\n                    //Add to collision group\r\n                    self.magicBlasts.add(magicBlast);\r\n                    //Fire in direction of player orientation\r\n                    magicBlast.setMagicBlastVelocity(player.getOrientationVector());\r\n                    //Set magicBlast bounce\r\n                    magicBlast.setCollideWorldBounds(true);\r\n                    magicBlast.setBounce(1);\r\n                    \r\n            };\r\n            this.createLightningBolt = function(player)\r\n            {\r\n                //DO NOT CALL SOCKET EMITS IN HERE, INFINITE FEEDBACK LOOP\r\n                 //create lightning Bolt animation object\r\n                let lightningBolt = new LightningBolt(this,player.getX(),player.getY(),'lightningBolt',{owner: player});\r\n                //Creates 4 lightning bolt hitboxes which are the WIDTH of the lightning bolt, they travel \r\n                //at a speed so fast that it mimics a diagonal hitbox. This normally\r\n                //can't be created using Arcade physics and its Axis aligned bounding boxes;\r\n                let lightningBoltHB1 = new LightningHB(this,player.getX(),player.getY(),'magicBlast',{owner: player, animationSprite: lightningBolt, Olength: 100});\r\n                let lightningBoltHB2 = new LightningHB(this,player.getX(),player.getY(),'magicBlast',{owner: player, animationSprite: lightningBolt, Olength: 50});\r\n                let lightningBoltHB3 = new LightningHB(this,player.getX(),player.getY(),'magicBlast',{owner: player, animationSprite: lightningBolt, Olength: 25});\r\n                let lightningBoltHB4 = new LightningHB(this,player.getX(),player.getY(),'magicBlast',{owner: player, animationSprite: lightningBolt, Olength: 75});\r\n                //Add to collision group\r\n                this.lightningBolts.add(lightningBoltHB1);\r\n                this.lightningBolts.add(lightningBoltHB2);\r\n                this.lightningBolts.add(lightningBoltHB3);\r\n                this.lightningBolts.add(lightningBoltHB4);\r\n\r\n            }\r\n            this.checkForSwingThenSwing = function(attackInput, player, coolDown){\r\n                //Check if swordSwing exists, and then check if it belongs to the player\r\n                this.swordHitBoxes.getChildren().forEach(swordSwing => {\r\n                    if (swordSwing.getOwner() === player) {\r\n                        let swordToCheck = swordSwing;\r\n                    }\r\n                });\r\n                //Check if sword swing can be activated\r\n                //if the attack button is pressed,\r\n                //and there is no sword currently active on the player,\r\n                //and the cooldown is no active, then the sword can be swung\r\n                 if ((attackInput.swordSwingFiring && typeof swordToCheck == 'undefined' && !coolDown.isActive())){\r\n                   \r\n                   \r\n                    //Send sword swing to server\r\n                    this.socket.emit('swingSword',this.roomName);\r\n                    //Set sword swing spawn point\r\n                    let swordSpawnX = player.getX();\r\n                    let swordSpawnY = player.getY();\r\n                    //emit sword swing event:\r\n                    //Create new sword swing\r\n                    let newSwordSwing = new SwordSwing(this,swordSpawnX,swordSpawnY,'swordSwing',{owner: player});\r\n                    newSwordSwing.swingSword();\r\n                    coolDown.startCoolDown();\r\n                    this.swordHitBoxes.add(newSwordSwing);\r\n                   \r\n                 }\r\n            };\r\n            this.onlinePlayerSwing = function (player, coolDown){\r\n                //Set sword swing spawn point\r\n                let swordSpawnX = player.getX();\r\n                let swordSpawnY = player.getY();\r\n                //emit sword swing event:\r\n                //Create new sword swing\r\n                let newSwordSwing = new SwordSwing(this,swordSpawnX,swordSpawnY,'swordSwing',{owner: player});\r\n                newSwordSwing.body.active = false;\r\n                newSwordSwing.swingSword();\r\n                coolDown.startCoolDown();\r\n                this.swordHitBoxes.add(newSwordSwing);\r\n            };\r\n           \r\n        },\r\n\r\n    update: function()\r\n        {\r\n        \r\n        //Checks if player 1 or player2 have lost, can events be used for this instead?\r\n        if (!this.player1.isAlive()){\r\n            this.youWin.setVisible(true);\r\n           this.youWin.setText('OPPONENT WINS');\r\n        }\r\n        //Checks if player 1 or player2 have lost, can events be used for this instead?\r\n        else if (!this.player2.isAlive()){\r\n            this.youWin.setVisible(true);\r\n            this.youWin.setText('YOU WIN');\r\n            console.log(\"is player 2 anim playing?\" + this.player2.anims.getTotalFrames());\r\n        }\r\n        \r\n        //Get Player input\r\n        this.movementVectorP1 = this.controlsP1.getMovementVector();\r\n        \r\n\r\n        //Set the orientation of the player\r\n        this.player1.setOrientationVector(this.movementVectorP1);\r\n        \r\n        // emit player movement data\r\n        var x = this.player1.x;\r\n        var y = this.player1.y;\r\n        var d = this.player1.getOrientationVector();\r\n        if (this.player1.oldPosition && (x !== this.player1.oldPosition.x || y !== this.player1.oldPosition.y || d !== this.player1.oldPosition.direction)) {\r\n         \r\n            this.socket.emit('playerMovement', { x: x, y: y, direction: d , roomName: this.roomName});\r\n        }\r\n \r\n        // save old position data\r\n        this.player1.oldPosition = {\r\n          x: x,\r\n          y: y,\r\n          direction: d\r\n        };\r\n        //Stop animation if not moving and alive(explode animation can play)\r\n        if (this.player2.moving === false && this.player2.isAlive())\r\n        {\r\n            this.player2.anims.pause();\r\n            \r\n            \r\n        }\r\n        else\r\n        {\r\n            \r\n            //Count some update frames, compensating for server delay,\r\n            //If there is an acceptable delay from the server, then it can be assumed that the opponent\r\n            //has stopped moving since the last time\r\n            //They triggered a movmement event\r\n            this.player2.moveTimer += 1;\r\n            if (this.player2.moveTimer > 17){\r\n                this.player2.moving = false;\r\n                this.player2.moveTimer = 0;\r\n            }\r\n            \r\n        }\r\n        //Check to make sure the player is not stunned, alive, and is not dodging\r\n        if(!this.player1.getStun() && this.player1.isAlive() && !this.player1.getDodging()){\r\n            this.player1.setPlayerVelocity(this.movementVectorP1);\r\n            this.player1.setMovementAnim(this.movementVectorP1);\r\n        }\r\n\r\n\r\n\r\n        //Get attack inputs every update cycle\r\n        let attackInputsP1 = this.controlsP1.getMoveInput();\r\n       \r\n        //Check for user firing magic blast and that the cooldown is not active\r\n        if (attackInputsP1.magicBlastFiring && !this.magicCoolDownP1.isActive()){\r\n           this.magicCoolDownP1.startCoolDown();\r\n           this.socket.emit('createMagicBlast', this.roomName);\r\n           this.createMagicBlast(this.player1);\r\n        };\r\n        \r\n        //Check for user firing Lightning Bolt\r\n        if (attackInputsP1.lightningBoltFiring && !this.lightningCoolDownP1.isActive()){\r\n           this.lightningCoolDownP1.startCoolDown();\r\n           this.socket.emit('createLightningBolt',this.roomName);\r\n           this.createLightningBolt(this.player1);\r\n          \r\n        };\r\n        \r\n\r\n       \r\n        //Check for user dodging and check that they aren't already in dodge mode\r\n        if (attackInputsP1.dodgeFiring && !this.player1.getDodging() && !this.dodgeCoolDownP1.isActive()){\r\n            this.dodgeCoolDownP1.startCoolDown();\r\n            this.socket.emit('startDodgeCoolDown',this.roomName);\r\n            this.player1.dodge();\r\n        };\r\n       \r\n\r\n        //Check if sword swings exist, and update them as needed, \r\n        //this is the best way I can think of for tracking and following player position in the main loop\r\n        //Perhaps there's a better way? Without it \r\n        //the sword is stuck in place, perhaps it can be attached to a reference to player position?\r\n        //I took a look at an update pattern for a situation like this\r\n        let swordSwings = this.swordHitBoxes.getChildren();\r\n        if (swordSwings.length>0){\r\n            swordSwings.forEach(swordSwing => {\r\n                swordSwing.update();\r\n            }\r\n            );\r\n            \r\n        }\r\n        \r\n        //Check for user swinging sword and then swing, starting the cooldown\r\n        //I think functions are supposed to do only one thing, I'll fix this later\r\n        this.checkForSwingThenSwing(attackInputsP1, this.player1, this.swordCoolDownP1);\r\n\r\n        }\r\n    \r\n    \r\n\r\n\r\n}\r\n\r\nexport default LocalGameScene;"]},"metadata":{},"sourceType":"module"}