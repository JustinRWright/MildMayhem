{"ast":null,"code":"import Phaser from 'phaser';\nexport default class Controls extends Phaser.GameObjects.Sprite {\n  constructor(scene, type, gamePadCount, gamePadNumber) {\n    super(scene, type, gamePadCount, gamePadNumber);\n    this.setKeyInput(scene, type);\n    this.scene = scene; //\n\n    this.gamePadCount = gamePadCount;\n    this.gamePadNumber = gamePadNumber;\n  }\n\n  setWASDControls() {\n    this.directionals = this.directionals = this.scene.input.keyboard.addKeys({\n      up: Phaser.Input.Keyboard.KeyCodes.W,\n      down: Phaser.Input.Keyboard.KeyCodes.S,\n      left: Phaser.Input.Keyboard.KeyCodes.A,\n      right: Phaser.Input.Keyboard.KeyCodes.D\n    });\n    this.magicBlastAttack = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.P);\n    this.swordSwing = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\n    this.dodge = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SHIFT);\n    this.lightningBolt = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.O);\n  }\n\n  setArrowKeyControls() {\n    this.directionals = this.scene.input.keyboard.createCursorKeys();\n    this.magicBlastAttack = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.NUMPAD_NINE);\n    this.swordSwing = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.NUMPAD_ZERO);\n    this.dodge = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.NUMPAD_FOUR);\n    this.lightningBolt = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.NUMPAD_EIGHT);\n  }\n\n  setKeyInput(scene, {\n    directionals,\n    magicBlast,\n    swordSwing,\n    dodge\n  } = {}) {\n    //Potentially can add more configurable controls by using passing keycodes in here in the future\n    if (directionals === 'WASD') {\n      this.setWASDControls();\n    } else if (directionals === 'ArrowKeys') {\n      this.setArrowKeyControls();\n    } else if (directionals === 'GamePad') {\n      this.gamePadMode = true;\n      console.log(\"game pad mode active\" + this.gamePadMode);\n      this.lightningBolt = {};\n      this.swordSwing = {};\n      this.magicBlastAttack = {};\n      this.dodge = {};\n      const xAxis = 0;\n      const yAxis = 0;\n      this.directionals = {\n        up: {\n          isDown: yAxis > 0 ? true : false\n        },\n        down: {\n          isDown: yAxis < 0 ? true : false\n        },\n        left: {\n          isDown: xAxis > 0 ? true : false\n        },\n        right: {\n          isDown: xAxis > 0 ? true : false\n        }\n      };\n      this.scene.input.gamepad.once('connected', function (pad, event) {}, this);\n      this.scene.input.gamepad.on('down', function (pad, button, index) {\n        this.swordSwing.isDown = pad.X;\n        this.magicBlastAttack.isDown = pad.R2;\n        this.dodge.isDown = pad.R1;\n        this.lightningBolt.isDown = pad.L2;\n      }, this);\n      this.scene.input.gamepad.on('up', function (pad, button, index) {\n        this.swordSwing.isDown = false;\n        this.magicBlastAttack.isDown = false;\n        this.dodge.isDown = false;\n        this.lightningBolt.isDown = false;\n      }, this);\n    }\n  }\n\n  getMovementVector() {\n    if (this.gamePadMode) {\n      let pad; //If there are enough controllers connected and the gamepad isActive at all then...\n\n      if (this.scene.input.gamepad.total && this.scene.input.gamepad.isActive()) {\n        if (this.scene.input.gamepad.total >= this.gamePadCount) {\n          pad = this.scene.input.gamepad.pad1;\n\n          if (this.scene.input.gamepad.pad2 && this.gamePadNumber === 2) {\n            pad = this.scene.input.gamepad.pad2;\n          }\n\n          const xAxis = pad.axes[0].getValue();\n          const yAxis = pad.axes[1].getValue();\n          this.directionals = {\n            up: {\n              isDown: yAxis < 0 ? true : false\n            },\n            down: {\n              isDown: yAxis > 0 ? true : false\n            },\n            left: {\n              isDown: xAxis < 0 ? true : false\n            },\n            right: {\n              isDown: xAxis > 0 ? true : false\n            }\n          };\n        }\n      } else {\n        console.log(\"Hey you didn't connect enough controllers\"); //We should create a callback function here that resets the control scheme that is missing\n        //and inform the user of the error of their ways.\n        //We need the player number which is\n\n        if (this.gamePadNumber == 1) {\n          //set controls back to keyboard wasd\n          console.log(\"WASD keyboard Set\");\n          this.setWASDControls();\n          this.gamePadCount -= 1;\n        } else {\n          //set controls to arrowkeys\n          console.log(\"Arrow keyboard Set\");\n          this.setArrowKeyControls();\n          this.gamePadCount -= 1;\n        }\n      }\n    }\n\n    return {\n      //Gets the vector for a directional press(y is inverted)\n      x: (this.directionals.right.isDown ? 1 : 0) + (this.directionals.left.isDown ? -1 : 0),\n      y: (this.directionals.up.isDown ? -1 : 0) + (this.directionals.down.isDown ? 1 : 0)\n    };\n  }\n\n  getMoveInput() {\n    return {\n      lightningBoltFiring: this.lightningBolt.isDown,\n      dodgeFiring: this.dodge.isDown,\n      magicBlastFiring: this.magicBlastAttack.isDown,\n      swordSwingFiring: this.swordSwing.isDown\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/src/phaser/controls/Controls.js"],"names":["Phaser","Controls","GameObjects","Sprite","constructor","scene","type","gamePadCount","gamePadNumber","setKeyInput","setWASDControls","directionals","input","keyboard","addKeys","up","Input","Keyboard","KeyCodes","W","down","S","left","A","right","D","magicBlastAttack","addKey","P","swordSwing","SPACE","dodge","SHIFT","lightningBolt","O","setArrowKeyControls","createCursorKeys","NUMPAD_NINE","NUMPAD_ZERO","NUMPAD_FOUR","NUMPAD_EIGHT","magicBlast","gamePadMode","console","log","xAxis","yAxis","isDown","gamepad","once","pad","event","on","button","index","X","R2","R1","L2","getMovementVector","total","isActive","pad1","pad2","axes","getValue","x","y","getMoveInput","lightningBoltFiring","dodgeFiring","magicBlastFiring","swordSwingFiring"],"mappings":"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","sourcesContent":["import Phaser from 'phaser';\r\nexport default class Controls extends Phaser.GameObjects.Sprite\r\n    {\r\n\r\n        constructor (scene,type,gamePadCount,gamePadNumber)\r\n        {\r\n\r\n            super(scene,type,gamePadCount,gamePadNumber);\r\n            this.setKeyInput(scene,type);\r\n            this.scene = scene;\r\n            //\r\n            this.gamePadCount = gamePadCount;\r\n            this.gamePadNumber = gamePadNumber;\r\n            \r\n        }\r\n        setWASDControls(){\r\n          this.directionals = this.directionals = this.scene.input.keyboard.addKeys({\r\n                up:Phaser.Input.Keyboard.KeyCodes.W,\r\n                down:Phaser.Input.Keyboard.KeyCodes.S,\r\n                left:Phaser.Input.Keyboard.KeyCodes.A,\r\n                right:Phaser.Input.Keyboard.KeyCodes.D\r\n            });\r\n          this.magicBlastAttack = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.P);\r\n          this.swordSwing = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\r\n          this.dodge = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SHIFT);\r\n          this.lightningBolt = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.O);\r\n        }\r\n        setArrowKeyControls(){\r\n          this.directionals = this.scene.input.keyboard.createCursorKeys();\r\n          this.magicBlastAttack = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.NUMPAD_NINE);\r\n          this.swordSwing = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.NUMPAD_ZERO);\r\n          this.dodge = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.NUMPAD_FOUR);\r\n          this.lightningBolt = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.NUMPAD_EIGHT);\r\n        }\r\n        setKeyInput(scene,{directionals,magicBlast,swordSwing,dodge}={}){\r\n          //Potentially can add more configurable controls by using passing keycodes in here in the future\r\n          if (directionals === 'WASD'){\r\n           this.setWASDControls();\r\n          }\r\n          else if (directionals === 'ArrowKeys'){\r\n           this.setArrowKeyControls();\r\n          }\r\n          else if (directionals === 'GamePad'){\r\n            \r\n            this.gamePadMode = true;\r\n            console.log(\"game pad mode active\" + this.gamePadMode);\r\n            this.lightningBolt = {};\r\n            this.swordSwing = {};\r\n            this.magicBlastAttack = {};\r\n            this.dodge = {};\r\n           \r\n            const xAxis = 0;\r\n            const yAxis = 0;\r\n            this.directionals = {\r\n                up: {isDown: yAxis > 0 ? true : false},\r\n                down: {isDown: yAxis < 0 ? true : false},\r\n                left: {isDown: xAxis > 0 ? true : false},\r\n                right: {isDown: xAxis > 0 ? true : false},\r\n              };\r\n            this.scene.input.gamepad.once('connected', function (pad, event) {\r\n             \r\n            }, this);\r\n            this.scene.input.gamepad.on('down', function (pad, button, index) {\r\n             \r\n              this.swordSwing.isDown = pad.X;\r\n              this.magicBlastAttack.isDown = pad.R2;\r\n              this.dodge.isDown =  pad.R1;\r\n              this.lightningBolt.isDown = pad.L2;\r\n              \r\n            }, this);\r\n           this.scene.input.gamepad.on('up', function (pad, button, index) {\r\n              this.swordSwing.isDown = false;\r\n              this.magicBlastAttack.isDown = false;\r\n              this.dodge.isDown = false;\r\n              this.lightningBolt.isDown = false;\r\n              \r\n            }, this);\r\n          }\r\n          \r\n          \r\n          \r\n          \r\n          \r\n         \r\n        }\r\n        \r\n        getMovementVector(){\r\n         \r\n          if (this.gamePadMode){\r\n            let pad: Phaser.Input.Gamepad.Gamepad;\r\n\r\n            //If there are enough controllers connected and the gamepad isActive at all then...\r\n            if (this.scene.input.gamepad.total&&this.scene.input.gamepad.isActive()){ \r\n               \r\n                if (this.scene.input.gamepad.total>=this.gamePadCount){\r\n                 \r\n                  pad = this.scene.input.gamepad.pad1\r\n                  \r\n                  if (this.scene.input.gamepad.pad2 && this.gamePadNumber===2){\r\n                    pad = this.scene.input.gamepad.pad2;\r\n                  }\r\n\r\n                  const xAxis = pad.axes[0].getValue();\r\n                  const yAxis = pad.axes[1].getValue();\r\n                \r\n                  this.directionals = {\r\n                    up: {isDown: yAxis < 0 ? true : false},\r\n                    down: {isDown: yAxis > 0 ? true : false},\r\n                    left: {isDown: xAxis < 0 ? true : false},\r\n                    right: {isDown: xAxis > 0 ? true : false},\r\n                  }\r\n                }\r\n                \r\n                \r\n                \r\n            }\r\n            else {\r\n                  console.log(\"Hey you didn't connect enough controllers\");\r\n                  //We should create a callback function here that resets the control scheme that is missing\r\n                  //and inform the user of the error of their ways.\r\n                  //We need the player number which is\r\n                  if (this.gamePadNumber == 1){\r\n                    //set controls back to keyboard wasd\r\n                    console.log(\"WASD keyboard Set\");\r\n                    this.setWASDControls();\r\n                    this.gamePadCount-=1;\r\n                  }\r\n                  else\r\n                  {\r\n                    //set controls to arrowkeys\r\n                    console.log(\"Arrow keyboard Set\");\r\n                    this.setArrowKeyControls();\r\n                    this.gamePadCount-=1;\r\n                  }\r\n                }\r\n\r\n       \r\n           }\r\n         return {\r\n           //Gets the vector for a directional press(y is inverted)\r\n           x: ((this.directionals.right.isDown)? 1:0)+((this.directionals.left.isDown)? -1:0),\r\n           y: ((this.directionals.up.isDown)? -1:0)+((this.directionals.down.isDown)? 1:0)};\r\n        }\r\n        getMoveInput(){\r\n          return {lightningBoltFiring: this.lightningBolt.isDown, dodgeFiring: this.dodge.isDown, magicBlastFiring: this.magicBlastAttack.isDown,swordSwingFiring: this.swordSwing.isDown};\r\n          \r\n        }\r\n        \r\n       \r\n    }"]},"metadata":{},"sourceType":"module"}