{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Adapter = void 0;\n\nvar events_1 = require(\"events\");\n\nvar Adapter = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(Adapter, _events_1$EventEmitte);\n\n  var _super = _createSuper(Adapter);\n\n  /**\n   * In-memory adapter constructor.\n   *\n   * @param {Namespace} nsp\n   */\n  function Adapter(nsp) {\n    var _this;\n\n    _classCallCheck(this, Adapter);\n\n    _this = _super.call(this);\n    _this.nsp = nsp;\n    _this.rooms = new Map();\n    _this.sids = new Map();\n    _this.encoder = nsp.server.encoder;\n    return _this;\n  }\n  /**\n   * To be overridden\n   */\n\n\n  _createClass(Adapter, [{\n    key: \"init\",\n    value: function init() {}\n    /**\n     * To be overridden\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {}\n    /**\n     * Adds a socket to a list of room.\n     *\n     * @param {SocketId}  id      the socket id\n     * @param {Set<Room>} rooms   a set of rooms\n     * @public\n     */\n\n  }, {\n    key: \"addAll\",\n    value: function addAll(id, rooms) {\n      var _iterator = _createForOfIteratorHelper(rooms),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var room = _step.value;\n\n          if (!this.sids.has(id)) {\n            this.sids.set(id, new Set());\n          }\n\n          this.sids.get(id).add(room);\n\n          if (!this.rooms.has(room)) {\n            this.rooms.set(room, new Set());\n          }\n\n          this.rooms.get(room).add(id);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Removes a socket from a room.\n     *\n     * @param {SocketId} id     the socket id\n     * @param {Room}     room   the room name\n     */\n\n  }, {\n    key: \"del\",\n    value: function del(id, room) {\n      if (this.sids.has(id)) {\n        this.sids.get(id).delete(room);\n      }\n\n      if (this.rooms.has(room)) {\n        this.rooms.get(room).delete(id);\n        if (this.rooms.get(room).size === 0) this.rooms.delete(room);\n      }\n    }\n    /**\n     * Removes a socket from all rooms it's joined.\n     *\n     * @param {SocketId} id   the socket id\n     */\n\n  }, {\n    key: \"delAll\",\n    value: function delAll(id) {\n      if (!this.sids.has(id)) {\n        return;\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(this.sids.get(id)),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var room = _step2.value;\n\n          if (this.rooms.has(room)) {\n            this.rooms.get(room).delete(id);\n            if (this.rooms.get(room).size === 0) this.rooms.delete(room);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this.sids.delete(id);\n    }\n    /**\n     * Broadcasts a packet.\n     *\n     * Options:\n     *  - `flags` {Object} flags for this packet\n     *  - `except` {Array} sids that should be excluded\n     *  - `rooms` {Array} list of rooms to broadcast to\n     *\n     * @param {Object} packet   the packet object\n     * @param {Object} opts     the options\n     * @public\n     */\n\n  }, {\n    key: \"broadcast\",\n    value: function broadcast(packet, opts) {\n      var rooms = opts.rooms;\n      var except = opts.except || new Set();\n      var flags = opts.flags || {};\n      var packetOpts = {\n        preEncoded: true,\n        volatile: flags.volatile,\n        compress: flags.compress\n      };\n      var ids = new Set();\n      packet.nsp = this.nsp.name;\n      var encodedPackets = this.encoder.encode(packet);\n\n      if (rooms.size) {\n        var _iterator3 = _createForOfIteratorHelper(rooms),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var room = _step3.value;\n            if (!this.rooms.has(room)) continue;\n\n            var _iterator4 = _createForOfIteratorHelper(this.rooms.get(room)),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var id = _step4.value;\n                if (ids.has(id) || except.has(id)) continue;\n                var socket = this.nsp.sockets.get(id);\n\n                if (socket) {\n                  socket.packet(encodedPackets, packetOpts);\n                  ids.add(id);\n                }\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      } else {\n        var _iterator5 = _createForOfIteratorHelper(this.sids),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _step5$value = _slicedToArray(_step5.value, 1),\n                _id = _step5$value[0];\n\n            if (except.has(_id)) continue;\n\n            var _socket = this.nsp.sockets.get(_id);\n\n            if (_socket) _socket.packet(encodedPackets, packetOpts);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    }\n    /**\n     * Gets a list of sockets by sid.\n     *\n     * @param {Set<Room>} rooms   the explicit set of rooms to check.\n     */\n\n  }, {\n    key: \"sockets\",\n    value: function sockets(rooms) {\n      var sids = new Set();\n\n      if (rooms.size) {\n        var _iterator6 = _createForOfIteratorHelper(rooms),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var room = _step6.value;\n            if (!this.rooms.has(room)) continue;\n\n            var _iterator7 = _createForOfIteratorHelper(this.rooms.get(room)),\n                _step7;\n\n            try {\n              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                var id = _step7.value;\n\n                if (this.nsp.sockets.has(id)) {\n                  sids.add(id);\n                }\n              }\n            } catch (err) {\n              _iterator7.e(err);\n            } finally {\n              _iterator7.f();\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      } else {\n        var _iterator8 = _createForOfIteratorHelper(this.sids),\n            _step8;\n\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var _step8$value = _slicedToArray(_step8.value, 1),\n                _id2 = _step8$value[0];\n\n            if (this.nsp.sockets.has(_id2)) sids.add(_id2);\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n      }\n\n      return Promise.resolve(sids);\n    }\n    /**\n     * Gets the list of rooms a given socket has joined.\n     *\n     * @param {SocketId} id   the socket id\n     */\n\n  }, {\n    key: \"socketRooms\",\n    value: function socketRooms(id) {\n      return this.sids.get(id);\n    }\n  }]);\n\n  return Adapter;\n}(events_1.EventEmitter);\n\nexports.Adapter = Adapter;","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/socket.io-adapter/dist/index.js"],"names":["Object","defineProperty","exports","value","Adapter","events_1","require","nsp","rooms","Map","sids","encoder","server","id","room","has","set","Set","get","add","delete","size","packet","opts","except","flags","packetOpts","preEncoded","volatile","compress","ids","name","encodedPackets","encode","socket","sockets","Promise","resolve","EventEmitter"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Adapter = void 0;\nconst events_1 = require(\"events\");\nclass Adapter extends events_1.EventEmitter {\n    /**\n     * In-memory adapter constructor.\n     *\n     * @param {Namespace} nsp\n     */\n    constructor(nsp) {\n        super();\n        this.nsp = nsp;\n        this.rooms = new Map();\n        this.sids = new Map();\n        this.encoder = nsp.server.encoder;\n    }\n    /**\n     * To be overridden\n     */\n    init() { }\n    /**\n     * To be overridden\n     */\n    close() { }\n    /**\n     * Adds a socket to a list of room.\n     *\n     * @param {SocketId}  id      the socket id\n     * @param {Set<Room>} rooms   a set of rooms\n     * @public\n     */\n    addAll(id, rooms) {\n        for (const room of rooms) {\n            if (!this.sids.has(id)) {\n                this.sids.set(id, new Set());\n            }\n            this.sids.get(id).add(room);\n            if (!this.rooms.has(room)) {\n                this.rooms.set(room, new Set());\n            }\n            this.rooms.get(room).add(id);\n        }\n    }\n    /**\n     * Removes a socket from a room.\n     *\n     * @param {SocketId} id     the socket id\n     * @param {Room}     room   the room name\n     */\n    del(id, room) {\n        if (this.sids.has(id)) {\n            this.sids.get(id).delete(room);\n        }\n        if (this.rooms.has(room)) {\n            this.rooms.get(room).delete(id);\n            if (this.rooms.get(room).size === 0)\n                this.rooms.delete(room);\n        }\n    }\n    /**\n     * Removes a socket from all rooms it's joined.\n     *\n     * @param {SocketId} id   the socket id\n     */\n    delAll(id) {\n        if (!this.sids.has(id)) {\n            return;\n        }\n        for (const room of this.sids.get(id)) {\n            if (this.rooms.has(room)) {\n                this.rooms.get(room).delete(id);\n                if (this.rooms.get(room).size === 0)\n                    this.rooms.delete(room);\n            }\n        }\n        this.sids.delete(id);\n    }\n    /**\n     * Broadcasts a packet.\n     *\n     * Options:\n     *  - `flags` {Object} flags for this packet\n     *  - `except` {Array} sids that should be excluded\n     *  - `rooms` {Array} list of rooms to broadcast to\n     *\n     * @param {Object} packet   the packet object\n     * @param {Object} opts     the options\n     * @public\n     */\n    broadcast(packet, opts) {\n        const rooms = opts.rooms;\n        const except = opts.except || new Set();\n        const flags = opts.flags || {};\n        const packetOpts = {\n            preEncoded: true,\n            volatile: flags.volatile,\n            compress: flags.compress\n        };\n        const ids = new Set();\n        packet.nsp = this.nsp.name;\n        const encodedPackets = this.encoder.encode(packet);\n        if (rooms.size) {\n            for (const room of rooms) {\n                if (!this.rooms.has(room))\n                    continue;\n                for (const id of this.rooms.get(room)) {\n                    if (ids.has(id) || except.has(id))\n                        continue;\n                    const socket = this.nsp.sockets.get(id);\n                    if (socket) {\n                        socket.packet(encodedPackets, packetOpts);\n                        ids.add(id);\n                    }\n                }\n            }\n        }\n        else {\n            for (const [id] of this.sids) {\n                if (except.has(id))\n                    continue;\n                const socket = this.nsp.sockets.get(id);\n                if (socket)\n                    socket.packet(encodedPackets, packetOpts);\n            }\n        }\n    }\n    /**\n     * Gets a list of sockets by sid.\n     *\n     * @param {Set<Room>} rooms   the explicit set of rooms to check.\n     */\n    sockets(rooms) {\n        const sids = new Set();\n        if (rooms.size) {\n            for (const room of rooms) {\n                if (!this.rooms.has(room))\n                    continue;\n                for (const id of this.rooms.get(room)) {\n                    if (this.nsp.sockets.has(id)) {\n                        sids.add(id);\n                    }\n                }\n            }\n        }\n        else {\n            for (const [id] of this.sids) {\n                if (this.nsp.sockets.has(id))\n                    sids.add(id);\n            }\n        }\n        return Promise.resolve(sids);\n    }\n    /**\n     * Gets the list of rooms a given socket has joined.\n     *\n     * @param {SocketId} id   the socket id\n     */\n    socketRooms(id) {\n        return this.sids.get(id);\n    }\n}\nexports.Adapter = Adapter;\n"]},"metadata":{},"sourceType":"script"}