{"ast":null,"code":"/*!\n * socket.io-node\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nvar fs = require('fs'),\n    socket = require('../lib/io'),\n    uglify = require('uglify-js'),\n    activeXObfuscator = require('active-x-obfuscator');\n/**\n * License headers.\n *\n * @api private\n */\n\n\nvar template = '/*! Socket.IO.%ext% build:' + socket.version + ', %type%. Copyright(c) 2011 LearnBoost <dev@learnboost.com> MIT Licensed */\\n',\n    development = template.replace('%type%', 'development').replace('%ext%', 'js'),\n    production = template.replace('%type%', 'production').replace('%ext%', 'min.js');\n/**\n * If statements, these allows you to create serveride & client side compatible\n * code using specially designed `if` statements that remove serverside\n * designed code from the source files\n *\n * @api private\n */\n\nvar starttagIF = '// if node',\n    endtagIF = '// end node';\n/**\n * The modules that are required to create a base build of Socket.IO.\n *\n * @const\n * @type {Array}\n * @api private\n */\n\nvar base = ['io.js', 'util.js', 'events.js', 'json.js', 'parser.js', 'transport.js', 'socket.js', 'namespace.js'];\n/**\n * The available transports for Socket.IO. These are mapped as:\n * \n *   - `key` the name of the transport\n *   - `value` the dependencies for the transport\n *\n * @const\n * @type {Object}\n * @api public\n */\n\nvar baseTransports = {\n  'websocket': ['transports/websocket.js'],\n  'flashsocket': ['transports/websocket.js', 'transports/flashsocket.js', 'vendor/web-socket-js/swfobject.js', 'vendor/web-socket-js/web_socket.js'],\n  'htmlfile': ['transports/xhr.js', 'transports/htmlfile.js']\n  /* FIXME: re-enable me once we have multi-part support\n  , 'xhr-multipart': ['transports/xhr.js', 'transports/xhr-multipart.js'] */\n  ,\n  'xhr-polling': ['transports/xhr.js', 'transports/xhr-polling.js'],\n  'jsonp-polling': ['transports/xhr.js', 'transports/xhr-polling.js', 'transports/jsonp-polling.js']\n};\n/**\n * Wrappers for client-side usage.\n * This enables usage in top-level browser window, client-side CommonJS systems and AMD loaders.\n * If doing a node build for server-side client, this wrapper is NOT included.\n * @api private\n */\n\nvar wrapperPre = \"\\nvar io = ('undefined' === typeof module ? {} : module.exports);\\n(function() {\\n\";\nvar wrapperPost = \"\\nif (typeof define === \\\"function\\\" && define.amd) {\" + \"\\n  define([], function () { return io; });\" + \"\\n}\\n})();\";\n/**\n * Builds a custom Socket.IO distribution based on the transports that you\n * need. You can configure the build to create development build or production\n * build (minified).\n *\n * @param {Array} transports The transports that needs to be bundled.\n * @param {Object} [options] Options to configure the building process.\n * @param {Function} callback Last argument should always be the callback\n * @callback {String|Boolean} err An optional argument, if it exists than an error\n *    occurred during the build process.\n * @callback {String} result The result of the build process.\n * @api public\n */\n\nvar builder = module.exports = function () {\n  var transports,\n      options,\n      callback,\n      error = null,\n      args = Array.prototype.slice.call(arguments, 0),\n      settings = {\n    minify: true,\n    node: false,\n    custom: []\n  }; // Fancy pancy argument support this makes any pattern possible mainly\n  // because we require only one of each type\n\n  args.forEach(function (arg) {\n    var type = Object.prototype.toString.call(arg).replace(/\\[object\\s(\\w+)\\]/gi, '$1').toLowerCase();\n\n    switch (type) {\n      case 'array':\n        return transports = arg;\n\n      case 'object':\n        return options = arg;\n\n      case 'function':\n        return callback = arg;\n    }\n  }); // Add defaults\n\n  options = options || {};\n  transports = transports || Object.keys(baseTransports); // Merge the data\n\n  for (var option in options) {\n    settings[option] = options[option];\n  } // Start creating a dependencies chain with all the required files for the\n  // custom Socket.IO bundle.\n\n\n  var files = [];\n  base.forEach(function (file) {\n    files.push(__dirname + '/../lib/' + file);\n  });\n  transports.forEach(function (transport) {\n    var dependencies = baseTransports[transport];\n\n    if (!dependencies) {\n      error = 'Unsupported transport `' + transport + '` supplied as argument.';\n      return;\n    } // Add the files to the files list, but only if they are not added before\n\n\n    dependencies.forEach(function (file) {\n      var path = __dirname + '/../lib/' + file;\n      if (!~files.indexOf(path)) files.push(path);\n    });\n  }); // check to see if the files tree compilation generated any errors.\n\n  if (error) return callback(error);\n  var results = {};\n  files.forEach(function (file) {\n    fs.readFile(file, function (err, content) {\n      if (err) error = err;\n      results[file] = content; // check if we are done yet, or not.. Just by checking the size of the result\n      // object.\n\n      if (Object.keys(results).length !== files.length) return; // we are done, did we error?\n\n      if (error) return callback(error); // start with the license header\n\n      var code = development,\n          ignore = 0; // pre-wrapper for non-server-side builds\n\n      if (!settings.node) code += wrapperPre; // concatenate the file contents in order\n\n      files.forEach(function (file) {\n        code += results[file];\n      }); // check if we need to add custom code\n\n      if (settings.custom.length) {\n        settings.custom.forEach(function (content) {\n          code += content;\n        });\n      } // post-wrapper for non-server-side builds\n\n\n      if (!settings.node) {\n        code += wrapperPost;\n      }\n\n      code = activeXObfuscator(code); // Search for conditional code blocks that need to be removed as they\n      // where designed for a server side env. but only if we don't want to\n      // make this build node compatible.\n\n      if (!settings.node) {\n        code = code.split('\\n').filter(function (line) {\n          // check if there are tags in here\n          var start = line.indexOf(starttagIF) >= 0,\n              end = line.indexOf(endtagIF) >= 0,\n              ret = ignore; // ignore the current line\n\n          if (start) {\n            ignore++;\n            ret = ignore;\n          } // stop ignoring the next line\n\n\n          if (end) {\n            ignore--;\n          }\n\n          return ret == 0;\n        }).join('\\n');\n      } // check if we need to process it any further\n\n\n      if (settings.minify) {\n        var ast = uglify.parser.parse(code);\n        ast = uglify.uglify.ast_mangle(ast);\n        ast = uglify.uglify.ast_squeeze(ast);\n        code = production + uglify.uglify.gen_code(ast, {\n          ascii_only: true\n        });\n      }\n\n      callback(error, code);\n    });\n  });\n};\n/**\n * Builder version is also the current client version\n * this way we don't have to do another include for the\n * clients version number and we can just include the builder.\n *\n * @type {String}\n * @api public\n */\n\n\nbuilder.version = socket.version;\n/**\n * A list of all build in transport types.\n *\n * @type {Object}\n * @api public\n */\n\nbuilder.transports = baseTransports;\n/**\n * Command line support, this allows us to generate builds without having\n * to load it as module.\n */\n\nif (!module.parent) {\n  // the first 2 are `node` and the path to this file, we don't need them\n  var args = process.argv.slice(2); // build a development build\n\n  builder(args.length ? args : false, {\n    minify: false\n  }, function (err, content) {\n    if (err) return console.error(err);\n    fs.write(fs.openSync(__dirname + '/../dist/socket.io.js', 'w'), content, 0, 'utf8');\n    console.log('Successfully generated the development build: socket.io.js');\n  }); // and build a production build\n\n  builder(args.length ? args : false, function (err, content) {\n    if (err) return console.error(err);\n    fs.write(fs.openSync(__dirname + '/../dist/socket.io.min.js', 'w'), content, 0, 'utf8');\n    console.log('Successfully generated the production build: socket.io.min.js');\n  });\n}","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/socket.io-proxy/node_modules/socket.io-client/bin/builder.js"],"names":["fs","require","socket","uglify","activeXObfuscator","template","version","development","replace","production","starttagIF","endtagIF","base","baseTransports","wrapperPre","wrapperPost","builder","module","exports","transports","options","callback","error","args","Array","prototype","slice","call","arguments","settings","minify","node","custom","forEach","arg","type","Object","toString","toLowerCase","keys","option","files","file","push","__dirname","transport","dependencies","path","indexOf","results","readFile","err","content","length","code","ignore","split","filter","line","start","end","ret","join","ast","parser","parse","ast_mangle","ast_squeeze","gen_code","ascii_only","parent","process","argv","console","write","openSync","log"],"mappings":"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","sourcesContent":["/*!\n * socket.io-node\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs')\n  , socket = require('../lib/io')\n  , uglify = require('uglify-js')\n  , activeXObfuscator = require('active-x-obfuscator');\n\n/**\n * License headers.\n *\n * @api private\n */\n\nvar template = '/*! Socket.IO.%ext% build:' + socket.version + ', %type%. Copyright(c) 2011 LearnBoost <dev@learnboost.com> MIT Licensed */\\n'\n  , development = template.replace('%type%', 'development').replace('%ext%', 'js')\n  , production = template.replace('%type%', 'production').replace('%ext%', 'min.js');\n\n/**\n * If statements, these allows you to create serveride & client side compatible\n * code using specially designed `if` statements that remove serverside\n * designed code from the source files\n *\n * @api private\n */\n\nvar starttagIF = '// if node'\n  , endtagIF = '// end node';\n\n/**\n * The modules that are required to create a base build of Socket.IO.\n *\n * @const\n * @type {Array}\n * @api private\n */\n\nvar base = [\n    'io.js'\n  , 'util.js'\n  , 'events.js'\n  , 'json.js'\n  , 'parser.js'\n  , 'transport.js'\n  , 'socket.js'\n  , 'namespace.js'\n  ];\n\n/**\n * The available transports for Socket.IO. These are mapped as:\n * \n *   - `key` the name of the transport\n *   - `value` the dependencies for the transport\n *\n * @const\n * @type {Object}\n * @api public\n */\n\nvar baseTransports = {\n    'websocket': ['transports/websocket.js']\n  , 'flashsocket': [\n        'transports/websocket.js'\n      , 'transports/flashsocket.js'\n      , 'vendor/web-socket-js/swfobject.js'\n      , 'vendor/web-socket-js/web_socket.js'\n    ] \n  , 'htmlfile': ['transports/xhr.js', 'transports/htmlfile.js']\n  /* FIXME: re-enable me once we have multi-part support\n  , 'xhr-multipart': ['transports/xhr.js', 'transports/xhr-multipart.js'] */\n  , 'xhr-polling': ['transports/xhr.js', 'transports/xhr-polling.js']\n  , 'jsonp-polling': [\n        'transports/xhr.js'\n      , 'transports/xhr-polling.js'\n      , 'transports/jsonp-polling.js'\n    ]\n};\n\n/**\n * Wrappers for client-side usage.\n * This enables usage in top-level browser window, client-side CommonJS systems and AMD loaders.\n * If doing a node build for server-side client, this wrapper is NOT included.\n * @api private\n */\nvar wrapperPre = \"\\nvar io = ('undefined' === typeof module ? {} : module.exports);\\n(function() {\\n\";\n\nvar wrapperPost = \"\\nif (typeof define === \\\"function\\\" && define.amd) {\" +\n                  \"\\n  define([], function () { return io; });\" +\n                  \"\\n}\\n})();\";\n\n\n/**\n * Builds a custom Socket.IO distribution based on the transports that you\n * need. You can configure the build to create development build or production\n * build (minified).\n *\n * @param {Array} transports The transports that needs to be bundled.\n * @param {Object} [options] Options to configure the building process.\n * @param {Function} callback Last argument should always be the callback\n * @callback {String|Boolean} err An optional argument, if it exists than an error\n *    occurred during the build process.\n * @callback {String} result The result of the build process.\n * @api public\n */\n\nvar builder = module.exports = function () {\n  var transports, options, callback, error = null\n    , args = Array.prototype.slice.call(arguments, 0)\n    , settings = {\n        minify: true\n      , node: false\n      , custom: []\n      };\n\n  // Fancy pancy argument support this makes any pattern possible mainly\n  // because we require only one of each type\n  args.forEach(function (arg) {\n    var type = Object.prototype.toString.call(arg)\n        .replace(/\\[object\\s(\\w+)\\]/gi , '$1' ).toLowerCase();\n\n    switch (type) {\n      case 'array':\n        return transports = arg;\n      case 'object':\n        return options = arg;\n      case 'function':\n        return callback = arg;\n    }\n  });\n\n  // Add defaults\n  options = options || {};\n  transports = transports || Object.keys(baseTransports);\n\n  // Merge the data\n  for(var option in options) {\n    settings[option] = options[option];\n  }\n\n  // Start creating a dependencies chain with all the required files for the\n  // custom Socket.IO bundle.\n  var files = [];\n  base.forEach(function (file) {\n    files.push(__dirname + '/../lib/' + file);\n  });\n\n  transports.forEach(function (transport) {\n    var dependencies = baseTransports[transport];\n    if (!dependencies) {\n      error = 'Unsupported transport `' + transport + '` supplied as argument.';\n      return;\n    }\n\n    // Add the files to the files list, but only if they are not added before\n    dependencies.forEach(function (file) {\n      var path = __dirname + '/../lib/' + file;\n      if (!~files.indexOf(path)) files.push(path);\n    })\n  });\n\n  // check to see if the files tree compilation generated any errors.\n  if (error) return callback(error);\n\n  var results = {};\n  files.forEach(function (file) {\n    fs.readFile(file, function (err, content) {\n      if (err) error = err;\n      results[file] = content;\n\n      // check if we are done yet, or not.. Just by checking the size of the result\n      // object.\n      if (Object.keys(results).length !== files.length) return;\n\n      // we are done, did we error?\n      if (error) return callback(error);\n\n      // start with the license header\n      var code = development\n        , ignore = 0;\n\n      // pre-wrapper for non-server-side builds\n      if (!settings.node) code += wrapperPre;\n\n      // concatenate the file contents in order\n      files.forEach(function (file) {\n        code += results[file];\n      });\n\n      // check if we need to add custom code\n      if (settings.custom.length) {\n        settings.custom.forEach(function (content) {\n          code += content;\n        });\n      }\n\n      // post-wrapper for non-server-side builds\n      if (!settings.node) {\n          code += wrapperPost;\n      }\n\n      code = activeXObfuscator(code);\n\n      // Search for conditional code blocks that need to be removed as they\n      // where designed for a server side env. but only if we don't want to\n      // make this build node compatible.\n      if (!settings.node) {\n        code = code.split('\\n').filter(function (line) {\n          // check if there are tags in here\n          var start = line.indexOf(starttagIF) >= 0\n            , end = line.indexOf(endtagIF) >= 0\n            , ret = ignore;\n\n          // ignore the current line\n          if (start) {\n            ignore++;\n            ret = ignore;\n          }\n\n          // stop ignoring the next line\n          if (end) {\n            ignore--;\n          }\n\n          return ret == 0;\n        }).join('\\n');\n      }\n\n      // check if we need to process it any further\n      if (settings.minify) {\n        var ast = uglify.parser.parse(code);\n        ast = uglify.uglify.ast_mangle(ast);\n        ast = uglify.uglify.ast_squeeze(ast);\n\n        code = production + uglify.uglify.gen_code(ast, { ascii_only: true });\n      }\n\n      callback(error, code);\n    })\n  })\n};\n\n/**\n * Builder version is also the current client version\n * this way we don't have to do another include for the\n * clients version number and we can just include the builder.\n *\n * @type {String}\n * @api public\n */\n \nbuilder.version = socket.version;\n\n/**\n * A list of all build in transport types.\n *\n * @type {Object}\n * @api public\n */\n \nbuilder.transports = baseTransports;\n\n/**\n * Command line support, this allows us to generate builds without having\n * to load it as module.\n */\n \nif (!module.parent){\n  // the first 2 are `node` and the path to this file, we don't need them\n  var args = process.argv.slice(2);\n\n  // build a development build\n  builder(args.length ? args : false, { minify:false }, function (err, content) {\n    if (err) return console.error(err);\n\n    fs.write(\n        fs.openSync(__dirname + '/../dist/socket.io.js', 'w')\n      , content\n      , 0\n      , 'utf8'\n    );\n    console.log('Successfully generated the development build: socket.io.js');\n  });\n\n  // and build a production build\n  builder(args.length ? args : false, function (err, content) {\n    if (err) return console.error(err);\n \n    fs.write(\n        fs.openSync(__dirname + '/../dist/socket.io.min.js', 'w')\n      , content\n      , 0\n      , 'utf8'\n    );\n    console.log('Successfully generated the production build: socket.io.min.js');\n  });\n}\n"]},"metadata":{},"sourceType":"script"}