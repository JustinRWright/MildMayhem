{"ast":null,"code":"import _classCallCheck from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/createSuper\";import Phaser from'phaser';var SwordSwing=/*#__PURE__*/function(_Phaser$Physics$Arcad){_inherits(SwordSwing,_Phaser$Physics$Arcad);var _super=_createSuper(SwordSwing);function SwordSwing(scene,x,y,texture){var _this;var _ref=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{},owner=_ref.owner;_classCallCheck(this,SwordSwing);_this=_super.call(this,scene,x,y,texture);//Adds sprite to screen\nscene.add.existing(_assertThisInitialized(_this));//Pair sprite to owner sprite(Either will be a player or opponent)\n_this.owner=owner;//Adds physics to sprite\nscene.physics.add.existing(_assertThisInitialized(_this));_this.setCircle(220);_this.body.setOffset(_this.owner.displayWidth/2,_this.owner.displayHeight/2);_this.setScale(.4);_this.createAnimations(scene);//When the swing completes, the sword is destroyed\n_this.on('animationcomplete',function(){this.swinging=false;this.destroy();},_assertThisInitialized(_this));_this.x=x;_this.y=y;_this.swinging=false;return _this;}_createClass(SwordSwing,[{key:\"createAnimations\",value:function createAnimations(scene){scene.anims.create({key:'swordSlash',frames:scene.anims.generateFrameNumbers(this.texture.key,{start:1,end:5}),frameRate:30,hideOnComplete:true});}},{key:\"update\",value:function update(){//This is called in the update l\nif(this.swinging){this.followOwner();}}//Orients sword to player, so that the sword doesn't just swing up all the time\n},{key:\"orientSword\",value:function orientSword(playerOrientationVector){//Convert orientation vector to degrees, shift 90 degrees(The sword animation starts by facing up, it also inverts the orientation y vector as the yaxis is inverted)\nvar newOrientation=Math.atan2(-playerOrientationVector.y,-playerOrientationVector.x)*180/Math.PI-90;this.angle=newOrientation;}},{key:\"swingSword\",value:function swingSword(){this.swinging=true;this.orientSword(this.owner.getOrientationVector());this.anims.play('swordSlash');}},{key:\"isSwinging\",value:function isSwinging(){return this.swinging;}},{key:\"followOwner\",value:function followOwner(){this.x=this.owner.x;this.y=this.owner.y;}},{key:\"inSwordSweep\",value:function inSwordSweep(gameObject){//Checks to see if an object is within the sweep of the sword attack\n//converts the angle between objects to rotate counter clockwise\n//in order to match the rotation of the sword angle math in orient sword\n//**A -270 degrees seems to be automatically converted to 90 inside of phaser.arcade.sprite.angle after it is set\nvar collisionAngle=Phaser.Math.Angle.Between(gameObject.x,gameObject.y,this.x,this.y)*180/Math.PI-90;//This is the collision width of the object\nif(collisionAngle>this.angle-60&&collisionAngle<this.angle+60){return true;}else{return false;}}},{key:\"getOwner\",value:function getOwner(){return this.owner;}}]);return SwordSwing;}(Phaser.Physics.Arcade.Sprite);export{SwordSwing as default};","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/src/phaser/sprites/SwordSwing.js"],"names":["Phaser","SwordSwing","scene","x","y","texture","owner","add","existing","physics","setCircle","body","setOffset","displayWidth","displayHeight","setScale","createAnimations","on","swinging","destroy","anims","create","key","frames","generateFrameNumbers","start","end","frameRate","hideOnComplete","followOwner","playerOrientationVector","newOrientation","Math","atan2","PI","angle","orientSword","getOrientationVector","play","gameObject","collisionAngle","Angle","Between","Physics","Arcade","Sprite"],"mappings":"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","sourcesContent":["import Phaser from 'phaser';\r\nexport default class SwordSwing extends Phaser.Physics.Arcade.Sprite\r\n    {\r\n\r\n        constructor (scene,x,y,texture,{owner}={})\r\n        {\r\n            super(scene,x,y,texture);\r\n            //Adds sprite to screen\r\n            scene.add.existing(this);\r\n            //Pair sprite to owner sprite(Either will be a player or opponent)\r\n            this.owner = owner;\r\n            //Adds physics to sprite\r\n            scene.physics.add.existing(this);\r\n           \r\n            \r\n            \r\n            this.setCircle(220);\r\n            \r\n            this.body.setOffset(this.owner.displayWidth/2,this.owner.displayHeight/2);\r\n            this.setScale(.4);\r\n          \r\n          \r\n            this.createAnimations(scene);\r\n            //When the swing completes, the sword is destroyed\r\n            this.on('animationcomplete', function() {\r\n              this.swinging = false;\r\n              this.destroy();\r\n            },this);\r\n           \r\n\r\n           \r\n            this.x = x;\r\n            this.y = y;\r\n            this.swinging = false;\r\n        }\r\n       \r\n        createAnimations(scene){\r\n          scene.anims.create({\r\n            key: 'swordSlash',\r\n            frames: scene.anims.generateFrameNumbers(this.texture.key, { start: 1, end: 5 }),\r\n            frameRate: 30,\r\n            hideOnComplete: true\r\n          });\r\n          \r\n          \r\n        }\r\n        update(){\r\n          //This is called in the update l\r\n          if (this.swinging){\r\n            this.followOwner();\r\n          }\r\n        }\r\n        //Orients sword to player, so that the sword doesn't just swing up all the time\r\n        orientSword(playerOrientationVector){\r\n         \r\n          //Convert orientation vector to degrees, shift 90 degrees(The sword animation starts by facing up, it also inverts the orientation y vector as the yaxis is inverted)\r\n          let newOrientation = (Math.atan2(-playerOrientationVector.y,-playerOrientationVector.x)*180/Math.PI-90);\r\n         \r\n          this.angle = newOrientation; \r\n          \r\n        }\r\n        \r\n        swingSword(){\r\n\r\n          this.swinging = true;\r\n          this.orientSword(this.owner.getOrientationVector());\r\n          this.anims.play('swordSlash');\r\n        }\r\n        isSwinging(){\r\n          return this.swinging;\r\n        }\r\n\r\n        followOwner(){\r\n          this.x = this.owner.x;\r\n          this.y = this.owner.y;\r\n        }\r\n        inSwordSweep(gameObject){\r\n          //Checks to see if an object is within the sweep of the sword attack\r\n          //converts the angle between objects to rotate counter clockwise\r\n          //in order to match the rotation of the sword angle math in orient sword\r\n          //**A -270 degrees seems to be automatically converted to 90 inside of phaser.arcade.sprite.angle after it is set\r\n          let collisionAngle = Phaser.Math.Angle.Between(gameObject.x,gameObject.y,this.x,this.y)*180/Math.PI-90;\r\n         \r\n          //This is the collision width of the object\r\n          if (collisionAngle>this.angle-60&&collisionAngle<this.angle+60){\r\n            return true;\r\n          }\r\n          else{\r\n            return false;\r\n          }\r\n        }\r\n        getOwner(){\r\n          return this.owner;\r\n        }\r\n    }"]},"metadata":{},"sourceType":"module"}