{"ast":null,"code":"import { Scene } from 'phaser';\nimport Player from \"../sprites/Player.js\";\nimport Controls from \"../controls/Controls.js\";\nimport MagicBlast from \"../sprites/MagicBlast.js\";\nimport SwordSwing from \"../sprites/SwordSwing.js\";\nimport Phaser from 'phaser';\nimport bckg from '../assets/bckg.png';\nimport HealthBar from \"../sprites/HealthBar.js\";\nimport CoolDown from \"../sprites/CoolDown.js\";\nimport LightningBolt from '../sprites/lightningBolt.js';\nimport LightningHB from '../sprites/lightningBoltHitbox.js';\nimport io from 'socket.io-client'; //import proxy from 'socket.io-proxy';\n\nlet LocalGameScene = {\n  preload: function () {\n    //I load the images from my publicly hosted imgur\n    //because the file system seems to break for some reason when this is run in IonPhaser\n    //(Which is inside a React application)\n    //I make these drawings/spritesheets in piskel\n    this.load.image('bckg', 'https://i.imgur.com/DMVC2IQ.png');\n    this.load.image('wall', 'https://i.imgur.com/av8q7Or.png');\n    this.load.image('vwall', 'https://i.imgur.com/UB2GdEL.png');\n    this.load.spritesheet('swordSwing', 'https://i.imgur.com/ULyXfap.png', {\n      frameWidth: 500,\n      frameHeight: 500\n    });\n    this.load.image('swordCool', 'https://i.imgur.com/SnLjQdR.png');\n    this.load.image('blastCool', 'https://i.imgur.com/d4Enueh.png');\n    this.load.spritesheet('magicBlast', 'https://i.imgur.com/dEhNPqO.png', {\n      frameWidth: 150,\n      frameHeight: 150\n    });\n    this.load.spritesheet('explosion', 'https://i.imgur.com/UHZiUKC.png', {\n      frameWidth: 192,\n      frameHeight: 192\n    });\n    this.load.spritesheet('player', 'https://i.imgur.com/WlEeiKT.png', {\n      frameWidth: 68,\n      frameHeight: 68\n    });\n    this.load.spritesheet('otherPlayer', 'https://i.imgur.com/NYAJusD.png', {\n      frameWidth: 68,\n      frameHeight: 68\n    });\n    this.load.spritesheet('Background', 'https://i.imgur.com/8SzCikO.png', {\n      frameWidth: 800,\n      frameHeight: 600\n    });\n    this.load.image('dodgeCool', 'https://i.imgur.com/mTklmkU.png');\n    this.load.spritesheet('lightningBolt', 'https://i.imgur.com/3MskIUy.png', {\n      frameWidth: 16,\n      frameHeight: 1000\n    });\n    this.load.image('lightningCool', 'https://i.imgur.com/FVquIxw.png');\n  },\n  create: function () {\n    /*I define some of the functions ex:this.deflectBlast\r\n    this way instead of outside of the preload/create/update\r\n    because that is the way they don't throw an error while using IonPhaser,\r\n    Perhaps they can be moved to another file and imported in*/\n    //Deflect Magic Blast with sword\n    this.deflectBlast = function (magicBlast, swordHitbox) {\n      if (swordHitbox.inSwordSweep(magicBlast)) {\n        magicBlast.deflectFrom(swordHitbox.getOwner());\n      }\n    }; //Create explosion animation\n\n\n    this.explosionAnim = this.anims.create({\n      key: 'explode',\n      frames: this.anims.generateFrameNumbers('explosion', {\n        start: 1,\n        end: 23\n      }),\n      frameRate: 10,\n      repeat: -1\n    }); //Callback function for player/magicBlast Collision\n\n    this.playerHit = function (magicBlast, player) {\n      //Check that the magicBlast is hitting the right player\n      if (magicBlast.getOwner() !== player) {\n        magicBlast.explode(); //Check if player is stunned or dodging, if neither is true, play stun animation and calculate damage\n\n        if (player.getStun() === false || player.getDodging() === false) {\n          player.playStun(); //When the healthbar reaches 0, this evaluates to true\n\n          if (player.getHealthBar().decrease(4)) {\n            //This function \n            player.gameOver();\n            player.anims.play('explode', true); //Win Screen and link people back to main menu   \n            //How could we access the react router DOM here?\n\n            let timedEvent = player.scene.time.delayedCall(3000, player.scene.redirect, [], this);\n          }\n\n          ; //Knock opponent backwards\n\n          player.knockBack(magicBlast);\n        }\n      }\n    }; //Collision between lightning and player\n\n\n    this.playerHitLightning = function (lightningBolt, player) {\n      //Players cannot hit themselves with their own attacks\n      if (lightningBolt.getOwner() !== player) {\n        if (player.getStun() === false && player.getDodging() === false) {\n          //Stun is started for player\n          player.playStun();\n\n          if (player.getHealthBar().decrease(4)) {\n            //Player dies\n            player.gameOver();\n            player.anims.play('explode', true); //Send players back to main menu\n\n            let timedEvent = player.scene.time.delayedCall(3000, player.scene.redirect, [], this);\n          }\n\n          player.knockBack(lightningBolt); //Destroy the animation associated with these hitboxes\n\n          lightningBolt.destroyAnimationSprite(); //Find all other associated lightning bolt hitboxes and destroy them\n\n          lightningBolt.scene.lightningBolts.getChildren().forEach(lightningBolt => {\n            if (lightningBolt.getOwner() !== player) {\n              lightningBolt.body.enable = false;\n            }\n          });\n        }\n      }\n    }; //Callback for sending user back to main page when game ends\n\n\n    this.redirect = function () {\n      window.location.replace('http://localhost:3000/');\n    }; //Glowing Background Sprite\n\n\n    this.background = this.add.sprite(400, 300, 'Background');\n    this.anims.create({\n      key: 'glow',\n      frames: this.anims.generateFrameNumbers('Background', {\n        start: 1,\n        end: 12\n      }),\n      frameRate: 4,\n      repeat: -1,\n      yoyo: true\n    });\n    this.background.anims.play('glow'); //Refactoring idea: make every variable passed into constructors \n    //descriptive javascript properties for readability\n\n    let self = this;\n    console.log('gameconfig is: ' + this.gameConfig);\n\n    if (this.gameConfig === 'joinOnline') {\n      this.player1 = new Player(this, 400, 200, 'otherPlayer', this.explosionAnim);\n      this.player2 = new Player(self, 400, 500, 'player', self.explosionAnim);\n      this.player1.createAnimations(this);\n      this.player2.createAnimations(this);\n      console.log('my id is: ' + this.socket.id);\n      this.player2.setVisible(true);\n    }\n\n    if (this.gameConfig === 'createOnline') {\n      this.player1 = new Player(this, 400, 500, 'player', this.explosionAnim);\n      this.player2 = new Player(self, 400, 200, 'otherPlayer', self.explosionAnim);\n      this.player1.createAnimations(this);\n      this.player2.createAnimations(this);\n      this.player2.setVisible(false);\n      this.socket.emit('createOnlineRoom');\n      this.socket.emit('getRoomName');\n    }\n\n    this.player2.moving = false;\n    this.player2.moveTimer = 0;\n    this.socket.on('yourRoomName', function (roomName) {\n      console.log('myroomName is called here');\n      self.roomName = roomName;\n    });\n    this.socket.on('opponentJoined', function (opponentSocketId) {\n      self.player2.setVisible(true);\n      console.log('opponentJoined, id: ' + opponentSocketId);\n      self.opponentSocketId = opponentSocketId;\n      self.socket.emit('confirmJoinRoom', opponentSocketId);\n    });\n    this.socket.on('joinedRoom', function (opponentSocketId) {\n      console.log('joined Room socket event happened');\n      self.opponentSocketId = opponentSocketId;\n    });\n    self.socket.on('playerMoved', function (player2) {\n      console.log('player2 moved');\n      self.player2.moving = true;\n      self.player2.x = player2.x;\n      self.player2.y = player2.y;\n      self.player2.setOrientationVector(player2.direction);\n      self.player2.setMovementAnim(player2.direction);\n    }); //Create Win Text\n\n    this.youWin = this.add.text(150, 300 - 60, 'PLAYER2 WINS ', {\n      fontSize: '70px',\n      color: '#66FF00'\n    });\n    this.youWin.setVisible(false); //Create Health Bars\n\n    this.healthBarP1 = new HealthBar({\n      scene: this,\n      x: 0,\n      y: 584\n    });\n    this.healthBarP2 = new HealthBar({\n      scene: this,\n      x: 0,\n      y: 0\n    }); //Create Cooldowns: Note, final variable passed in is a timer, it sets how long the cooldown lasts in milliseconds            \n\n    this.swordCoolDownP1 = new CoolDown(this, 230, 560, 'swordCool', 700);\n    this.swordCoolDownP2 = new CoolDown(this, 570, 40, 'swordCool', 700);\n    this.magicCoolDownP1 = new CoolDown(this, 278, 560, 'blastCool', 1000);\n    this.magicCoolDownP2 = new CoolDown(this, 618, 40, 'blastCool', 1000);\n    this.dodgeCoolDownP1 = new CoolDown(this, 326, 560, 'dodgeCool', 1000);\n    this.dodgeCoolDownP2 = new CoolDown(this, 665, 40, 'dodgeCool', 1000);\n    this.lightningCoolDownP1 = new CoolDown(this, 374, 560, 'lightningCool', 5000);\n    this.lightningCoolDownP2 = new CoolDown(this, 713, 40, 'lightningCool', 5000); //Checks for the amount of gamepads connected to the phaser game, if the passed controls do not match the quantity of connected gamepads,\n    //the controls will be reset, this can be fixed later\n\n    let pad;\n    let gamePadCount = this.controlConfig.player1.Movement === 'GamePad' ? 1 : 0; //Create controls object which can be accessed in the update logic for game object interactions\n\n    this.controlsP1 = new Controls(this, {\n      directionals: this.controlConfig.player1.Movement,\n      magicBlast: this.controlConfig.player1.MagicBlast,\n      swordSwing: this.controlConfig.player1.SwordSlash\n    }, gamePadCount, 1); //These phaser groups allow for collisino detection of classes of objects at scale, for example all magic blasts have the same collision callack that is called\n\n    this.magicBlasts = this.physics.add.group();\n    this.swordHitBoxes = this.physics.add.group();\n    this.lightningBolts = this.physics.add.group(); //Create a sprite group in order to handle collisions\n\n    this.players = this.physics.add.group();\n    this.players.add(this.player1); //Attach healthbars to the selected players, this is so the game knows whose healthbar is whose\n\n    this.player1.setHealthBar(this.healthBarP1); //phaser has a prebuilt bounce physics setup, any value greater than 1 causes an exponential growth in object velocity as it multiplies each bounce\n\n    this.player1.setBounce(1); //Collision handling for object groups (group1, group2, callback)\n\n    this.physics.add.overlap(this.magicBlasts, this.swordHitBoxes, this.deflectBlast);\n    this.physics.add.overlap(this.magicBlasts, this.players, this.playerHit);\n    this.physics.add.overlap(this.lightningBolts, this.players, this.playerHitLightning); //4 walls on the outside\n\n    this.leftWall = this.physics.add.sprite(-55, 300, 'vwall'); //Set immovable allows the objects to not move on collision\n\n    this.leftWall.body.immovable = true;\n    this.rightWall = this.physics.add.sprite(855, 300, 'vwall');\n    this.rightWall.body.immovable = true;\n    this.topWall = this.physics.add.sprite(400, -55, 'wall');\n    this.topWall.body.immovable = true;\n    this.bottomWall = this.physics.add.sprite(400, 655, 'wall');\n    this.bottomWall.body.immovable = true; //staticGroup is a different type of group that doesn't move I believe\n\n    this.walls = this.physics.add.staticGroup();\n    this.walls.add(this.leftWall);\n    this.walls.add(this.rightWall);\n    this.walls.add(this.topWall);\n    this.walls.add(this.bottomWall); //midline barrier wall\n\n    this.midWall = this.physics.add.sprite(400, 300, 'wall');\n    this.midWall.setScale(1, .08);\n    this.midWall.setVisible(false);\n    this.midWall.body.immovable = true;\n    this.physics.add.collider(this.midWall, this.players); //The order of the objects in the collider matters, magicBlasts \n    //will only bounce off the walls if this.magicBlasts is the first argument\n\n    this.physics.add.collider(this.magicBlasts, this.walls);\n    this.physics.add.collider(this.walls, this.players);\n\n    this.createMagicBlast = function (player) {\n      //Create magic Blast\n      var magicBlast = new MagicBlast(this, player.getX(), player.getY(), 'magicBlast', {\n        owner: player\n      }); //Add to collision group\n\n      this.magicBlasts.add(magicBlast); //Fire in direction of player orientation\n\n      magicBlast.setMagicBlastVelocity(player.getOrientationVector()); //Set magicBlast bounce\n\n      magicBlast.setCollideWorldBounds(true);\n      magicBlast.setBounce(1);\n    };\n\n    this.checkForSwingThenSwing = function (attackInput, player, coolDown) {\n      //Check if swordSwing exists, and then check if it belongs to the player\n      this.swordHitBoxes.getChildren().forEach(swordSwing => {\n        if (swordSwing.getOwner() === player) {\n          let swordToCheck = swordSwing;\n        }\n      }); //Check if sword swing can be activated\n      //if the attack button is pressed,\n      //and there is no sword currently active on the player,\n      //and the cooldown is no active, then the sword can be swung\n\n      if (attackInput.swordSwingFiring && typeof swordToCheck == 'undefined' && !coolDown.isActive()) {\n        //Set sword swing spawn point\n        let swordSpawnX = player.getX();\n        let swordSpawnY = player.getY(); //Create new sword swing\n\n        let newSwordSwing = new SwordSwing(this, swordSpawnX, swordSpawnY, 'swordSwing', {\n          owner: player\n        });\n        newSwordSwing.swingSword();\n        coolDown.startCoolDown();\n        this.swordHitBoxes.add(newSwordSwing);\n      }\n    };\n  },\n  update: function () {\n    //Checks if player 1 or player2 have lost, can events be used for this instead?\n    if (!this.player1.isAlive()) {\n      this.youWin.setVisible(true);\n      this.youWin.setText('PLAYER2 WINS');\n    } //Get Player input\n\n\n    this.movementVectorP1 = this.controlsP1.getMovementVector(); //Set the orientation of the player\n\n    this.player1.setOrientationVector(this.movementVectorP1);\n    console.log(\"roomName is: \" + this.roomName); // emit player movement data\n\n    var x = this.player1.x;\n    var y = this.player1.y;\n    var d = this.player1.getOrientationVector();\n\n    if (this.player1.oldPosition && (x !== this.player1.oldPosition.x || y !== this.player1.oldPosition.y || d !== this.player1.oldPosition.direction)) {\n      console.log('opponentSocketId is: ' + this.opponentSocketId);\n      this.socket.emit('playerMovement', {\n        x: x,\n        y: y,\n        direction: d,\n        roomName: this.roomName\n      });\n    } // save old position data\n\n\n    this.player1.oldPosition = {\n      x: x,\n      y: y,\n      direction: d\n    }; //Stop animation if not moving\n\n    if (this.player2.moving === false) {\n      this.player2.anims.stop();\n    } else {\n      //Count some update frames, compensating for server delay,\n      //If there is an acceptable delay from the server, then it can be assumed that the opponent\n      //has stopped moving since the last time\n      //They triggered a movmement event\n      this.player2.moveTimer += 1;\n\n      if (this.player2.moveTimer > 12) {\n        this.player2.moving = false;\n        this.player2.moveTimer = 0;\n      }\n    } //Check to make sure the player is not stunned, alive, and is not dodging\n\n\n    if (!this.player1.getStun() && this.player1.isAlive() && !this.player1.getDodging()) {\n      this.player1.setPlayerVelocity(this.movementVectorP1);\n    } //Get attack inputs every update cycle\n\n\n    let attackInputsP1 = this.controlsP1.getMoveInput(); //Check for user firing magic blast and that the cooldown is not active\n\n    if (attackInputsP1.magicBlastFiring && !this.magicCoolDownP1.isActive()) {\n      this.magicCoolDownP1.startCoolDown();\n      this.createMagicBlast(this.player1);\n    }\n\n    ; //Check for user firing Lightning Bolt\n\n    if (attackInputsP1.lightningBoltFiring && !this.lightningCoolDownP1.isActive()) {\n      this.lightningCoolDownP1.startCoolDown(); //create lightning Bolt animation object\n\n      let lightningBolt = new LightningBolt(this, this.player1.getX(), this.player1.getY(), 'lightningBolt', {\n        owner: this.player1\n      }); //Creates 4 lightning bolt hitboxes which are the WIDTH of the lightning bolt, they travel \n      //at a speed so fast that it mimics a diagonal hitbox. This normally\n      //can't be created using Arcade physics and its Axis aligned bounding boxes;\n\n      let lightningBoltHB1 = new LightningHB(this, this.player1.getX(), this.player1.getY(), 'magicBlast', {\n        owner: this.player1,\n        animationSprite: lightningBolt,\n        Olength: 100\n      });\n      let lightningBoltHB2 = new LightningHB(this, this.player1.getX(), this.player1.getY(), 'magicBlast', {\n        owner: this.player1,\n        animationSprite: lightningBolt,\n        Olength: 50\n      });\n      let lightningBoltHB3 = new LightningHB(this, this.player1.getX(), this.player1.getY(), 'magicBlast', {\n        owner: this.player1,\n        animationSprite: lightningBolt,\n        Olength: 25\n      });\n      let lightningBoltHB4 = new LightningHB(this, this.player1.getX(), this.player1.getY(), 'magicBlast', {\n        owner: this.player1,\n        animationSprite: lightningBolt,\n        Olength: 75\n      }); //Add to collision group\n\n      this.lightningBolts.add(lightningBoltHB1);\n      this.lightningBolts.add(lightningBoltHB2);\n      this.lightningBolts.add(lightningBoltHB3);\n      this.lightningBolts.add(lightningBoltHB4);\n    }\n\n    ; //Check for user dodging and check that they aren't already in dodge mode\n\n    if (attackInputsP1.dodgeFiring && !this.player1.getDodging() && !this.dodgeCoolDownP1.isActive()) {\n      this.dodgeCoolDownP1.startCoolDown();\n      this.player1.dodge();\n    }\n\n    ; //Check if sword swings exist, and update them as needed, \n    //this is the best way I can think of for tracking and following player position in the main loop\n    //Perhaps there's a better way? Without it \n    //the sword is stuck in place, perhaps it can be attached to a reference to player position?\n    //I took a look at an update pattern for a situation like this\n\n    let swordSwings = this.swordHitBoxes.getChildren();\n\n    if (swordSwings.length > 0) {\n      swordSwings.forEach(swordSwing => {\n        swordSwing.update();\n      });\n    } //Check for user swinging sword and then swing, starting the cooldown\n    //I think functions are supposed to do only one thing, I'll fix this later\n\n\n    this.checkForSwingThenSwing(attackInputsP1, this.player1, this.swordCoolDownP1);\n  }\n};\nexport default LocalGameScene;","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/src/phaser/scenes/OnlineGameScene.js"],"names":["Scene","Player","Controls","MagicBlast","SwordSwing","Phaser","bckg","HealthBar","CoolDown","LightningBolt","LightningHB","io","LocalGameScene","preload","load","image","spritesheet","frameWidth","frameHeight","create","deflectBlast","magicBlast","swordHitbox","inSwordSweep","deflectFrom","getOwner","explosionAnim","anims","key","frames","generateFrameNumbers","start","end","frameRate","repeat","playerHit","player","explode","getStun","getDodging","playStun","getHealthBar","decrease","gameOver","play","timedEvent","scene","time","delayedCall","redirect","knockBack","playerHitLightning","lightningBolt","destroyAnimationSprite","lightningBolts","getChildren","forEach","body","enable","window","location","replace","background","add","sprite","yoyo","self","console","log","gameConfig","player1","player2","createAnimations","socket","id","setVisible","emit","moving","moveTimer","on","roomName","opponentSocketId","x","y","setOrientationVector","direction","setMovementAnim","youWin","text","fontSize","color","healthBarP1","healthBarP2","swordCoolDownP1","swordCoolDownP2","magicCoolDownP1","magicCoolDownP2","dodgeCoolDownP1","dodgeCoolDownP2","lightningCoolDownP1","lightningCoolDownP2","pad","gamePadCount","controlConfig","Movement","controlsP1","directionals","swordSwing","SwordSlash","magicBlasts","physics","group","swordHitBoxes","players","setHealthBar","setBounce","overlap","leftWall","immovable","rightWall","topWall","bottomWall","walls","staticGroup","midWall","setScale","collider","createMagicBlast","getX","getY","owner","setMagicBlastVelocity","getOrientationVector","setCollideWorldBounds","checkForSwingThenSwing","attackInput","coolDown","swordToCheck","swordSwingFiring","isActive","swordSpawnX","swordSpawnY","newSwordSwing","swingSword","startCoolDown","update","isAlive","setText","movementVectorP1","getMovementVector","d","oldPosition","stop","setPlayerVelocity","attackInputsP1","getMoveInput","magicBlastFiring","lightningBoltFiring","lightningBoltHB1","animationSprite","Olength","lightningBoltHB2","lightningBoltHB3","lightningBoltHB4","dodgeFiring","dodge","swordSwings","length"],"mappings":"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","sourcesContent":["import { Scene } from 'phaser';\r\nimport Player from \"../sprites/Player.js\";\r\nimport Controls from \"../controls/Controls.js\";\r\nimport MagicBlast from \"../sprites/MagicBlast.js\";\r\nimport SwordSwing from \"../sprites/SwordSwing.js\";\r\nimport Phaser from 'phaser';\r\nimport bckg from '../assets/bckg.png';\r\nimport HealthBar from \"../sprites/HealthBar.js\";\r\nimport CoolDown from \"../sprites/CoolDown.js\";\r\nimport LightningBolt from '../sprites/lightningBolt.js';\r\nimport LightningHB from '../sprites/lightningBoltHitbox.js';\r\nimport io from 'socket.io-client';\r\n//import proxy from 'socket.io-proxy';\r\nlet LocalGameScene = {\r\n    \r\n    \r\n    preload: function()\r\n        {\r\n            //I load the images from my publicly hosted imgur\r\n            //because the file system seems to break for some reason when this is run in IonPhaser\r\n            //(Which is inside a React application)\r\n            //I make these drawings/spritesheets in piskel\r\n            this.load.image('bckg', 'https://i.imgur.com/DMVC2IQ.png');\r\n            this.load.image('wall', 'https://i.imgur.com/av8q7Or.png');\r\n            this.load.image('vwall', 'https://i.imgur.com/UB2GdEL.png');\r\n            this.load.spritesheet('swordSwing', 'https://i.imgur.com/ULyXfap.png', {frameWidth: 500, frameHeight: 500});\r\n            this.load.image('swordCool', 'https://i.imgur.com/SnLjQdR.png');\r\n            this.load.image('blastCool', 'https://i.imgur.com/d4Enueh.png');\r\n            this.load.spritesheet('magicBlast', 'https://i.imgur.com/dEhNPqO.png', {frameWidth: 150, frameHeight: 150});\r\n            this.load.spritesheet('explosion','https://i.imgur.com/UHZiUKC.png', {frameWidth: 192, frameHeight: 192});\r\n            this.load.spritesheet('player', 'https://i.imgur.com/WlEeiKT.png', { frameWidth: 68, frameHeight: 68 });\r\n            this.load.spritesheet('otherPlayer','https://i.imgur.com/NYAJusD.png', { frameWidth: 68, frameHeight: 68 });\r\n            this.load.spritesheet('Background','https://i.imgur.com/8SzCikO.png', {frameWidth: 800, frameHeight: 600});\r\n            this.load.image('dodgeCool', 'https://i.imgur.com/mTklmkU.png');\r\n            this.load.spritesheet('lightningBolt', 'https://i.imgur.com/3MskIUy.png', {frameWidth: 16, frameHeight: 1000});\r\n            this.load.image('lightningCool', 'https://i.imgur.com/FVquIxw.png');\r\n        },\r\n\r\n    create: function()\r\n        {   \r\n            \r\n           /*I define some of the functions ex:this.deflectBlast\r\n           this way instead of outside of the preload/create/update\r\n           because that is the way they don't throw an error while using IonPhaser,\r\n           Perhaps they can be moved to another file and imported in*/\r\n\r\n          //Deflect Magic Blast with sword\r\n            this.deflectBlast = function(magicBlast,swordHitbox){\r\n                if(swordHitbox.inSwordSweep(magicBlast)){\r\n                    magicBlast.deflectFrom(swordHitbox.getOwner());\r\n                }\r\n            };\r\n           //Create explosion animation\r\n            this.explosionAnim = this.anims.create({\r\n                key: 'explode',\r\n                frames: this.anims.generateFrameNumbers('explosion',{ start: 1, end: 23}),\r\n                frameRate: 10,\r\n                repeat: -1\r\n            });\r\n            //Callback function for player/magicBlast Collision\r\n            this.playerHit = function(magicBlast,player){\r\n               //Check that the magicBlast is hitting the right player\r\n                if (magicBlast.getOwner()!==player){\r\n                    magicBlast.explode();\r\n                    //Check if player is stunned or dodging, if neither is true, play stun animation and calculate damage\r\n                    if (player.getStun() === false || player.getDodging() === false){\r\n                        player.playStun();\r\n                        //When the healthbar reaches 0, this evaluates to true\r\n                        if(player.getHealthBar().decrease(4)){\r\n                            //This function \r\n                            player.gameOver();\r\n                            player.anims.play('explode', true);\r\n                            //Win Screen and link people back to main menu   \r\n                            //How could we access the react router DOM here?\r\n\r\n                            let timedEvent = player.scene.time.delayedCall(3000, player.scene.redirect, [], this);\r\n                        };\r\n                        //Knock opponent backwards\r\n                        player.knockBack(magicBlast);\r\n                    }\r\n                    \r\n                }\r\n            }\r\n            \r\n            //Collision between lightning and player\r\n            this.playerHitLightning = function(lightningBolt,player){\r\n                //Players cannot hit themselves with their own attacks\r\n                if(lightningBolt.getOwner()!==player){\r\n                   \r\n                    if (player.getStun() === false && player.getDodging() === false){\r\n                        \r\n                        //Stun is started for player\r\n                        player.playStun();\r\n\r\n                        if(player.getHealthBar().decrease(4)){\r\n                            //Player dies\r\n                            player.gameOver();\r\n                            player.anims.play('explode', true);\r\n                            //Send players back to main menu\r\n                            let timedEvent = player.scene.time.delayedCall(3000, player.scene.redirect, [], this);\r\n                        }\r\n                        \r\n                        player.knockBack(lightningBolt);\r\n                      \r\n                        //Destroy the animation associated with these hitboxes\r\n                        lightningBolt.destroyAnimationSprite();\r\n\r\n                        //Find all other associated lightning bolt hitboxes and destroy them\r\n                        lightningBolt.scene.lightningBolts.getChildren().forEach(lightningBolt => {\r\n                            if (lightningBolt.getOwner() !== player) {\r\n                                lightningBolt.body.enable = false;\r\n                            }\r\n                    });\r\n                }\r\n            }\r\n            }\r\n            //Callback for sending user back to main page when game ends\r\n            this.redirect = function(){\r\n                  window.location.replace('http://localhost:3000/');\r\n            }\r\n            //Glowing Background Sprite\r\n            this.background = this.add.sprite(400,300,'Background');\r\n            this.anims.create({\r\n                key: 'glow',\r\n                frames: this.anims.generateFrameNumbers('Background', { start: 1, end: 12 }),\r\n                frameRate: 4,\r\n                repeat: -1,\r\n                yoyo: true\r\n            });\r\n            this.background.anims.play('glow');\r\n            \r\n            //Refactoring idea: make every variable passed into constructors \r\n            //descriptive javascript properties for readability\r\n\r\n            let self = this;\r\n            console.log('gameconfig is: ' + this.gameConfig);\r\n            if (this.gameConfig === 'joinOnline') {\r\n                this.player1 = new Player(this, 400, 200,'otherPlayer', this.explosionAnim);\r\n                this.player2 = new Player(self, 400, 500,'player', self.explosionAnim);\r\n                this.player1.createAnimations(this);\r\n                this.player2.createAnimations(this);\r\n                console.log('my id is: ' + this.socket.id);    \r\n                this.player2.setVisible(true);\r\n                \r\n               \r\n            }\r\n            if (this.gameConfig === 'createOnline'){\r\n                this.player1 = new Player(this, 400, 500,'player', this.explosionAnim);\r\n                this.player2 = new Player(self, 400, 200,'otherPlayer', self.explosionAnim);\r\n                this.player1.createAnimations(this);\r\n                this.player2.createAnimations(this);\r\n                this.player2.setVisible(false);\r\n                this.socket.emit('createOnlineRoom');\r\n                this.socket.emit('getRoomName');\r\n                \r\n            }\r\n            this.player2.moving = false;\r\n            this.player2.moveTimer = 0;\r\n            this.socket.on('yourRoomName', function(roomName) {\r\n                console.log('myroomName is called here');\r\n                self.roomName = roomName;\r\n            });\r\n            this.socket.on('opponentJoined', function(opponentSocketId) {\r\n                self.player2.setVisible(true);\r\n                console.log('opponentJoined, id: ' + opponentSocketId);\r\n                self.opponentSocketId = opponentSocketId;\r\n                self.socket.emit('confirmJoinRoom', opponentSocketId);\r\n            });\r\n            this.socket.on('joinedRoom', function(opponentSocketId) {\r\n                console.log('joined Room socket event happened')\r\n                self.opponentSocketId = opponentSocketId;\r\n            });\r\n            self.socket.on('playerMoved', function (player2){\r\n                    console.log('player2 moved');\r\n                    self.player2.moving = true;\r\n                    self.player2.x = player2.x;\r\n                    self.player2.y = player2.y;\r\n                    self.player2.setOrientationVector(player2.direction);\r\n                    self.player2.setMovementAnim(player2.direction);\r\n            });\r\n           \r\n            //Create Win Text\r\n            this.youWin = this.add.text(150,300-60,'PLAYER2 WINS ',{fontSize: '70px', color: '#66FF00'});\r\n            this.youWin.setVisible(false);\r\n\r\n            //Create Health Bars\r\n            this.healthBarP1 = new HealthBar({scene: this, x: 0, y:584});\r\n            this.healthBarP2 = new HealthBar({scene: this, x: 0, y:0});\r\n\r\n            //Create Cooldowns: Note, final variable passed in is a timer, it sets how long the cooldown lasts in milliseconds            \r\n            this.swordCoolDownP1 = new CoolDown(this, 230, 560, 'swordCool', 700);\r\n            this.swordCoolDownP2 = new CoolDown(this, 570, 40, 'swordCool', 700);\r\n           \r\n            this.magicCoolDownP1 = new CoolDown(this, 278, 560, 'blastCool', 1000);\r\n            this.magicCoolDownP2 = new CoolDown(this, 618, 40, 'blastCool', 1000);\r\n            \r\n            this.dodgeCoolDownP1 = new CoolDown(this, 326, 560, 'dodgeCool', 1000);\r\n            this.dodgeCoolDownP2 = new CoolDown(this, 665, 40, 'dodgeCool', 1000);\r\n\r\n            this.lightningCoolDownP1 = new CoolDown(this, 374, 560, 'lightningCool', 5000);\r\n            this.lightningCoolDownP2 = new CoolDown(this, 713, 40, 'lightningCool', 5000);\r\n\r\n            //Checks for the amount of gamepads connected to the phaser game, if the passed controls do not match the quantity of connected gamepads,\r\n            //the controls will be reset, this can be fixed later\r\n            let pad: Phaser.Input.Gamepad.Gamepad;\r\n            let gamePadCount = ((this.controlConfig.player1.Movement==='GamePad')? 1:0);\r\n           \r\n\r\n            //Create controls object which can be accessed in the update logic for game object interactions\r\n            this.controlsP1 = new Controls(this,{directionals: this.controlConfig.player1.Movement, magicBlast: this.controlConfig.player1.MagicBlast, swordSwing: this.controlConfig.player1.SwordSlash},gamePadCount,1);\r\n           \r\n            \r\n            //These phaser groups allow for collisino detection of classes of objects at scale, for example all magic blasts have the same collision callack that is called\r\n            this.magicBlasts = this.physics.add.group();\r\n            this.swordHitBoxes = this.physics.add.group();\r\n            this.lightningBolts = this.physics.add.group();\r\n\r\n            //Create a sprite group in order to handle collisions\r\n            this.players = this.physics.add.group();\r\n            this.players.add(this.player1);\r\n          \r\n\r\n            //Attach healthbars to the selected players, this is so the game knows whose healthbar is whose\r\n            this.player1.setHealthBar(this.healthBarP1);\r\n\r\n          \r\n\r\n            //phaser has a prebuilt bounce physics setup, any value greater than 1 causes an exponential growth in object velocity as it multiplies each bounce\r\n            this.player1.setBounce(1);\r\n\r\n\r\n            //Collision handling for object groups (group1, group2, callback)\r\n            this.physics.add.overlap(this.magicBlasts,this.swordHitBoxes,this.deflectBlast);\r\n            this.physics.add.overlap(this.magicBlasts,this.players,this.playerHit);\r\n            this.physics.add.overlap(this.lightningBolts,this.players,this.playerHitLightning);\r\n            \r\n            //4 walls on the outside\r\n            this.leftWall = this.physics.add.sprite(-55,300,'vwall');\r\n            //Set immovable allows the objects to not move on collision\r\n            this.leftWall.body.immovable = true;\r\n            this.rightWall = this.physics.add.sprite(855,300,'vwall');\r\n            this.rightWall.body.immovable = true;\r\n            this.topWall = this.physics.add.sprite(400,-55,'wall');\r\n            this.topWall.body.immovable = true;\r\n            this.bottomWall = this.physics.add.sprite(400,655,'wall');\r\n            this.bottomWall.body.immovable = true;\r\n            \r\n            //staticGroup is a different type of group that doesn't move I believe\r\n            this.walls = this.physics.add.staticGroup();\r\n            this.walls.add(this.leftWall);\r\n            this.walls.add(this.rightWall);\r\n            this.walls.add(this.topWall);\r\n            this.walls.add(this.bottomWall);\r\n            \r\n            //midline barrier wall\r\n            this.midWall = this.physics.add.sprite(400,300,'wall');\r\n            this.midWall.setScale(1,.08);\r\n            this.midWall.setVisible(false);\r\n            this.midWall.body.immovable = true;\r\n\r\n            this.physics.add.collider(this.midWall,this.players);\r\n            \r\n            //The order of the objects in the collider matters, magicBlasts \r\n            //will only bounce off the walls if this.magicBlasts is the first argument\r\n            this.physics.add.collider(this.magicBlasts,this.walls);\r\n            this.physics.add.collider(this.walls,this.players);\r\n             \r\n          \r\n\r\n           \r\n            \r\n            this.createMagicBlast = function(player){\r\n                    //Create magic Blast\r\n                    var magicBlast = new MagicBlast(this,player.getX(),\r\n                    player.getY(),'magicBlast',{owner: player});\r\n                    //Add to collision group\r\n                    this.magicBlasts.add(magicBlast);\r\n                    //Fire in direction of player orientation\r\n                    magicBlast.setMagicBlastVelocity(player.getOrientationVector());\r\n                    //Set magicBlast bounce\r\n                    magicBlast.setCollideWorldBounds(true);\r\n                    magicBlast.setBounce(1);\r\n                    \r\n            };\r\n            this.checkForSwingThenSwing = function(attackInput, player, coolDown){\r\n                //Check if swordSwing exists, and then check if it belongs to the player\r\n                this.swordHitBoxes.getChildren().forEach(swordSwing => {\r\n                    if (swordSwing.getOwner() === player) {\r\n                        let swordToCheck = swordSwing;\r\n                    }\r\n                });\r\n                //Check if sword swing can be activated\r\n                //if the attack button is pressed,\r\n                //and there is no sword currently active on the player,\r\n                //and the cooldown is no active, then the sword can be swung\r\n                 if ((attackInput.swordSwingFiring && typeof swordToCheck == 'undefined' && !coolDown.isActive())){\r\n                    //Set sword swing spawn point\r\n                    let swordSpawnX = player.getX();\r\n                    let swordSpawnY = player.getY();\r\n                   \r\n                    //Create new sword swing\r\n                    let newSwordSwing = new SwordSwing(this,swordSpawnX,swordSpawnY,'swordSwing',{owner: player});\r\n                    newSwordSwing.swingSword();\r\n                    coolDown.startCoolDown();\r\n                    this.swordHitBoxes.add(newSwordSwing);\r\n                   \r\n                 }\r\n            };\r\n            \r\n            \r\n           \r\n        },\r\n\r\n    update: function()\r\n        {\r\n        \r\n        //Checks if player 1 or player2 have lost, can events be used for this instead?\r\n        if (!this.player1.isAlive()){\r\n            this.youWin.setVisible(true);\r\n            this.youWin.setText('PLAYER2 WINS');\r\n        }\r\n        \r\n        //Get Player input\r\n        this.movementVectorP1 = this.controlsP1.getMovementVector();\r\n        \r\n\r\n        //Set the orientation of the player\r\n        this.player1.setOrientationVector(this.movementVectorP1);\r\n        console.log(\"roomName is: \" + this.roomName);\r\n        // emit player movement data\r\n        var x = this.player1.x;\r\n        var y = this.player1.y;\r\n        var d = this.player1.getOrientationVector();\r\n        if (this.player1.oldPosition && (x !== this.player1.oldPosition.x || y !== this.player1.oldPosition.y || d !== this.player1.oldPosition.direction)) {\r\n            console.log('opponentSocketId is: ' + this.opponentSocketId);\r\n            this.socket.emit('playerMovement', { x: x, y: y, direction: d , roomName: this.roomName});\r\n        }\r\n \r\n        // save old position data\r\n        this.player1.oldPosition = {\r\n          x: x,\r\n          y: y,\r\n          direction: d\r\n        };\r\n        //Stop animation if not moving\r\n        if (this.player2.moving === false)\r\n        {\r\n            this.player2.anims.stop();\r\n        }\r\n        else\r\n        {\r\n            //Count some update frames, compensating for server delay,\r\n            //If there is an acceptable delay from the server, then it can be assumed that the opponent\r\n            //has stopped moving since the last time\r\n            //They triggered a movmement event\r\n            this.player2.moveTimer += 1;\r\n            if (this.player2.moveTimer > 12){\r\n                this.player2.moving = false;\r\n                this.player2.moveTimer = 0;\r\n            }\r\n            \r\n        }\r\n        //Check to make sure the player is not stunned, alive, and is not dodging\r\n        if(!this.player1.getStun() && this.player1.isAlive() && !this.player1.getDodging()){\r\n            this.player1.setPlayerVelocity(this.movementVectorP1);\r\n        }\r\n\r\n\r\n\r\n        //Get attack inputs every update cycle\r\n        let attackInputsP1 = this.controlsP1.getMoveInput();\r\n       \r\n        //Check for user firing magic blast and that the cooldown is not active\r\n        if (attackInputsP1.magicBlastFiring && !this.magicCoolDownP1.isActive()){\r\n           this.magicCoolDownP1.startCoolDown();\r\n           this.createMagicBlast(this.player1);\r\n        };\r\n        \r\n        //Check for user firing Lightning Bolt\r\n        if (attackInputsP1.lightningBoltFiring && !this.lightningCoolDownP1.isActive()){\r\n           this.lightningCoolDownP1.startCoolDown();\r\n           \r\n           //create lightning Bolt animation object\r\n           let lightningBolt = new LightningBolt(this,this.player1.getX(),this.player1.getY(),'lightningBolt',{owner: this.player1});\r\n           //Creates 4 lightning bolt hitboxes which are the WIDTH of the lightning bolt, they travel \r\n           //at a speed so fast that it mimics a diagonal hitbox. This normally\r\n           //can't be created using Arcade physics and its Axis aligned bounding boxes;\r\n           let lightningBoltHB1 = new LightningHB(this,this.player1.getX(),this.player1.getY(),'magicBlast',{owner: this.player1, animationSprite: lightningBolt, Olength: 100});\r\n           let lightningBoltHB2 = new LightningHB(this,this.player1.getX(),this.player1.getY(),'magicBlast',{owner: this.player1, animationSprite: lightningBolt, Olength: 50});\r\n           let lightningBoltHB3 = new LightningHB(this,this.player1.getX(),this.player1.getY(),'magicBlast',{owner: this.player1, animationSprite: lightningBolt, Olength: 25});\r\n           let lightningBoltHB4 = new LightningHB(this,this.player1.getX(),this.player1.getY(),'magicBlast',{owner: this.player1, animationSprite: lightningBolt, Olength: 75});\r\n           //Add to collision group\r\n           this.lightningBolts.add(lightningBoltHB1);\r\n           this.lightningBolts.add(lightningBoltHB2);\r\n           this.lightningBolts.add(lightningBoltHB3);\r\n           this.lightningBolts.add(lightningBoltHB4);\r\n        };\r\n        \r\n\r\n       \r\n        //Check for user dodging and check that they aren't already in dodge mode\r\n        if (attackInputsP1.dodgeFiring && !this.player1.getDodging() && !this.dodgeCoolDownP1.isActive()){\r\n            this.dodgeCoolDownP1.startCoolDown();\r\n            this.player1.dodge();\r\n        };\r\n       \r\n\r\n        //Check if sword swings exist, and update them as needed, \r\n        //this is the best way I can think of for tracking and following player position in the main loop\r\n        //Perhaps there's a better way? Without it \r\n        //the sword is stuck in place, perhaps it can be attached to a reference to player position?\r\n        //I took a look at an update pattern for a situation like this\r\n        let swordSwings = this.swordHitBoxes.getChildren();\r\n        if (swordSwings.length>0){\r\n            swordSwings.forEach(swordSwing => {\r\n                swordSwing.update();\r\n            }\r\n            );\r\n            \r\n        }\r\n        \r\n        //Check for user swinging sword and then swing, starting the cooldown\r\n        //I think functions are supposed to do only one thing, I'll fix this later\r\n        this.checkForSwingThenSwing(attackInputsP1, this.player1, this.swordCoolDownP1);\r\n    \r\n        }\r\n    \r\n    \r\n\r\n\r\n}\r\n\r\nexport default LocalGameScene;"]},"metadata":{},"sourceType":"module"}