{"ast":null,"code":"import Phaser from 'phaser';\nexport default class LightningBolt extends Phaser.Physics.Arcade.Sprite {\n  //This object is purely an animation, it has no hitbox as Axis aligned bounding boxes (AABB)\n  //The reason is that to implement a diagonal attack, one would need to create a diagonal bounding box\n  //This is impossible with AABB, so another solution was used with\n  //a series of lightningBolt Hitbox objects \n  constructor(scene, x, y, texture, {\n    owner\n  } = {}) {\n    super(scene, x, y, texture);\n    scene.add.existing(this); //create and play lightning strike animations\n\n    this.createAnimations(scene);\n    this.anims.play('lightningStrike', true); //set angle of object to match that of the player\n\n    let vectorAngle = Phaser.Math.Angle.Between(0, 0, owner.getOrientationVector().x, owner.getOrientationVector().y); //console.log('vector angle is: ' + vectorAngle);\n    //Angle is in degrees in phaser,\n    //as well, the object needs to be rotated 90 extra degrees to actually line up with the player\n\n    this.angle = vectorAngle * 180 / Math.PI + 90;\n    this.owner = owner;\n    this.x = x + owner.getOrientationVector().x * owner.width / 2 + owner.getOrientationVector().x * this.height / 2 * Math.abs(Math.cos(vectorAngle));\n    this.y = y + owner.getOrientationVector().y * owner.height / 2 + owner.getOrientationVector().y * this.height / 2 * Math.abs(Math.sin(vectorAngle));\n    let timedEvent = this.scene.time.delayedCall(3000, this.endAnimation, [], this);\n    this.on('animationcomplete', function (anim) {\n      //console.log(\"animation completed!\");\n      this.emit('animationcomplete_' + anim.key, anim);\n    }, this);\n    this.on('animationcomplete_lightningStrike', function () {\n      this.anims.play('lightningSizzle');\n    });\n  }\n\n  onEvent() {\n    //this.explode();\n    this.destroy();\n  }\n\n  createAnimations(scene) {\n    scene.anims.create({\n      key: 'lightningStrike',\n      frames: scene.anims.generateFrameNumbers(this.texture.key, {\n        start: 1,\n        end: 17\n      }),\n      frameRate: 30\n    });\n    scene.anims.create({\n      key: 'lightningSizzle',\n      frames: scene.anims.generateFrameNumbers(this.texture.key, {\n        start: 15,\n        end: 17\n      }),\n      frameRate: 10,\n      repeat: -1\n    });\n    /*\r\n    scene.anims.create({\r\n      key: 'magicBlastExplode',\r\n      frames: scene.anims.generateFrameNumbers(this.texture.key, { start: 13,end: 29 }),\r\n      frameRate: 20,\r\n     \r\n    });\r\n    */\n  }\n\n  getOwner() {\n    return this.owner;\n  }\n  /*\r\n  setMagicBlastVelocity(velocity){\r\n    \r\n    let vectorAngle = Phaser.Math.Angle.Between(0,0,velocity.x,velocity.y);\r\n    this.body.setVelocity(velocity.x*Math.abs(Math.cos(vectorAngle))*this.magicSpeed,velocity.y*Math.abs(Math.sin(vectorAngle))*this.magicSpeed);\r\n  }\r\n  */\n\n\n  explode() {\n    if (this.body) {\n      this.body.enable = false;\n      /*this.anims.play('magicBlastExplode',\r\n      true);\r\n      */\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/src/phaser/sprites/lightningBolt.js"],"names":["Phaser","LightningBolt","Physics","Arcade","Sprite","constructor","scene","x","y","texture","owner","add","existing","createAnimations","anims","play","vectorAngle","Math","Angle","Between","getOrientationVector","angle","PI","width","height","abs","cos","sin","timedEvent","time","delayedCall","endAnimation","on","anim","emit","key","onEvent","destroy","create","frames","generateFrameNumbers","start","end","frameRate","repeat","getOwner","explode","body","enable"],"mappings":"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","sourcesContent":["import Phaser from 'phaser';\r\nexport default class LightningBolt extends Phaser.Physics.Arcade.Sprite\r\n    {\r\n        //This object is purely an animation, it has no hitbox as Axis aligned bounding boxes (AABB)\r\n        //The reason is that to implement a diagonal attack, one would need to create a diagonal bounding box\r\n        //This is impossible with AABB, so another solution was used with\r\n        //a series of lightningBolt Hitbox objects \r\n        constructor (scene,x,y,texture,{owner}={})\r\n        {\r\n            super(scene,x,y,texture);\r\n           \r\n            scene.add.existing(this);\r\n            \r\n            //create and play lightning strike animations\r\n            this.createAnimations(scene);\r\n            this.anims.play('lightningStrike',true);\r\n            \r\n            //set angle of object to match that of the player\r\n            let vectorAngle = Phaser.Math.Angle.Between(0,0,owner.getOrientationVector().x,owner.getOrientationVector().y);\r\n           \r\n            //console.log('vector angle is: ' + vectorAngle);\r\n            \r\n            //Angle is in degrees in phaser,\r\n            //as well, the object needs to be rotated 90 extra degrees to actually line up with the player\r\n            this.angle = vectorAngle*180/Math.PI+90;\r\n            this.owner = owner;\r\n            \r\n\r\n            this.x = x + (owner.getOrientationVector().x*owner.width/2) + (owner.getOrientationVector().x*this.height/2*Math.abs(Math.cos(vectorAngle)));\r\n            this.y = y + (owner.getOrientationVector().y*owner.height/2) + (owner.getOrientationVector().y*this.height/2*Math.abs(Math.sin(vectorAngle)));\r\n           \r\n            let timedEvent = this.scene.time.delayedCall(3000, this.endAnimation, [], this);\r\n            this.on('animationcomplete', function(anim) {\r\n              \r\n              //console.log(\"animation completed!\");\r\n              this.emit('animationcomplete_' + anim.key, anim);\r\n            },this);\r\n            this.on('animationcomplete_lightningStrike', function() {\r\n              this.anims.play('lightningSizzle');\r\n            });\r\n            \r\n        }\r\n        onEvent(){\r\n          //this.explode();\r\n          this.destroy();\r\n        }\r\n        createAnimations(scene){\r\n          scene.anims.create({\r\n            key: 'lightningStrike',\r\n            frames: scene.anims.generateFrameNumbers(this.texture.key, { start: 1, end: 17 }),\r\n            frameRate: 30,\r\n          });\r\n          scene.anims.create({\r\n            key: 'lightningSizzle',\r\n            frames: scene.anims.generateFrameNumbers(this.texture.key, { start: 15, end: 17 }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n          });\r\n          /*\r\n          scene.anims.create({\r\n            key: 'magicBlastExplode',\r\n            frames: scene.anims.generateFrameNumbers(this.texture.key, { start: 13,end: 29 }),\r\n            frameRate: 20,\r\n           \r\n          });\r\n          */\r\n        }\r\n        getOwner(){\r\n          return this.owner;\r\n        }\r\n        /*\r\n        setMagicBlastVelocity(velocity){\r\n          \r\n          let vectorAngle = Phaser.Math.Angle.Between(0,0,velocity.x,velocity.y);\r\n          this.body.setVelocity(velocity.x*Math.abs(Math.cos(vectorAngle))*this.magicSpeed,velocity.y*Math.abs(Math.sin(vectorAngle))*this.magicSpeed);\r\n        }\r\n        */\r\n        explode(){\r\n          if (this.body){\r\n            this.body.enable = false;\r\n            /*this.anims.play('magicBlastExplode',\r\n            true);\r\n            */\r\n          }\r\n         \r\n        }\r\n       \r\n    }"]},"metadata":{},"sourceType":"module"}