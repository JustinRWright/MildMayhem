{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Human\\\\Documents\\\\MildMayhemFull\\\\mildmayhem\\\\client\\\\src\\\\pages\\\\MenuPage.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport MatchRoomBox from '../components/MatchRoomBox.js';\nimport InfoMenuBox from '../components/InfoMenuBox.js';\nimport LocalGameImage from '../images/GameShot5.png';\nimport OnlineGameImage from '../images/OnlineGame.png';\nimport { Link } from 'react-router-dom';\nimport { subscribeToShowRooms, getRooms, joinRoom } from '../api';\n\nclass MenuPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setRoomState = newRooms => {\n      this.setState({\n        rooms: newRooms\n      });\n    };\n\n    this.controlConfigSelected = controlConfig => {\n      if (controlConfig === \"keyboard1\") {\n        this.setState({\n          controls: {\n            player1: {\n              Movement: 'WASD',\n              SwordSlash: 'SPACE',\n              MagicBlast: 'P'\n            },\n            player2: this.state.controls.player2\n          }\n        });\n      } else if (controlConfig === \"keyboard2\") {\n        this.setState({\n          controls: {\n            player1: this.state.controls.player1,\n            player2: {\n              Movement: 'ArrowKeys',\n              SwordSlash: 'NumPad0',\n              MagicBlast: 'NumPad9'\n            }\n          }\n        });\n      } else if (controlConfig === \"gamepad1\") {\n        this.setState({\n          controls: {\n            player1: {\n              Movement: 'GamePad',\n              SwordSlash: '',\n              MagicBlast: ''\n            },\n            player2: this.state.controls.player2\n          }\n        });\n      } else if (controlConfig === \"gamepad2\") {\n        this.setState({\n          controls: {\n            player1: this.state.controls.player1,\n            player2: {\n              Movement: 'GamePad',\n              SwordSlash: '',\n              MagicBlast: ''\n            }\n          }\n        });\n      }\n    };\n\n    this.matchRoomClicked = (gameType, roomName, playerId) => {\n      if (gameType === 'joinOnline') {\n        joinRoom(playerId);\n      }\n\n      this.props.passGameConfig(gameType, roomName);\n      this.props.passControlConfig(this.state.controls);\n    };\n\n    getRooms((err, room) => {\n      console.log('room is: ' + JSON.stringify(room));\n      let newRooms = room;\n      this.setRoomState(newRooms);\n    });\n    this.state = {\n      rooms: {},\n      controls: {\n        player1: {\n          Movement: 'WASD',\n          SwordSlash: 'SPACE',\n          MagicBlast: 'P'\n        },\n        player2: {\n          Movement: 'ArrowKeys',\n          SwordSlash: 'NumPad0',\n          MagicBlast: 'NumPad9'\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    //Remove event listeners in case user pressed back from online game\n    //Whenever the rooms on the server are updated, the room state is set again\n    subscribeToShowRooms((err, room) => {\n      let newRooms = room;\n      this.setRoomState(newRooms);\n    });\n  }\n\n  render() {\n    let roomCount = this.state.rooms; //console.log('roomCount is: ' + JSON.stringify(roomCount));\n\n    let joinMatchBox; //I set the resolution to 800*600, which is the size of an old school NewGrounds web game. It is currently not responsive\n    //This could be changed for a mobile depoloyment or something\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: '#031316',\n        borderRadius: 15,\n        maxWidth: 800,\n        minWidth: 800,\n        minHeight: 600,\n        maxHeight: 600,\n        margin: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: 'center',\n              borderRadius: 15,\n              backgroundColor: 'black',\n              fontSize: 30,\n              fontFamily: 'Audiowide',\n              padding: 20,\n              border: '4px solid #1f39bd'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                color: '#39FF14'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"u\", {\n                children: \"Mild Mayhem\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: /*#__PURE__*/_jsxDEV(InfoMenuBox, {\n            setControlConfig: this.controlConfigSelected\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              paddingTop: 40,\n              paddingBottom: 30\n            },\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/game\",\n              style: {\n                color: 'black'\n              },\n              children: /*#__PURE__*/_jsxDEV(MatchRoomBox, {\n                onClick: () => this.matchRoomClicked('createOnline'),\n                image: OnlineGameImage,\n                matchType: 'Start Online Room'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              paddingTop: 40,\n              paddingBottom: 30\n            },\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/game\",\n              style: {\n                color: 'black'\n              },\n              children: /*#__PURE__*/_jsxDEV(MatchRoomBox, {\n                onClick: () => this.matchRoomClicked('offline'),\n                image: LocalGameImage,\n                matchType: 'Start Local Room'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 10,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: 'center',\n              paddingTop: 15,\n              font: 25,\n              color: '#39FF14'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Available Online Matches\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              borderRadius: 15,\n              backgroundColor: '#9A9A9A',\n              align: 'left',\n              textAlign: 'left',\n              minHeight: 200,\n              maxHeight: 200,\n              border: '1px solid'\n            },\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              children: Object.keys(roomCount).map((room, index) => /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 4,\n                children: /*#__PURE__*/_jsxDEV(Link, {\n                  to: \"/game\",\n                  style: {\n                    color: 'black'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(MatchRoomBox, {\n                    onClick: () => this.matchRoomClicked('joinOnline', roomCount[room].name, roomCount[room].id),\n                    image: LocalGameImage,\n                    matchType: roomCount[room].name\n                  }, roomCount[room].id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 170,\n                    columnNumber: 33\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default MenuPage;","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/src/pages/MenuPage.js"],"names":["React","ReactDOM","Grid","Button","MatchRoomBox","InfoMenuBox","LocalGameImage","OnlineGameImage","Link","subscribeToShowRooms","getRooms","joinRoom","MenuPage","Component","constructor","props","setRoomState","newRooms","setState","rooms","controlConfigSelected","controlConfig","controls","player1","Movement","SwordSlash","MagicBlast","player2","state","matchRoomClicked","gameType","roomName","playerId","passGameConfig","passControlConfig","err","room","console","log","JSON","stringify","componentDidMount","render","roomCount","joinMatchBox","backgroundColor","borderRadius","maxWidth","minWidth","minHeight","maxHeight","margin","textAlign","fontSize","fontFamily","padding","border","color","paddingTop","paddingBottom","font","align","Object","keys","map","index","name","id"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport MatchRoomBox from '../components/MatchRoomBox.js';\r\nimport InfoMenuBox from '../components/InfoMenuBox.js';\r\nimport LocalGameImage from '../images/GameShot5.png';\r\nimport OnlineGameImage from '../images/OnlineGame.png';\r\nimport { Link } from 'react-router-dom';\r\nimport {subscribeToShowRooms, getRooms, joinRoom} from '../api';\r\nclass MenuPage extends React.Component {\r\n  constructor(props) {\r\n            super(props);\r\n            getRooms((err, room) => {\r\n                console.log('room is: ' + JSON.stringify(room));\r\n                let newRooms = room;\r\n                this.setRoomState(newRooms);\r\n            });\r\n            \r\n            this.state = {\r\n                rooms: {},\r\n                controls: {\r\n                player1: {\r\n                    Movement: 'WASD',\r\n                    SwordSlash: 'SPACE',\r\n                    MagicBlast: 'P'\r\n                },\r\n                player2: {\r\n                    Movement: 'ArrowKeys',\r\n                    SwordSlash: 'NumPad0',\r\n                    MagicBlast: 'NumPad9'\r\n                }\r\n            }};\r\n        };\r\ncomponentDidMount(){\r\n    //Remove event listeners in case user pressed back from online game\r\n    \r\n    \r\n    //Whenever the rooms on the server are updated, the room state is set again\r\n    subscribeToShowRooms((err, room) => {\r\n        let newRooms = room;\r\n        this.setRoomState(newRooms);\r\n    });\r\n    \r\n   \r\n}\r\n\r\nsetRoomState = (newRooms) => {\r\n    this.setState({rooms: newRooms});\r\n}\r\n/*Function passed into the infoMenuBox, Sets the control config object which then gets passed up to App.js and then down into the GamePage component and the phaser game \r\nPerhaps custom controls here can detect keycodes and translate directly into a keycode value that gets passed into phaser\r\nFor example, an option to click on swordslash and press a key to get the key code(ex: SPACE), then send that to the phaser game where it will\r\nbe set as the attack.*/\r\n  controlConfigSelected = (controlConfig) => {\r\n      if (controlConfig === \"keyboard1\"){\r\n          this.setState({controls: {\r\n              player1: {\r\n                Movement: 'WASD',\r\n                SwordSlash: 'SPACE',\r\n                MagicBlast: 'P'\r\n              },\r\n              player2: this.state.controls.player2\r\n\r\n          }});\r\n      }\r\n      else if (controlConfig === \"keyboard2\"){\r\n          this.setState({controls: {\r\n              player1: this.state.controls.player1,\r\n              player2: {\r\n                Movement: 'ArrowKeys',\r\n                SwordSlash: 'NumPad0',\r\n                MagicBlast: 'NumPad9'\r\n              },\r\n\r\n          }});\r\n      }\r\n      else if (controlConfig === \"gamepad1\"){\r\n          this.setState({controls: {\r\n              player1: {\r\n                Movement: 'GamePad',\r\n                SwordSlash: '',\r\n                MagicBlast: ''\r\n              },\r\n              player2: this.state.controls.player2\r\n\r\n          }});\r\n      }\r\n      else if (controlConfig === \"gamepad2\"){\r\n          this.setState({controls: {\r\n              player1: this.state.controls.player1,\r\n              player2: {\r\n                Movement: 'GamePad',\r\n                SwordSlash: '',\r\n                MagicBlast: ''\r\n              },\r\n\r\n          }});\r\n      }\r\n  };\r\n  //When a match room is clicked, the control config is passed to the game for the game start\r\n  matchRoomClicked = (gameType,roomName,playerId) => {\r\n      if(gameType === 'joinOnline'){\r\n        joinRoom(playerId);\r\n      }\r\n      \r\n      this.props.passGameConfig(gameType,roomName);\r\n      this.props.passControlConfig(this.state.controls);\r\n  };\r\n  render() {\r\n    let roomCount = this.state.rooms;\r\n    //console.log('roomCount is: ' + JSON.stringify(roomCount));\r\n    let joinMatchBox;\r\n    \r\n    //I set the resolution to 800*600, which is the size of an old school NewGrounds web game. It is currently not responsive\r\n    //This could be changed for a mobile depoloyment or something\r\n    return <div style={{backgroundColor: '#031316', borderRadius: 15, maxWidth: 800, minWidth:800, minHeight:600, maxHeight:600, margin: 'auto'}}>\r\n    <Grid container>\r\n        {/*Title Bar*/}\r\n        <Grid item xs={12}>\r\n            <div style={{textAlign: 'center', borderRadius: 15, backgroundColor: 'black', fontSize: 30, fontFamily: 'Audiowide', padding: 20, border: '4px solid #1f39bd'}}>\r\n                <div style={{color: '#39FF14'}}>\r\n                    <u>\r\n                        Mild Mayhem\r\n                    </u>\r\n                </div>\r\n            \r\n            </div>\r\n        </Grid>\r\n        {/*Interactive information box*/}\r\n        <Grid item xs={4}>\r\n            <InfoMenuBox setControlConfig={this.controlConfigSelected}></InfoMenuBox>\r\n        </Grid>\r\n\r\n        {/*Online match box*/}\r\n        <Grid item xs = {4}>\r\n            <div style={{paddingTop: 40, paddingBottom: 30}}>\r\n                <Link to='/game' style={{color: 'black'}}>\r\n                    <MatchRoomBox onClick={() => this.matchRoomClicked('createOnline')} image={OnlineGameImage} matchType={'Start Online Room'}></MatchRoomBox>\r\n                </Link>\r\n            </div>\r\n        </Grid>\r\n\r\n        {/*Offline match box*/}\r\n        <Grid item xs = {4}>\r\n            <div style={{paddingTop: 40, paddingBottom: 30}}> \r\n                {/*route to game*/}\r\n                <Link to='/game' style={{color: 'black'}}>\r\n                    <MatchRoomBox onClick={() => this.matchRoomClicked('offline')} image={LocalGameImage} matchType={'Start Local Room'}></MatchRoomBox>\r\n                </Link>\r\n            </div>\r\n        </Grid>\r\n\r\n        {/*List of available online rooms*/}\r\n        <Grid item xs = {1}>\r\n        </Grid>\r\n\r\n        <Grid item xs = {10}>\r\n        \r\n                <div style={{ textAlign: 'center', paddingTop: 15, font: 25, color: '#39FF14'}}>\r\n                <b>Available Online Matches</b>\r\n                </div>\r\n                <div style={{ borderRadius: 15, backgroundColor: '#9A9A9A', align: 'left', textAlign: 'left', minHeight:200, maxHeight:200, border: '1px solid'}}>\r\n                <Grid container>\r\n                {\r\n                    \r\n                    Object.keys(roomCount).map((room, index) => (\r\n                        <Grid item xs = {4}>\r\n                            <Link to='/game' style={{color: 'black'}}>\r\n                                <MatchRoomBox key={roomCount[room].id} onClick={() => this.matchRoomClicked('joinOnline', roomCount[room].name, roomCount[room].id)} image={LocalGameImage} matchType={roomCount[room].name}></MatchRoomBox>\r\n                            </Link>\r\n                        </Grid>\r\n                    ))\r\n\r\n                      \r\n                }\r\n                </Grid>\r\n                \r\n                </div>\r\n        </Grid>\r\n\r\n        <Grid item xs = {1}>\r\n        </Grid>\r\n    </Grid>\r\n   \r\n  </div>\r\n}\r\n}\r\n\r\nexport default MenuPage;"]},"metadata":{},"sourceType":"module"}