{"ast":null,"code":"var _classCallCheck = require(\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Transport = require(\"../transport\");\n\nvar parser = require(\"engine.io-parser\");\n\nvar zlib = require(\"zlib\");\n\nvar accepts = require(\"accepts\");\n\nvar debug = require(\"debug\")(\"engine:polling\");\n\nvar compressionMethods = {\n  gzip: zlib.createGzip,\n  deflate: zlib.createDeflate\n};\n\nvar Polling = /*#__PURE__*/function (_Transport) {\n  \"use strict\";\n\n  _inherits(Polling, _Transport);\n\n  var _super = _createSuper(Polling);\n\n  /**\n   * HTTP polling constructor.\n   *\n   * @api public.\n   */\n  function Polling(req) {\n    var _this;\n\n    _classCallCheck(this, Polling);\n\n    _this = _super.call(this, req);\n    _this.closeTimeout = 30 * 1000;\n    _this.maxHttpBufferSize = null;\n    _this.httpCompression = null;\n    return _this;\n  }\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n\n  _createClass(Polling, [{\n    key: \"onRequest\",\n\n    /**\n     * Overrides onRequest.\n     *\n     * @param {http.IncomingMessage}\n     * @api private\n     */\n    value: function onRequest(req) {\n      var res = req.res;\n\n      if (\"GET\" === req.method) {\n        this.onPollRequest(req, res);\n      } else if (\"POST\" === req.method) {\n        this.onDataRequest(req, res);\n      } else {\n        res.writeHead(500);\n        res.end();\n      }\n    }\n    /**\n     * The client sends a request awaiting for us to send data.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onPollRequest\",\n    value: function onPollRequest(req, res) {\n      if (this.req) {\n        debug(\"request overlap\"); // assert: this.res, '.req and .res should be (un)set together'\n\n        this.onError(\"overlap from client\");\n        res.writeHead(500);\n        res.end();\n        return;\n      }\n\n      debug(\"setting request\");\n      this.req = req;\n      this.res = res;\n      var self = this;\n\n      function onClose() {\n        self.onError(\"poll connection closed prematurely\");\n      }\n\n      function cleanup() {\n        req.removeListener(\"close\", onClose);\n        self.req = self.res = null;\n      }\n\n      req.cleanup = cleanup;\n      req.on(\"close\", onClose);\n      this.writable = true;\n      this.emit(\"drain\"); // if we're still writable but had a pending close, trigger an empty send\n\n      if (this.writable && this.shouldClose) {\n        debug(\"triggering empty send to append close packet\");\n        this.send([{\n          type: \"noop\"\n        }]);\n      }\n    }\n    /**\n     * The client sends a request with data.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onDataRequest\",\n    value: function onDataRequest(req, res) {\n      if (this.dataReq) {\n        // assert: this.dataRes, '.dataReq and .dataRes should be (un)set together'\n        this.onError(\"data request overlap from client\");\n        res.writeHead(500);\n        res.end();\n        return;\n      }\n\n      this.dataReq = req;\n      this.dataRes = res;\n      var chunks = \"\";\n      var self = this;\n\n      function cleanup() {\n        req.removeListener(\"data\", onData);\n        req.removeListener(\"end\", onEnd);\n        req.removeListener(\"close\", onClose);\n        self.dataReq = self.dataRes = chunks = null;\n      }\n\n      function onClose() {\n        cleanup();\n        self.onError(\"data request connection closed prematurely\");\n      }\n\n      function onData(data) {\n        var contentLength;\n        chunks += data;\n        contentLength = Buffer.byteLength(chunks);\n\n        if (contentLength > self.maxHttpBufferSize) {\n          chunks = \"\";\n          req.connection.destroy();\n        }\n      }\n\n      function onEnd() {\n        self.onData(chunks);\n        var headers = {\n          // text/html is required instead of text/plain to avoid an\n          // unwanted download dialog on certain user-agents (GH-43)\n          \"Content-Type\": \"text/html\",\n          \"Content-Length\": 2\n        };\n        res.writeHead(200, self.headers(req, headers));\n        res.end(\"ok\");\n        cleanup();\n      }\n\n      req.on(\"close\", onClose);\n      req.setEncoding(\"utf8\");\n      req.on(\"data\", onData);\n      req.on(\"end\", onEnd);\n    }\n    /**\n     * Processes the incoming data payload.\n     *\n     * @param {String} encoded payload\n     * @api private\n     */\n\n  }, {\n    key: \"onData\",\n    value: function onData(data) {\n      debug('received \"%s\"', data);\n      var self = this;\n\n      var callback = function callback(packet) {\n        if (\"close\" === packet.type) {\n          debug(\"got xhr close packet\");\n          self.onClose();\n          return false;\n        }\n\n        self.onPacket(packet);\n      };\n\n      parser.decodePayload(data).forEach(callback);\n    }\n    /**\n     * Overrides onClose.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose() {\n      if (this.writable) {\n        // close pending poll request\n        this.send([{\n          type: \"noop\"\n        }]);\n      }\n\n      _get(_getPrototypeOf(Polling.prototype), \"onClose\", this).call(this);\n    }\n    /**\n     * Writes a packet payload.\n     *\n     * @param {Object} packet\n     * @api private\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(packets) {\n      this.writable = false;\n\n      if (this.shouldClose) {\n        debug(\"appending close packet to payload\");\n        packets.push({\n          type: \"close\"\n        });\n        this.shouldClose();\n        this.shouldClose = null;\n      }\n\n      var self = this;\n      parser.encodePayload(packets, function (data) {\n        var compress = packets.some(function (packet) {\n          return packet.options && packet.options.compress;\n        });\n        self.write(data, {\n          compress: compress\n        });\n      });\n    }\n    /**\n     * Writes data as response to poll request.\n     *\n     * @param {String} data\n     * @param {Object} options\n     * @api private\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(data, options) {\n      debug('writing \"%s\"', data);\n      var self = this;\n      this.doWrite(data, options, function () {\n        self.req.cleanup();\n      });\n    }\n    /**\n     * Performs the write.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"doWrite\",\n    value: function doWrite(data, options, callback) {\n      var self = this; // explicit UTF-8 is required for pages not served under utf\n\n      var isString = typeof data === \"string\";\n      var contentType = isString ? \"text/plain; charset=UTF-8\" : \"application/octet-stream\";\n      var headers = {\n        \"Content-Type\": contentType\n      };\n\n      if (!this.httpCompression || !options.compress) {\n        respond(data);\n        return;\n      }\n\n      var len = isString ? Buffer.byteLength(data) : data.length;\n\n      if (len < this.httpCompression.threshold) {\n        respond(data);\n        return;\n      }\n\n      var encoding = accepts(this.req).encodings([\"gzip\", \"deflate\"]);\n\n      if (!encoding) {\n        respond(data);\n        return;\n      }\n\n      this.compress(data, encoding, function (err, data) {\n        if (err) {\n          self.res.writeHead(500);\n          self.res.end();\n          callback(err);\n          return;\n        }\n\n        headers[\"Content-Encoding\"] = encoding;\n        respond(data);\n      });\n\n      function respond(data) {\n        headers[\"Content-Length\"] = \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n        self.res.writeHead(200, self.headers(self.req, headers));\n        self.res.end(data);\n        callback();\n      }\n    }\n    /**\n     * Compresses data.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"compress\",\n    value: function compress(data, encoding, callback) {\n      debug(\"compressing\");\n      var buffers = [];\n      var nread = 0;\n      compressionMethods[encoding](this.httpCompression).on(\"error\", callback).on(\"data\", function (chunk) {\n        buffers.push(chunk);\n        nread += chunk.length;\n      }).on(\"end\", function () {\n        callback(null, Buffer.concat(buffers, nread));\n      }).end(data);\n    }\n    /**\n     * Closes the transport.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"doClose\",\n    value: function doClose(fn) {\n      debug(\"closing\");\n      var self = this;\n      var closeTimeoutTimer;\n\n      if (this.dataReq) {\n        debug(\"aborting ongoing data request\");\n        this.dataReq.destroy();\n      }\n\n      if (this.writable) {\n        debug(\"transport writable - closing right away\");\n        this.send([{\n          type: \"close\"\n        }]);\n        onClose();\n      } else if (this.discarded) {\n        debug(\"transport discarded - closing right away\");\n        onClose();\n      } else {\n        debug(\"transport not writable - buffering orderly close\");\n        this.shouldClose = onClose;\n        closeTimeoutTimer = setTimeout(onClose, this.closeTimeout);\n      }\n\n      function onClose() {\n        clearTimeout(closeTimeoutTimer);\n        fn();\n        self.onClose();\n      }\n    }\n    /**\n     * Returns headers for a response.\n     *\n     * @param {http.IncomingMessage} request\n     * @param {Object} extra headers\n     * @api private\n     */\n\n  }, {\n    key: \"headers\",\n    value: function headers(req, _headers) {\n      _headers = _headers || {}; // prevent XSS warnings on IE\n      // https://github.com/LearnBoost/socket.io/pull/1333\n\n      var ua = req.headers[\"user-agent\"];\n\n      if (ua && (~ua.indexOf(\";MSIE\") || ~ua.indexOf(\"Trident/\"))) {\n        _headers[\"X-XSS-Protection\"] = \"0\";\n      }\n\n      this.emit(\"headers\", _headers);\n      return _headers;\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return \"polling\";\n    }\n  }]);\n\n  return Polling;\n}(Transport);\n\nmodule.exports = Polling;","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/engine.io/lib/transports/polling.js"],"names":["Transport","require","parser","zlib","accepts","debug","compressionMethods","gzip","createGzip","deflate","createDeflate","Polling","req","closeTimeout","maxHttpBufferSize","httpCompression","res","method","onPollRequest","onDataRequest","writeHead","end","onError","self","onClose","cleanup","removeListener","on","writable","emit","shouldClose","send","type","dataReq","dataRes","chunks","onData","onEnd","data","contentLength","Buffer","byteLength","connection","destroy","headers","setEncoding","callback","packet","onPacket","decodePayload","forEach","packets","push","encodePayload","compress","some","options","write","doWrite","isString","contentType","respond","len","length","threshold","encoding","encodings","err","buffers","nread","chunk","concat","fn","closeTimeoutTimer","discarded","setTimeout","clearTimeout","ua","indexOf","module","exports"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAzB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,kBAAD,CAAtB;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMG,OAAO,GAAGH,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMI,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAAP,CAAiB,gBAAjB,CAAd;;AAEA,IAAMK,kBAAkB,GAAG;AACzBC,EAAAA,IAAI,EAAEJ,IAAI,CAACK,UADc;AAEzBC,EAAAA,OAAO,EAAEN,IAAI,CAACO;AAFW,CAA3B;;IAKMC,O;;;;;;;AACJ;AACF;AACA;AACA;AACA;AACE,mBAAYC,GAAZ,EAAiB;AAAA;;AAAA;;AACf,8BAAMA,GAAN;AAEA,UAAKC,YAAL,GAAoB,KAAK,IAAzB;AACA,UAAKC,iBAAL,GAAyB,IAAzB;AACA,UAAKC,eAAL,GAAuB,IAAvB;AALe;AAMhB;AAED;AACF;AACA;AACA;AACA;;;;;;AAKE;AACF;AACA;AACA;AACA;AACA;8BACYH,G,EAAK;AACb,UAAMI,GAAG,GAAGJ,GAAG,CAACI,GAAhB;;AAEA,UAAI,UAAUJ,GAAG,CAACK,MAAlB,EAA0B;AACxB,aAAKC,aAAL,CAAmBN,GAAnB,EAAwBI,GAAxB;AACD,OAFD,MAEO,IAAI,WAAWJ,GAAG,CAACK,MAAnB,EAA2B;AAChC,aAAKE,aAAL,CAAmBP,GAAnB,EAAwBI,GAAxB;AACD,OAFM,MAEA;AACLA,QAAAA,GAAG,CAACI,SAAJ,CAAc,GAAd;AACAJ,QAAAA,GAAG,CAACK,GAAJ;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;;kCACgBT,G,EAAKI,G,EAAK;AACtB,UAAI,KAAKJ,GAAT,EAAc;AACZP,QAAAA,KAAK,CAAC,iBAAD,CAAL,CADY,CAEZ;;AACA,aAAKiB,OAAL,CAAa,qBAAb;AACAN,QAAAA,GAAG,CAACI,SAAJ,CAAc,GAAd;AACAJ,QAAAA,GAAG,CAACK,GAAJ;AACA;AACD;;AAEDhB,MAAAA,KAAK,CAAC,iBAAD,CAAL;AAEA,WAAKO,GAAL,GAAWA,GAAX;AACA,WAAKI,GAAL,GAAWA,GAAX;AAEA,UAAMO,IAAI,GAAG,IAAb;;AAEA,eAASC,OAAT,GAAmB;AACjBD,QAAAA,IAAI,CAACD,OAAL,CAAa,oCAAb;AACD;;AAED,eAASG,OAAT,GAAmB;AACjBb,QAAAA,GAAG,CAACc,cAAJ,CAAmB,OAAnB,EAA4BF,OAA5B;AACAD,QAAAA,IAAI,CAACX,GAAL,GAAWW,IAAI,CAACP,GAAL,GAAW,IAAtB;AACD;;AAEDJ,MAAAA,GAAG,CAACa,OAAJ,GAAcA,OAAd;AACAb,MAAAA,GAAG,CAACe,EAAJ,CAAO,OAAP,EAAgBH,OAAhB;AAEA,WAAKI,QAAL,GAAgB,IAAhB;AACA,WAAKC,IAAL,CAAU,OAAV,EA9BsB,CAgCtB;;AACA,UAAI,KAAKD,QAAL,IAAiB,KAAKE,WAA1B,EAAuC;AACrCzB,QAAAA,KAAK,CAAC,8CAAD,CAAL;AACA,aAAK0B,IAAL,CAAU,CAAC;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAV;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;;kCACgBpB,G,EAAKI,G,EAAK;AACtB,UAAI,KAAKiB,OAAT,EAAkB;AAChB;AACA,aAAKX,OAAL,CAAa,kCAAb;AACAN,QAAAA,GAAG,CAACI,SAAJ,CAAc,GAAd;AACAJ,QAAAA,GAAG,CAACK,GAAJ;AACA;AACD;;AAED,WAAKY,OAAL,GAAerB,GAAf;AACA,WAAKsB,OAAL,GAAelB,GAAf;AAEA,UAAImB,MAAM,GAAG,EAAb;AACA,UAAMZ,IAAI,GAAG,IAAb;;AAEA,eAASE,OAAT,GAAmB;AACjBb,QAAAA,GAAG,CAACc,cAAJ,CAAmB,MAAnB,EAA2BU,MAA3B;AACAxB,QAAAA,GAAG,CAACc,cAAJ,CAAmB,KAAnB,EAA0BW,KAA1B;AACAzB,QAAAA,GAAG,CAACc,cAAJ,CAAmB,OAAnB,EAA4BF,OAA5B;AACAD,QAAAA,IAAI,CAACU,OAAL,GAAeV,IAAI,CAACW,OAAL,GAAeC,MAAM,GAAG,IAAvC;AACD;;AAED,eAASX,OAAT,GAAmB;AACjBC,QAAAA,OAAO;AACPF,QAAAA,IAAI,CAACD,OAAL,CAAa,4CAAb;AACD;;AAED,eAASc,MAAT,CAAgBE,IAAhB,EAAsB;AACpB,YAAIC,aAAJ;AACAJ,QAAAA,MAAM,IAAIG,IAAV;AACAC,QAAAA,aAAa,GAAGC,MAAM,CAACC,UAAP,CAAkBN,MAAlB,CAAhB;;AAEA,YAAII,aAAa,GAAGhB,IAAI,CAACT,iBAAzB,EAA4C;AAC1CqB,UAAAA,MAAM,GAAG,EAAT;AACAvB,UAAAA,GAAG,CAAC8B,UAAJ,CAAeC,OAAf;AACD;AACF;;AAED,eAASN,KAAT,GAAiB;AACfd,QAAAA,IAAI,CAACa,MAAL,CAAYD,MAAZ;AAEA,YAAMS,OAAO,GAAG;AACd;AACA;AACA,0BAAgB,WAHF;AAId,4BAAkB;AAJJ,SAAhB;AAOA5B,QAAAA,GAAG,CAACI,SAAJ,CAAc,GAAd,EAAmBG,IAAI,CAACqB,OAAL,CAAahC,GAAb,EAAkBgC,OAAlB,CAAnB;AACA5B,QAAAA,GAAG,CAACK,GAAJ,CAAQ,IAAR;AACAI,QAAAA,OAAO;AACR;;AAEDb,MAAAA,GAAG,CAACe,EAAJ,CAAO,OAAP,EAAgBH,OAAhB;AACAZ,MAAAA,GAAG,CAACiC,WAAJ,CAAgB,MAAhB;AACAjC,MAAAA,GAAG,CAACe,EAAJ,CAAO,MAAP,EAAeS,MAAf;AACAxB,MAAAA,GAAG,CAACe,EAAJ,CAAO,KAAP,EAAcU,KAAd;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;2BACSC,I,EAAM;AACXjC,MAAAA,KAAK,CAAC,eAAD,EAAkBiC,IAAlB,CAAL;AACA,UAAMf,IAAI,GAAG,IAAb;;AACA,UAAMuB,QAAQ,GAAG,SAAXA,QAAW,CAASC,MAAT,EAAiB;AAChC,YAAI,YAAYA,MAAM,CAACf,IAAvB,EAA6B;AAC3B3B,UAAAA,KAAK,CAAC,sBAAD,CAAL;AACAkB,UAAAA,IAAI,CAACC,OAAL;AACA,iBAAO,KAAP;AACD;;AAEDD,QAAAA,IAAI,CAACyB,QAAL,CAAcD,MAAd;AACD,OARD;;AAUA7C,MAAAA,MAAM,CAAC+C,aAAP,CAAqBX,IAArB,EAA2BY,OAA3B,CAAmCJ,QAAnC;AACD;AAED;AACF;AACA;AACA;AACA;;;;8BACY;AACR,UAAI,KAAKlB,QAAT,EAAmB;AACjB;AACA,aAAKG,IAAL,CAAU,CAAC;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAV;AACD;;AACD;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;yBACOmB,O,EAAS;AACZ,WAAKvB,QAAL,GAAgB,KAAhB;;AAEA,UAAI,KAAKE,WAAT,EAAsB;AACpBzB,QAAAA,KAAK,CAAC,mCAAD,CAAL;AACA8C,QAAAA,OAAO,CAACC,IAAR,CAAa;AAAEpB,UAAAA,IAAI,EAAE;AAAR,SAAb;AACA,aAAKF,WAAL;AACA,aAAKA,WAAL,GAAmB,IAAnB;AACD;;AAED,UAAMP,IAAI,GAAG,IAAb;AACArB,MAAAA,MAAM,CAACmD,aAAP,CAAqBF,OAArB,EAA8B,UAAAb,IAAI,EAAI;AACpC,YAAMgB,QAAQ,GAAGH,OAAO,CAACI,IAAR,CAAa,UAASR,MAAT,EAAiB;AAC7C,iBAAOA,MAAM,CAACS,OAAP,IAAkBT,MAAM,CAACS,OAAP,CAAeF,QAAxC;AACD,SAFgB,CAAjB;AAGA/B,QAAAA,IAAI,CAACkC,KAAL,CAAWnB,IAAX,EAAiB;AAAEgB,UAAAA,QAAQ,EAAEA;AAAZ,SAAjB;AACD,OALD;AAMD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;0BACQhB,I,EAAMkB,O,EAAS;AACnBnD,MAAAA,KAAK,CAAC,cAAD,EAAiBiC,IAAjB,CAAL;AACA,UAAMf,IAAI,GAAG,IAAb;AACA,WAAKmC,OAAL,CAAapB,IAAb,EAAmBkB,OAAnB,EAA4B,YAAW;AACrCjC,QAAAA,IAAI,CAACX,GAAL,CAASa,OAAT;AACD,OAFD;AAGD;AAED;AACF;AACA;AACA;AACA;;;;4BACUa,I,EAAMkB,O,EAASV,Q,EAAU;AAC/B,UAAMvB,IAAI,GAAG,IAAb,CAD+B,CAG/B;;AACA,UAAMoC,QAAQ,GAAG,OAAOrB,IAAP,KAAgB,QAAjC;AACA,UAAMsB,WAAW,GAAGD,QAAQ,GACxB,2BADwB,GAExB,0BAFJ;AAIA,UAAMf,OAAO,GAAG;AACd,wBAAgBgB;AADF,OAAhB;;AAIA,UAAI,CAAC,KAAK7C,eAAN,IAAyB,CAACyC,OAAO,CAACF,QAAtC,EAAgD;AAC9CO,QAAAA,OAAO,CAACvB,IAAD,CAAP;AACA;AACD;;AAED,UAAMwB,GAAG,GAAGH,QAAQ,GAAGnB,MAAM,CAACC,UAAP,CAAkBH,IAAlB,CAAH,GAA6BA,IAAI,CAACyB,MAAtD;;AACA,UAAID,GAAG,GAAG,KAAK/C,eAAL,CAAqBiD,SAA/B,EAA0C;AACxCH,QAAAA,OAAO,CAACvB,IAAD,CAAP;AACA;AACD;;AAED,UAAM2B,QAAQ,GAAG7D,OAAO,CAAC,KAAKQ,GAAN,CAAP,CAAkBsD,SAAlB,CAA4B,CAAC,MAAD,EAAS,SAAT,CAA5B,CAAjB;;AACA,UAAI,CAACD,QAAL,EAAe;AACbJ,QAAAA,OAAO,CAACvB,IAAD,CAAP;AACA;AACD;;AAED,WAAKgB,QAAL,CAAchB,IAAd,EAAoB2B,QAApB,EAA8B,UAASE,GAAT,EAAc7B,IAAd,EAAoB;AAChD,YAAI6B,GAAJ,EAAS;AACP5C,UAAAA,IAAI,CAACP,GAAL,CAASI,SAAT,CAAmB,GAAnB;AACAG,UAAAA,IAAI,CAACP,GAAL,CAASK,GAAT;AACAyB,UAAAA,QAAQ,CAACqB,GAAD,CAAR;AACA;AACD;;AAEDvB,QAAAA,OAAO,CAAC,kBAAD,CAAP,GAA8BqB,QAA9B;AACAJ,QAAAA,OAAO,CAACvB,IAAD,CAAP;AACD,OAVD;;AAYA,eAASuB,OAAT,CAAiBvB,IAAjB,EAAuB;AACrBM,QAAAA,OAAO,CAAC,gBAAD,CAAP,GACE,aAAa,OAAON,IAApB,GAA2BE,MAAM,CAACC,UAAP,CAAkBH,IAAlB,CAA3B,GAAqDA,IAAI,CAACyB,MAD5D;AAEAxC,QAAAA,IAAI,CAACP,GAAL,CAASI,SAAT,CAAmB,GAAnB,EAAwBG,IAAI,CAACqB,OAAL,CAAarB,IAAI,CAACX,GAAlB,EAAuBgC,OAAvB,CAAxB;AACArB,QAAAA,IAAI,CAACP,GAAL,CAASK,GAAT,CAAaiB,IAAb;AACAQ,QAAAA,QAAQ;AACT;AACF;AAED;AACF;AACA;AACA;AACA;;;;6BACWR,I,EAAM2B,Q,EAAUnB,Q,EAAU;AACjCzC,MAAAA,KAAK,CAAC,aAAD,CAAL;AAEA,UAAM+D,OAAO,GAAG,EAAhB;AACA,UAAIC,KAAK,GAAG,CAAZ;AAEA/D,MAAAA,kBAAkB,CAAC2D,QAAD,CAAlB,CAA6B,KAAKlD,eAAlC,EACGY,EADH,CACM,OADN,EACemB,QADf,EAEGnB,EAFH,CAEM,MAFN,EAEc,UAAS2C,KAAT,EAAgB;AAC1BF,QAAAA,OAAO,CAAChB,IAAR,CAAakB,KAAb;AACAD,QAAAA,KAAK,IAAIC,KAAK,CAACP,MAAf;AACD,OALH,EAMGpC,EANH,CAMM,KANN,EAMa,YAAW;AACpBmB,QAAAA,QAAQ,CAAC,IAAD,EAAON,MAAM,CAAC+B,MAAP,CAAcH,OAAd,EAAuBC,KAAvB,CAAP,CAAR;AACD,OARH,EASGhD,GATH,CASOiB,IATP;AAUD;AAED;AACF;AACA;AACA;AACA;;;;4BACUkC,E,EAAI;AACVnE,MAAAA,KAAK,CAAC,SAAD,CAAL;AAEA,UAAMkB,IAAI,GAAG,IAAb;AACA,UAAIkD,iBAAJ;;AAEA,UAAI,KAAKxC,OAAT,EAAkB;AAChB5B,QAAAA,KAAK,CAAC,+BAAD,CAAL;AACA,aAAK4B,OAAL,CAAaU,OAAb;AACD;;AAED,UAAI,KAAKf,QAAT,EAAmB;AACjBvB,QAAAA,KAAK,CAAC,yCAAD,CAAL;AACA,aAAK0B,IAAL,CAAU,CAAC;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAV;AACAR,QAAAA,OAAO;AACR,OAJD,MAIO,IAAI,KAAKkD,SAAT,EAAoB;AACzBrE,QAAAA,KAAK,CAAC,0CAAD,CAAL;AACAmB,QAAAA,OAAO;AACR,OAHM,MAGA;AACLnB,QAAAA,KAAK,CAAC,kDAAD,CAAL;AACA,aAAKyB,WAAL,GAAmBN,OAAnB;AACAiD,QAAAA,iBAAiB,GAAGE,UAAU,CAACnD,OAAD,EAAU,KAAKX,YAAf,CAA9B;AACD;;AAED,eAASW,OAAT,GAAmB;AACjBoD,QAAAA,YAAY,CAACH,iBAAD,CAAZ;AACAD,QAAAA,EAAE;AACFjD,QAAAA,IAAI,CAACC,OAAL;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;4BACUZ,G,EAAKgC,Q,EAAS;AACpBA,MAAAA,QAAO,GAAGA,QAAO,IAAI,EAArB,CADoB,CAGpB;AACA;;AACA,UAAMiC,EAAE,GAAGjE,GAAG,CAACgC,OAAJ,CAAY,YAAZ,CAAX;;AACA,UAAIiC,EAAE,KAAK,CAACA,EAAE,CAACC,OAAH,CAAW,OAAX,CAAD,IAAwB,CAACD,EAAE,CAACC,OAAH,CAAW,UAAX,CAA9B,CAAN,EAA6D;AAC3DlC,QAAAA,QAAO,CAAC,kBAAD,CAAP,GAA8B,GAA9B;AACD;;AAED,WAAKf,IAAL,CAAU,SAAV,EAAqBe,QAArB;AACA,aAAOA,QAAP;AACD;;;wBApVU;AACT,aAAO,SAAP;AACD;;;;EArBmB5C,S;;AA0WtB+E,MAAM,CAACC,OAAP,GAAiBrE,OAAjB","sourcesContent":["const Transport = require(\"../transport\");\nconst parser = require(\"engine.io-parser\");\nconst zlib = require(\"zlib\");\nconst accepts = require(\"accepts\");\nconst debug = require(\"debug\")(\"engine:polling\");\n\nconst compressionMethods = {\n  gzip: zlib.createGzip,\n  deflate: zlib.createDeflate\n};\n\nclass Polling extends Transport {\n  /**\n   * HTTP polling constructor.\n   *\n   * @api public.\n   */\n  constructor(req) {\n    super(req);\n\n    this.closeTimeout = 30 * 1000;\n    this.maxHttpBufferSize = null;\n    this.httpCompression = null;\n  }\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n  get name() {\n    return \"polling\";\n  }\n\n  /**\n   * Overrides onRequest.\n   *\n   * @param {http.IncomingMessage}\n   * @api private\n   */\n  onRequest(req) {\n    const res = req.res;\n\n    if (\"GET\" === req.method) {\n      this.onPollRequest(req, res);\n    } else if (\"POST\" === req.method) {\n      this.onDataRequest(req, res);\n    } else {\n      res.writeHead(500);\n      res.end();\n    }\n  }\n\n  /**\n   * The client sends a request awaiting for us to send data.\n   *\n   * @api private\n   */\n  onPollRequest(req, res) {\n    if (this.req) {\n      debug(\"request overlap\");\n      // assert: this.res, '.req and .res should be (un)set together'\n      this.onError(\"overlap from client\");\n      res.writeHead(500);\n      res.end();\n      return;\n    }\n\n    debug(\"setting request\");\n\n    this.req = req;\n    this.res = res;\n\n    const self = this;\n\n    function onClose() {\n      self.onError(\"poll connection closed prematurely\");\n    }\n\n    function cleanup() {\n      req.removeListener(\"close\", onClose);\n      self.req = self.res = null;\n    }\n\n    req.cleanup = cleanup;\n    req.on(\"close\", onClose);\n\n    this.writable = true;\n    this.emit(\"drain\");\n\n    // if we're still writable but had a pending close, trigger an empty send\n    if (this.writable && this.shouldClose) {\n      debug(\"triggering empty send to append close packet\");\n      this.send([{ type: \"noop\" }]);\n    }\n  }\n\n  /**\n   * The client sends a request with data.\n   *\n   * @api private\n   */\n  onDataRequest(req, res) {\n    if (this.dataReq) {\n      // assert: this.dataRes, '.dataReq and .dataRes should be (un)set together'\n      this.onError(\"data request overlap from client\");\n      res.writeHead(500);\n      res.end();\n      return;\n    }\n\n    this.dataReq = req;\n    this.dataRes = res;\n\n    let chunks = \"\";\n    const self = this;\n\n    function cleanup() {\n      req.removeListener(\"data\", onData);\n      req.removeListener(\"end\", onEnd);\n      req.removeListener(\"close\", onClose);\n      self.dataReq = self.dataRes = chunks = null;\n    }\n\n    function onClose() {\n      cleanup();\n      self.onError(\"data request connection closed prematurely\");\n    }\n\n    function onData(data) {\n      let contentLength;\n      chunks += data;\n      contentLength = Buffer.byteLength(chunks);\n\n      if (contentLength > self.maxHttpBufferSize) {\n        chunks = \"\";\n        req.connection.destroy();\n      }\n    }\n\n    function onEnd() {\n      self.onData(chunks);\n\n      const headers = {\n        // text/html is required instead of text/plain to avoid an\n        // unwanted download dialog on certain user-agents (GH-43)\n        \"Content-Type\": \"text/html\",\n        \"Content-Length\": 2\n      };\n\n      res.writeHead(200, self.headers(req, headers));\n      res.end(\"ok\");\n      cleanup();\n    }\n\n    req.on(\"close\", onClose);\n    req.setEncoding(\"utf8\");\n    req.on(\"data\", onData);\n    req.on(\"end\", onEnd);\n  }\n\n  /**\n   * Processes the incoming data payload.\n   *\n   * @param {String} encoded payload\n   * @api private\n   */\n  onData(data) {\n    debug('received \"%s\"', data);\n    const self = this;\n    const callback = function(packet) {\n      if (\"close\" === packet.type) {\n        debug(\"got xhr close packet\");\n        self.onClose();\n        return false;\n      }\n\n      self.onPacket(packet);\n    };\n\n    parser.decodePayload(data).forEach(callback);\n  }\n\n  /**\n   * Overrides onClose.\n   *\n   * @api private\n   */\n  onClose() {\n    if (this.writable) {\n      // close pending poll request\n      this.send([{ type: \"noop\" }]);\n    }\n    super.onClose();\n  }\n\n  /**\n   * Writes a packet payload.\n   *\n   * @param {Object} packet\n   * @api private\n   */\n  send(packets) {\n    this.writable = false;\n\n    if (this.shouldClose) {\n      debug(\"appending close packet to payload\");\n      packets.push({ type: \"close\" });\n      this.shouldClose();\n      this.shouldClose = null;\n    }\n\n    const self = this;\n    parser.encodePayload(packets, data => {\n      const compress = packets.some(function(packet) {\n        return packet.options && packet.options.compress;\n      });\n      self.write(data, { compress: compress });\n    });\n  }\n\n  /**\n   * Writes data as response to poll request.\n   *\n   * @param {String} data\n   * @param {Object} options\n   * @api private\n   */\n  write(data, options) {\n    debug('writing \"%s\"', data);\n    const self = this;\n    this.doWrite(data, options, function() {\n      self.req.cleanup();\n    });\n  }\n\n  /**\n   * Performs the write.\n   *\n   * @api private\n   */\n  doWrite(data, options, callback) {\n    const self = this;\n\n    // explicit UTF-8 is required for pages not served under utf\n    const isString = typeof data === \"string\";\n    const contentType = isString\n      ? \"text/plain; charset=UTF-8\"\n      : \"application/octet-stream\";\n\n    const headers = {\n      \"Content-Type\": contentType\n    };\n\n    if (!this.httpCompression || !options.compress) {\n      respond(data);\n      return;\n    }\n\n    const len = isString ? Buffer.byteLength(data) : data.length;\n    if (len < this.httpCompression.threshold) {\n      respond(data);\n      return;\n    }\n\n    const encoding = accepts(this.req).encodings([\"gzip\", \"deflate\"]);\n    if (!encoding) {\n      respond(data);\n      return;\n    }\n\n    this.compress(data, encoding, function(err, data) {\n      if (err) {\n        self.res.writeHead(500);\n        self.res.end();\n        callback(err);\n        return;\n      }\n\n      headers[\"Content-Encoding\"] = encoding;\n      respond(data);\n    });\n\n    function respond(data) {\n      headers[\"Content-Length\"] =\n        \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n      self.res.writeHead(200, self.headers(self.req, headers));\n      self.res.end(data);\n      callback();\n    }\n  }\n\n  /**\n   * Compresses data.\n   *\n   * @api private\n   */\n  compress(data, encoding, callback) {\n    debug(\"compressing\");\n\n    const buffers = [];\n    let nread = 0;\n\n    compressionMethods[encoding](this.httpCompression)\n      .on(\"error\", callback)\n      .on(\"data\", function(chunk) {\n        buffers.push(chunk);\n        nread += chunk.length;\n      })\n      .on(\"end\", function() {\n        callback(null, Buffer.concat(buffers, nread));\n      })\n      .end(data);\n  }\n\n  /**\n   * Closes the transport.\n   *\n   * @api private\n   */\n  doClose(fn) {\n    debug(\"closing\");\n\n    const self = this;\n    let closeTimeoutTimer;\n\n    if (this.dataReq) {\n      debug(\"aborting ongoing data request\");\n      this.dataReq.destroy();\n    }\n\n    if (this.writable) {\n      debug(\"transport writable - closing right away\");\n      this.send([{ type: \"close\" }]);\n      onClose();\n    } else if (this.discarded) {\n      debug(\"transport discarded - closing right away\");\n      onClose();\n    } else {\n      debug(\"transport not writable - buffering orderly close\");\n      this.shouldClose = onClose;\n      closeTimeoutTimer = setTimeout(onClose, this.closeTimeout);\n    }\n\n    function onClose() {\n      clearTimeout(closeTimeoutTimer);\n      fn();\n      self.onClose();\n    }\n  }\n\n  /**\n   * Returns headers for a response.\n   *\n   * @param {http.IncomingMessage} request\n   * @param {Object} extra headers\n   * @api private\n   */\n  headers(req, headers) {\n    headers = headers || {};\n\n    // prevent XSS warnings on IE\n    // https://github.com/LearnBoost/socket.io/pull/1333\n    const ua = req.headers[\"user-agent\"];\n    if (ua && (~ua.indexOf(\";MSIE\") || ~ua.indexOf(\"Trident/\"))) {\n      headers[\"X-XSS-Protection\"] = \"0\";\n    }\n\n    this.emit(\"headers\", headers);\n    return headers;\n  }\n}\n\nmodule.exports = Polling;\n"]},"metadata":{},"sourceType":"script"}