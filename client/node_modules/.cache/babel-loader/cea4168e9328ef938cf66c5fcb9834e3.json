{"ast":null,"code":"import Phaser from 'phaser';\nexport default class SwordSwing extends Phaser.Physics.Arcade.Sprite {\n  constructor(scene, x, y, texture, {\n    owner\n  } = {}) {\n    super(scene, x, y, texture); //Adds sprite to screen\n\n    scene.add.existing(this); //Pair sprite to owner sprite(Either will be a player or opponent)\n\n    this.owner = owner; //Adds physics to sprite\n\n    scene.physics.add.existing(this);\n    this.setCircle(220);\n    this.body.setOffset(this.owner.displayWidth / 2, this.owner.displayHeight / 2);\n    this.setScale(.4);\n    this.createAnimations(scene); //When the swing completes, the sword is destroyed\n\n    this.on('animationcomplete', function () {\n      this.swinging = false;\n      this.destroy();\n    }, this);\n    this.x = x;\n    this.y = y;\n    this.swinging = false;\n  }\n\n  createAnimations(scene) {\n    scene.anims.create({\n      key: 'swordSlash',\n      frames: scene.anims.generateFrameNumbers(this.texture.key, {\n        start: 1,\n        end: 5\n      }),\n      frameRate: 30,\n      hideOnComplete: true\n    });\n  }\n\n  update() {\n    if (this.swinging) {\n      this.followOwner();\n    }\n  } //Orients sword to player, so that the sword doesn't just swing up all the time\n\n\n  orientSword(playerOrientationVector) {\n    //Convert orientation vector to degrees, shift 90 degrees(The sword animation starts by facing up, it also inverts the orientation y vector as the yaxis is inverted)\n    let newOrientation = Math.atan2(-playerOrientationVector.y, -playerOrientationVector.x) * 180 / Math.PI - 90;\n    this.angle = newOrientation;\n  }\n\n  swingSword() {\n    this.swinging = true;\n    this.orientSword(this.owner.getOrientationVector());\n    this.anims.play('swordSlash');\n  }\n\n  isSwinging() {\n    return this.swinging;\n  }\n\n  followOwner() {\n    this.x = this.owner.x;\n    this.y = this.owner.y;\n  }\n\n  inSwordSweep(gameObject) {\n    //Checks to see if an object is within the sweep of the sword attack\n    //converts the angle between objects to rotate counter clockwise\n    //in order to match the rotation of the sword angle math in orient sword\n    //**A -270 degrees seems to be automatically converted to 90 inside of phaser.arcade.sprite.angle after it is set\n    let collisionAngle = Phaser.Math.Angle.Between(gameObject.x, gameObject.y, this.x, this.y) * 180 / Math.PI - 90; //This is the collision width of the object\n\n    if (collisionAngle > this.angle - 60 && collisionAngle < this.angle + 60) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  getOwner() {\n    return this.owner;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/src/phaser/sprites/SwordSwing.js"],"names":["Phaser","SwordSwing","Physics","Arcade","Sprite","constructor","scene","x","y","texture","owner","add","existing","physics","setCircle","body","setOffset","displayWidth","displayHeight","setScale","createAnimations","on","swinging","destroy","anims","create","key","frames","generateFrameNumbers","start","end","frameRate","hideOnComplete","update","followOwner","orientSword","playerOrientationVector","newOrientation","Math","atan2","PI","angle","swingSword","getOrientationVector","play","isSwinging","inSwordSweep","gameObject","collisionAngle","Angle","Between","getOwner"],"mappings":"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","sourcesContent":["import Phaser from 'phaser';\r\nexport default class SwordSwing extends Phaser.Physics.Arcade.Sprite\r\n    {\r\n\r\n        constructor (scene,x,y,texture,{owner}={})\r\n        {\r\n            super(scene,x,y,texture);\r\n            //Adds sprite to screen\r\n            scene.add.existing(this);\r\n            //Pair sprite to owner sprite(Either will be a player or opponent)\r\n            this.owner = owner;\r\n            //Adds physics to sprite\r\n            scene.physics.add.existing(this);\r\n           \r\n            \r\n            \r\n            this.setCircle(220);\r\n            \r\n            this.body.setOffset(this.owner.displayWidth/2,this.owner.displayHeight/2);\r\n            this.setScale(.4);\r\n          \r\n          \r\n            this.createAnimations(scene);\r\n            //When the swing completes, the sword is destroyed\r\n            this.on('animationcomplete', function() {\r\n              this.swinging = false;\r\n              this.destroy();\r\n            },this);\r\n           \r\n\r\n           \r\n            this.x = x;\r\n            this.y = y;\r\n            this.swinging = false;\r\n        }\r\n       \r\n        createAnimations(scene){\r\n          scene.anims.create({\r\n            key: 'swordSlash',\r\n            frames: scene.anims.generateFrameNumbers(this.texture.key, { start: 1, end: 5 }),\r\n            frameRate: 30,\r\n            hideOnComplete: true\r\n          });\r\n          \r\n          \r\n        }\r\n        update(){\r\n          if (this.swinging){\r\n            this.followOwner();\r\n          }\r\n        }\r\n        //Orients sword to player, so that the sword doesn't just swing up all the time\r\n        orientSword(playerOrientationVector){\r\n         \r\n          //Convert orientation vector to degrees, shift 90 degrees(The sword animation starts by facing up, it also inverts the orientation y vector as the yaxis is inverted)\r\n          let newOrientation = (Math.atan2(-playerOrientationVector.y,-playerOrientationVector.x)*180/Math.PI-90);\r\n         \r\n          this.angle = newOrientation; \r\n          \r\n        }\r\n        \r\n        swingSword(){\r\n\r\n          this.swinging = true;\r\n          this.orientSword(this.owner.getOrientationVector());\r\n          this.anims.play('swordSlash');\r\n        }\r\n        isSwinging(){\r\n          return this.swinging;\r\n        }\r\n\r\n        followOwner(){\r\n          this.x = this.owner.x;\r\n          this.y = this.owner.y;\r\n        }\r\n        inSwordSweep(gameObject){\r\n          //Checks to see if an object is within the sweep of the sword attack\r\n          //converts the angle between objects to rotate counter clockwise\r\n          //in order to match the rotation of the sword angle math in orient sword\r\n          //**A -270 degrees seems to be automatically converted to 90 inside of phaser.arcade.sprite.angle after it is set\r\n          let collisionAngle = Phaser.Math.Angle.Between(gameObject.x,gameObject.y,this.x,this.y)*180/Math.PI-90;\r\n         \r\n          //This is the collision width of the object\r\n          if (collisionAngle>this.angle-60&&collisionAngle<this.angle+60){\r\n            return true;\r\n          }\r\n          else{\r\n            return false;\r\n          }\r\n        }\r\n        getOwner(){\r\n          return this.owner;\r\n        }\r\n    }"]},"metadata":{},"sourceType":"module"}