{"ast":null,"code":"import { Scene } from 'phaser';\nimport Player from \"../sprites/Player.js\";\nimport Controls from \"../controls/Controls.js\";\nimport MagicBlast from \"../sprites/MagicBlast.js\";\nimport SwordSwing from \"../sprites/SwordSwing.js\";\nimport Phaser from 'phaser';\nimport bckg from '../assets/bckg.png';\nimport HealthBar from \"../sprites/HealthBar.js\";\nimport CoolDown from \"../sprites/CoolDown.js\";\nimport LightningBolt from '../sprites/lightningBolt.js';\nimport LightningHB from '../sprites/lightningBoltHitbox.js';\nlet LocalGameScene = {\n  preload: function () {\n    this.load.image('bckg', 'https://i.imgur.com/DMVC2IQ.png');\n    this.load.image('wall', 'https://i.imgur.com/av8q7Or.png');\n    this.load.image('vwall', 'https://i.imgur.com/UB2GdEL.png');\n    this.load.spritesheet('swordSwing', 'https://i.imgur.com/ULyXfap.png', {\n      frameWidth: 500,\n      frameHeight: 500\n    });\n    this.load.image('swordCool', 'https://i.imgur.com/SnLjQdR.png');\n    this.load.image('blastCool', 'https://i.imgur.com/d4Enueh.png');\n    this.load.spritesheet('magicBlast', 'https://i.imgur.com/dEhNPqO.png', {\n      frameWidth: 150,\n      frameHeight: 150\n    });\n    this.load.spritesheet('explosion', 'https://i.imgur.com/UHZiUKC.png', {\n      frameWidth: 192,\n      frameHeight: 192\n    });\n    this.load.spritesheet('player', 'https://i.imgur.com/WlEeiKT.png', {\n      frameWidth: 68,\n      frameHeight: 68\n    });\n    this.load.spritesheet('otherPlayer', 'https://i.imgur.com/NYAJusD.png', {\n      frameWidth: 68,\n      frameHeight: 68\n    });\n    this.load.spritesheet('Background', 'https://i.imgur.com/8SzCikO.png', {\n      frameWidth: 800,\n      frameHeight: 600\n    });\n    this.load.image('dodgeCool', 'https://i.imgur.com/mTklmkU.png');\n    this.load.spritesheet('lightningBolt', 'https://i.imgur.com/3MskIUy.png', {\n      frameWidth: 16,\n      frameHeight: 1000\n    });\n    this.load.image('lightningCool', 'https://i.imgur.com/FVquIxw.png');\n  },\n  create: function () {\n    this.socket = io.connect(ENDPOINT, {\n      reconnect: true\n    });\n    this.socket.on(\"connection\", function (socket) {\n      console.log(\"connected to server\");\n    }); //Deflect Magic Blast with sword\n\n    this.deflectBlast = function (magicBlast, swordHitbox) {\n      if (swordHitbox.inSwordSweep(magicBlast)) {\n        magicBlast.deflectFrom(swordHitbox.getOwner());\n      }\n    }; //console.log(this.props.returnMP);\n\n\n    this.explosionAnim = this.anims.create({\n      key: 'explode',\n      frames: this.anims.generateFrameNumbers('explosion', {\n        start: 1,\n        end: 23\n      }),\n      frameRate: 10,\n      repeat: -1\n    }); //Callback function for player/magicBlast Collision\n\n    this.playerHit = function (magicBlast, player) {\n      //Check that the magicBlast is hitting the right player\n      if (magicBlast.getOwner() !== player) {\n        magicBlast.explode(); //Check if player is stunned or dodging, if neither is true, play stun animation and calculate damage\n\n        if (player.getStun() === false || player.getDodging() === false) {\n          player.playStun(); //When the healthbar reaches 0, this evaluates to true\n\n          if (player.getHealthBar().decrease(4)) {\n            player.gameOver();\n            player.anims.play('explode', true); //Win Screen and link people back to main menu   \n            //How could we access the react router DOM here?\n\n            let timedEvent = player.scene.time.delayedCall(3000, player.scene.redirect, [], this);\n          }\n\n          ; //Knock opponent backwards\n\n          player.knockBack(magicBlast);\n        }\n      }\n    };\n\n    this.playerHitLightning = function (lightningBolt, player) {\n      //Players cannot hit themselves with their own attacks\n      if (lightningBolt.getOwner() !== player) {\n        console.log(\"collision happening\");\n        console.log(\"player.getStun() is: \" + player.getStun());\n        console.log(\"player.getDodging() is: \" + player.getDodging());\n\n        if (player.getStun() === false && player.getDodging() === false) {\n          console.log(\"collision happening here too\");\n          player.playStun();\n\n          if (player.getHealthBar().decrease(4)) {\n            player.gameOver();\n            player.anims.play('explode', true); //Send players back to main menu\n\n            let timedEvent = player.scene.time.delayedCall(3000, player.scene.redirect, [], this);\n          }\n\n          player.knockBack(lightningBolt); //Destroy the animation associated with these hitboxes\n\n          lightningBolt.destroyAnimationSprite(); //Find all other associated lightning bolt hitboxes and destroy them\n\n          lightningBolt.scene.lightningBolts.getChildren().forEach(lightningBolt => {\n            if (lightningBolt.getOwner() !== player) {\n              lightningBolt.body.enable = false;\n            }\n          });\n        }\n      }\n    };\n\n    this.redirect = function () {\n      window.location.replace('http://localhost:3000/');\n    }; //Glowing Background Sprite\n\n\n    this.background = this.add.sprite(400, 300, 'Background');\n    this.anims.create({\n      key: 'glow',\n      frames: this.anims.generateFrameNumbers('Background', {\n        start: 1,\n        end: 12\n      }),\n      frameRate: 4,\n      repeat: -1,\n      yoyo: true\n    });\n    this.background.anims.play('glow'); //Create Both Players\n\n    this.player1 = new Player(this, 400, 500, 'player', this.explosionAnim);\n    this.player2 = new Player(this, 400, 100, 'otherPlayer', this.explosionAnim); //Create Win Text\n\n    this.youWin = this.add.text(150, 300 - 60, 'PLAYER2 WINS ', {\n      fontSize: '70px',\n      color: '#66FF00'\n    });\n    this.youWin.setVisible(false); //Create Health Bars\n\n    this.healthBarP1 = new HealthBar({\n      scene: this,\n      x: 0,\n      y: 584\n    });\n    this.healthBarP2 = new HealthBar({\n      scene: this,\n      x: 0,\n      y: 0\n    });\n    this.swordCoolDownP1 = new CoolDown(this, 230, 560, 'swordCool', 700);\n    this.swordCoolDownP2 = new CoolDown(this, 570, 40, 'swordCool', 700);\n    this.magicCoolDownP1 = new CoolDown(this, 278, 560, 'blastCool', 1000);\n    this.magicCoolDownP2 = new CoolDown(this, 618, 40, 'blastCool', 1000);\n    this.dodgeCoolDownP1 = new CoolDown(this, 326, 560, 'dodgeCool', 1000);\n    this.dodgeCoolDownP2 = new CoolDown(this, 665, 40, 'dodgeCool', 1000);\n    this.lightningCoolDownP1 = new CoolDown(this, 374, 560, 'lightningCool', 5000);\n    this.lightningCoolDownP2 = new CoolDown(this, 713, 40, 'lightningCool', 5000); //Checks for the amount of gamepads connected to the phaser game, if the passed controls do not match the quantity of connected gamepads,\n    //the controls will be reset\n\n    let pad;\n    let gamePadCount = this.controlConfig.player1.Movement === 'GamePad' ? 1 : 0;\n    gamePadCount += this.controlConfig.player2.Movement == 'GamePad' ? 1 : 0;\n    this.controlsP1 = new Controls(this, {\n      directionals: this.controlConfig.player1.Movement,\n      magicBlast: this.controlConfig.player1.MagicBlast,\n      swordSwing: this.controlConfig.player1.SwordSlash\n    }, gamePadCount, 1);\n    this.controlsP2 = new Controls(this, {\n      directionals: this.controlConfig.player2.Movement,\n      magicBlast: this.controlConfig.player2.MagicBlast,\n      swordSwing: this.controlConfig.player2.SwordSlash\n    }, gamePadCount, 2);\n    this.magicBlasts = this.physics.add.group();\n    this.swordHitBoxes = this.physics.add.group();\n    this.lightningBolts = this.physics.add.group(); //Create a sprite group in order to handle collisions\n\n    this.players = this.physics.add.group();\n    this.players.add(this.player1);\n    this.players.add(this.player2); //Attach healthbars to the selected players\n\n    this.player1.setHealthBar(this.healthBarP1);\n    this.player2.setHealthBar(this.healthBarP2);\n    this.player1.setBounce(1);\n    this.player2.setBounce(1); //Collision handling\n\n    this.physics.add.overlap(this.magicBlasts, this.swordHitBoxes, this.deflectBlast);\n    this.physics.add.overlap(this.magicBlasts, this.players, this.playerHit);\n    this.physics.add.overlap(this.lightningBolts, this.players, this.playerHitLightning); //4 walls on the outside\n\n    this.leftWall = this.physics.add.sprite(-55, 300, 'vwall');\n    this.leftWall.body.immovable = true;\n    this.rightWall = this.physics.add.sprite(855, 300, 'vwall');\n    this.rightWall.body.immovable = true;\n    this.topWall = this.physics.add.sprite(400, -55, 'wall');\n    this.topWall.body.immovable = true;\n    this.bottomWall = this.physics.add.sprite(400, 655, 'wall');\n    this.bottomWall.body.immovable = true;\n    this.walls = this.physics.add.staticGroup();\n    this.walls.add(this.leftWall);\n    this.walls.add(this.rightWall);\n    this.walls.add(this.topWall);\n    this.walls.add(this.bottomWall); //midline barrier wall\n\n    this.midWall = this.physics.add.sprite(400, 300, 'wall');\n    this.midWall.setScale(1, .08);\n    this.midWall.setVisible(false);\n    this.midWall.body.immovable = true;\n    this.physics.add.collider(this.midWall, this.players); //The order of the objects in collider matters, magicBlasts will bounce off the walls in this order\n\n    this.physics.add.collider(this.magicBlasts, this.walls);\n    this.physics.add.collider(this.walls, this.players);\n\n    this.createMagicBlast = function (player) {\n      //Create magic Blast\n      var magicBlast = new MagicBlast(this, player.getX(), player.getY(), 'magicBlast', {\n        owner: player\n      }); //Add to collision group\n\n      this.magicBlasts.add(magicBlast); //Fire in direction of player orientation\n\n      magicBlast.setMagicBlastVelocity(player.getOrientationVector()); //Set magicBlast bounce\n\n      magicBlast.setCollideWorldBounds(true);\n      magicBlast.setBounce(1);\n    };\n\n    this.checkForSwingThenSwing = function (attackInput, player, coolDown) {\n      //Check if swordSwing exists, and then check if it belongs to the player\n      this.swordHitBoxes.getChildren().forEach(swordSwing => {\n        if (swordSwing.getOwner() === player) {\n          let swordToCheck = swordSwing;\n        }\n      }); //Check if sword swing can be activated\n\n      if (attackInput.swordSwingFiring && typeof swordToCheck == 'undefined' && !coolDown.isActive()) {\n        //Set sword swing spawn point\n        let swordSpawnX = player.getX();\n        let swordSpawnY = player.getY(); //Create new sword swing\n\n        let newSwordSwing = new SwordSwing(this, swordSpawnX, swordSpawnY, 'swordSwing', {\n          owner: player\n        });\n        newSwordSwing.swingSword();\n        coolDown.startCoolDown();\n        this.swordHitBoxes.add(newSwordSwing);\n      }\n    };\n  },\n  update: function () {\n    //Checks if player 1 and player2 are alive, can events be used for this instead?\n    if (!this.player1.isAlive()) {\n      this.youWin.setVisible(true);\n    } else if (!this.player2.isAlive()) {\n      this.youWin.setVisible(true);\n      this.youWin.setText('PLAYER1 WINS');\n    } //Get Player input\n\n\n    this.movementVectorP1 = this.controlsP1.getMovementVector();\n    this.movementVectorP2 = this.controlsP2.getMovementVector();\n    this.player1.setOrientationVector(this.movementVectorP1);\n    this.player2.setOrientationVector(this.movementVectorP2); //Check to make sure the player is not stunned, alive, and is not dodging\n\n    if (!this.player1.getStun() && this.player1.isAlive() && !this.player1.getDodging()) {\n      this.player1.setPlayerVelocity(this.movementVectorP1);\n    }\n\n    if (!this.player2.getStun() && this.player2.isAlive() && !this.player2.getDodging()) {\n      this.player2.setPlayerVelocity(this.movementVectorP2);\n    } //Get attack inputs every update cycle\n\n\n    let attackInputsP1 = this.controlsP1.getMoveInput();\n    let attackInputsP2 = this.controlsP2.getMoveInput(); //Check for user firing magic blast\n\n    if (attackInputsP1.magicBlastFiring && !this.magicCoolDownP1.isActive()) {\n      this.magicCoolDownP1.startCoolDown();\n      this.createMagicBlast(this.player1);\n    }\n\n    ;\n\n    if (attackInputsP2.magicBlastFiring && !this.magicCoolDownP2.isActive()) {\n      this.magicCoolDownP2.startCoolDown();\n      this.createMagicBlast(this.player2);\n    }\n\n    ; //Check for user firing Lightning Bolt\n\n    if (attackInputsP1.lightningBoltFiring && !this.lightningCoolDownP1.isActive()) {\n      this.lightningCoolDownP1.startCoolDown();\n      let lightningBolt = new LightningBolt(this, this.player1.getX(), this.player1.getY(), 'lightningBolt', {\n        owner: this.player1\n      });\n      let lightningBoltHB1 = new LightningHB(this, this.player1.getX(), this.player1.getY(), 'magicBlast', {\n        owner: this.player1,\n        animationSprite: lightningBolt,\n        Olength: 100\n      });\n      let lightningBoltHB2 = new LightningHB(this, this.player1.getX(), this.player1.getY(), 'magicBlast', {\n        owner: this.player1,\n        animationSprite: lightningBolt,\n        Olength: 50\n      });\n      let lightningBoltHB3 = new LightningHB(this, this.player1.getX(), this.player1.getY(), 'magicBlast', {\n        owner: this.player1,\n        animationSprite: lightningBolt,\n        Olength: 25\n      });\n      let lightningBoltHB4 = new LightningHB(this, this.player1.getX(), this.player1.getY(), 'magicBlast', {\n        owner: this.player1,\n        animationSprite: lightningBolt,\n        Olength: 75\n      });\n      this.lightningBolts.add(lightningBoltHB1);\n      this.lightningBolts.add(lightningBoltHB2);\n      this.lightningBolts.add(lightningBoltHB3);\n      this.lightningBolts.add(lightningBoltHB4);\n    }\n\n    ;\n\n    if (attackInputsP2.lightningBoltFiring && !this.lightningCoolDownP2.isActive()) {\n      this.lightningCoolDownP2.startCoolDown();\n      let lightningBolt = new LightningBolt(this, this.player2.getX(), this.player2.getY(), 'lightningBolt', {\n        owner: this.player2\n      });\n      let lightningBoltHB1 = new LightningHB(this, this.player2.getX(), this.player2.getY(), 'magicBlast', {\n        owner: this.player2,\n        animationSprite: lightningBolt,\n        Olength: 100\n      });\n      let lightningBoltHB2 = new LightningHB(this, this.player2.getX(), this.player2.getY(), 'magicBlast', {\n        owner: this.player2,\n        animationSprite: lightningBolt,\n        Olength: 50\n      });\n      let lightningBoltHB3 = new LightningHB(this, this.player2.getX(), this.player2.getY(), 'magicBlast', {\n        owner: this.player2,\n        animationSprite: lightningBolt,\n        Olength: 25\n      });\n      let lightningBoltHB4 = new LightningHB(this, this.player2.getX(), this.player2.getY(), 'magicBlast', {\n        owner: this.player2,\n        animationSprite: lightningBolt,\n        Olength: 75\n      });\n      this.lightningBolts.add(lightningBoltHB1);\n      this.lightningBolts.add(lightningBoltHB2);\n      this.lightningBolts.add(lightningBoltHB3);\n      this.lightningBolts.add(lightningBoltHB4);\n    }\n\n    ; //check for user dodging and check that they aren't already in dodge mode\n\n    if (attackInputsP1.dodgeFiring && !this.player1.getDodging() && !this.dodgeCoolDownP1.isActive()) {\n      this.dodgeCoolDownP1.startCoolDown();\n      this.player1.dodge();\n    }\n\n    ;\n\n    if (attackInputsP2.dodgeFiring && !this.player2.getDodging() && !this.dodgeCoolDownP2.isActive()) {\n      this.dodgeCoolDownP2.startCoolDown();\n      this.player2.dodge();\n    }\n\n    ; //Check if sword swings exist, and update them as needed, \n    //this is the best way I can think of for tracking and following player position in the main loop\n\n    let swordSwings = this.swordHitBoxes.getChildren();\n\n    if (swordSwings.length > 0) {\n      swordSwings.forEach(swordSwing => {\n        swordSwing.update();\n      });\n    } //Check for user swinging sword and then swing, starting the cooldown\n\n\n    this.checkForSwingThenSwing(attackInputsP1, this.player1, this.swordCoolDownP1);\n    this.checkForSwingThenSwing(attackInputsP2, this.player2, this.swordCoolDownP2);\n  }\n};\nexport default LocalGameScene;","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/src/phaser/scenes/LocalGameScene.js"],"names":["Scene","Player","Controls","MagicBlast","SwordSwing","Phaser","bckg","HealthBar","CoolDown","LightningBolt","LightningHB","LocalGameScene","preload","load","image","spritesheet","frameWidth","frameHeight","create","socket","io","connect","ENDPOINT","reconnect","on","console","log","deflectBlast","magicBlast","swordHitbox","inSwordSweep","deflectFrom","getOwner","explosionAnim","anims","key","frames","generateFrameNumbers","start","end","frameRate","repeat","playerHit","player","explode","getStun","getDodging","playStun","getHealthBar","decrease","gameOver","play","timedEvent","scene","time","delayedCall","redirect","knockBack","playerHitLightning","lightningBolt","destroyAnimationSprite","lightningBolts","getChildren","forEach","body","enable","window","location","replace","background","add","sprite","yoyo","player1","player2","youWin","text","fontSize","color","setVisible","healthBarP1","x","y","healthBarP2","swordCoolDownP1","swordCoolDownP2","magicCoolDownP1","magicCoolDownP2","dodgeCoolDownP1","dodgeCoolDownP2","lightningCoolDownP1","lightningCoolDownP2","pad","gamePadCount","controlConfig","Movement","controlsP1","directionals","swordSwing","SwordSlash","controlsP2","magicBlasts","physics","group","swordHitBoxes","players","setHealthBar","setBounce","overlap","leftWall","immovable","rightWall","topWall","bottomWall","walls","staticGroup","midWall","setScale","collider","createMagicBlast","getX","getY","owner","setMagicBlastVelocity","getOrientationVector","setCollideWorldBounds","checkForSwingThenSwing","attackInput","coolDown","swordToCheck","swordSwingFiring","isActive","swordSpawnX","swordSpawnY","newSwordSwing","swingSword","startCoolDown","update","isAlive","setText","movementVectorP1","getMovementVector","movementVectorP2","setOrientationVector","setPlayerVelocity","attackInputsP1","getMoveInput","attackInputsP2","magicBlastFiring","lightningBoltFiring","lightningBoltHB1","animationSprite","Olength","lightningBoltHB2","lightningBoltHB3","lightningBoltHB4","dodgeFiring","dodge","swordSwings","length"],"mappings":"AAAA,SAASA,KAAT,QAAsB,QAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,IAAIC,cAAc,GAAG;AAGjBC,EAAAA,OAAO,EAAE,YACL;AACI,SAAKC,IAAL,CAAUC,KAAV,CAAgB,MAAhB,EAAwB,iCAAxB;AACA,SAAKD,IAAL,CAAUC,KAAV,CAAgB,MAAhB,EAAwB,iCAAxB;AACA,SAAKD,IAAL,CAAUC,KAAV,CAAgB,OAAhB,EAAyB,iCAAzB;AACA,SAAKD,IAAL,CAAUE,WAAV,CAAsB,YAAtB,EAAoC,iCAApC,EAAuE;AAACC,MAAAA,UAAU,EAAE,GAAb;AAAkBC,MAAAA,WAAW,EAAE;AAA/B,KAAvE;AACA,SAAKJ,IAAL,CAAUC,KAAV,CAAgB,WAAhB,EAA6B,iCAA7B;AACA,SAAKD,IAAL,CAAUC,KAAV,CAAgB,WAAhB,EAA6B,iCAA7B;AACA,SAAKD,IAAL,CAAUE,WAAV,CAAsB,YAAtB,EAAoC,iCAApC,EAAuE;AAACC,MAAAA,UAAU,EAAE,GAAb;AAAkBC,MAAAA,WAAW,EAAE;AAA/B,KAAvE;AACA,SAAKJ,IAAL,CAAUE,WAAV,CAAsB,WAAtB,EAAkC,iCAAlC,EAAqE;AAACC,MAAAA,UAAU,EAAE,GAAb;AAAkBC,MAAAA,WAAW,EAAE;AAA/B,KAArE;AACA,SAAKJ,IAAL,CAAUE,WAAV,CAAsB,QAAtB,EAAgC,iCAAhC,EAAmE;AAAEC,MAAAA,UAAU,EAAE,EAAd;AAAkBC,MAAAA,WAAW,EAAE;AAA/B,KAAnE;AACA,SAAKJ,IAAL,CAAUE,WAAV,CAAsB,aAAtB,EAAoC,iCAApC,EAAuE;AAAEC,MAAAA,UAAU,EAAE,EAAd;AAAkBC,MAAAA,WAAW,EAAE;AAA/B,KAAvE;AACA,SAAKJ,IAAL,CAAUE,WAAV,CAAsB,YAAtB,EAAmC,iCAAnC,EAAsE;AAACC,MAAAA,UAAU,EAAE,GAAb;AAAkBC,MAAAA,WAAW,EAAE;AAA/B,KAAtE;AACA,SAAKJ,IAAL,CAAUC,KAAV,CAAgB,WAAhB,EAA6B,iCAA7B;AACA,SAAKD,IAAL,CAAUE,WAAV,CAAsB,eAAtB,EAAuC,iCAAvC,EAA0E;AAACC,MAAAA,UAAU,EAAE,EAAb;AAAiBC,MAAAA,WAAW,EAAE;AAA9B,KAA1E;AACA,SAAKJ,IAAL,CAAUC,KAAV,CAAgB,eAAhB,EAAiC,iCAAjC;AACH,GAnBY;AAqBjBI,EAAAA,MAAM,EAAE,YACJ;AACI,SAAKC,MAAL,GAAcC,EAAE,CAACC,OAAH,CAAWC,QAAX,EAAqB;AAACC,MAAAA,SAAS,EAAE;AAAZ,KAArB,CAAd;AACA,SAAKJ,MAAL,CAAYK,EAAZ,CAAe,YAAf,EAA6B,UAAUL,MAAV,EAAkB;AAC3CM,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH,KAFD,EAFJ,CAKI;;AACA,SAAKC,YAAL,GAAoB,UAASC,UAAT,EAAoBC,WAApB,EAAgC;AAChD,UAAGA,WAAW,CAACC,YAAZ,CAAyBF,UAAzB,CAAH,EAAwC;AACpCA,QAAAA,UAAU,CAACG,WAAX,CAAuBF,WAAW,CAACG,QAAZ,EAAvB;AACH;AAEJ,KALD,CANJ,CAYI;;;AACA,SAAKC,aAAL,GAAqB,KAAKC,KAAL,CAAWhB,MAAX,CAAkB;AACnCiB,MAAAA,GAAG,EAAE,SAD8B;AAEnCC,MAAAA,MAAM,EAAE,KAAKF,KAAL,CAAWG,oBAAX,CAAgC,WAAhC,EAA4C;AAAEC,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,GAAG,EAAE;AAAjB,OAA5C,CAF2B;AAGnCC,MAAAA,SAAS,EAAE,EAHwB;AAInCC,MAAAA,MAAM,EAAE,CAAC;AAJ0B,KAAlB,CAArB,CAbJ,CAmBI;;AACA,SAAKC,SAAL,GAAiB,UAASd,UAAT,EAAoBe,MAApB,EAA2B;AACzC;AACC,UAAIf,UAAU,CAACI,QAAX,OAAwBW,MAA5B,EAAmC;AAC/Bf,QAAAA,UAAU,CAACgB,OAAX,GAD+B,CAE/B;;AACA,YAAID,MAAM,CAACE,OAAP,OAAqB,KAArB,IAA8BF,MAAM,CAACG,UAAP,OAAwB,KAA1D,EAAgE;AAC5DH,UAAAA,MAAM,CAACI,QAAP,GAD4D,CAE5D;;AACA,cAAGJ,MAAM,CAACK,YAAP,GAAsBC,QAAtB,CAA+B,CAA/B,CAAH,EAAqC;AACjCN,YAAAA,MAAM,CAACO,QAAP;AACAP,YAAAA,MAAM,CAACT,KAAP,CAAaiB,IAAb,CAAkB,SAAlB,EAA6B,IAA7B,EAFiC,CAGjC;AACA;;AAEA,gBAAIC,UAAU,GAAGT,MAAM,CAACU,KAAP,CAAaC,IAAb,CAAkBC,WAAlB,CAA8B,IAA9B,EAAoCZ,MAAM,CAACU,KAAP,CAAaG,QAAjD,EAA2D,EAA3D,EAA+D,IAA/D,CAAjB;AACH;;AAAA,WAV2D,CAW5D;;AACAb,UAAAA,MAAM,CAACc,SAAP,CAAiB7B,UAAjB;AACH;AAEJ;AACJ,KArBD;;AAsBA,SAAK8B,kBAAL,GAA0B,UAASC,aAAT,EAAuBhB,MAAvB,EAA8B;AACpD;AACA,UAAGgB,aAAa,CAAC3B,QAAd,OAA2BW,MAA9B,EAAqC;AACjClB,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BiB,MAAM,CAACE,OAAP,EAAtC;AACApB,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6BiB,MAAM,CAACG,UAAP,EAAzC;;AACA,YAAIH,MAAM,CAACE,OAAP,OAAqB,KAArB,IAA8BF,MAAM,CAACG,UAAP,OAAwB,KAA1D,EAAgE;AAC5DrB,UAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAiB,UAAAA,MAAM,CAACI,QAAP;;AAEA,cAAGJ,MAAM,CAACK,YAAP,GAAsBC,QAAtB,CAA+B,CAA/B,CAAH,EAAqC;AACjCN,YAAAA,MAAM,CAACO,QAAP;AACAP,YAAAA,MAAM,CAACT,KAAP,CAAaiB,IAAb,CAAkB,SAAlB,EAA6B,IAA7B,EAFiC,CAGjC;;AACA,gBAAIC,UAAU,GAAGT,MAAM,CAACU,KAAP,CAAaC,IAAb,CAAkBC,WAAlB,CAA8B,IAA9B,EAAoCZ,MAAM,CAACU,KAAP,CAAaG,QAAjD,EAA2D,EAA3D,EAA+D,IAA/D,CAAjB;AACH;;AAEDb,UAAAA,MAAM,CAACc,SAAP,CAAiBE,aAAjB,EAX4D,CAa5D;;AACAA,UAAAA,aAAa,CAACC,sBAAd,GAd4D,CAgB5D;;AACAD,UAAAA,aAAa,CAACN,KAAd,CAAoBQ,cAApB,CAAmCC,WAAnC,GAAiDC,OAAjD,CAAyDJ,aAAa,IAAI;AACtE,gBAAIA,aAAa,CAAC3B,QAAd,OAA6BW,MAAjC,EAAyC;AACrCgB,cAAAA,aAAa,CAACK,IAAd,CAAmBC,MAAnB,GAA4B,KAA5B;AACH;AACR,WAJG;AAKP;AACJ;AACA,KA9BD;;AA+BA,SAAKT,QAAL,GAAgB,YAAU;AACpBU,MAAAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB,wBAAxB;AACL,KAFD,CAzEJ,CA4EI;;;AACA,SAAKC,UAAL,GAAkB,KAAKC,GAAL,CAASC,MAAT,CAAgB,GAAhB,EAAoB,GAApB,EAAwB,YAAxB,CAAlB;AACA,SAAKrC,KAAL,CAAWhB,MAAX,CAAkB;AACdiB,MAAAA,GAAG,EAAE,MADS;AAEdC,MAAAA,MAAM,EAAE,KAAKF,KAAL,CAAWG,oBAAX,CAAgC,YAAhC,EAA8C;AAAEC,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,GAAG,EAAE;AAAjB,OAA9C,CAFM;AAGdC,MAAAA,SAAS,EAAE,CAHG;AAIdC,MAAAA,MAAM,EAAE,CAAC,CAJK;AAKd+B,MAAAA,IAAI,EAAE;AALQ,KAAlB;AAOA,SAAKH,UAAL,CAAgBnC,KAAhB,CAAsBiB,IAAtB,CAA2B,MAA3B,EArFJ,CAuFI;;AACA,SAAKsB,OAAL,GAAe,IAAIxE,MAAJ,CAAW,IAAX,EAAiB,GAAjB,EAAsB,GAAtB,EAA0B,QAA1B,EAAoC,KAAKgC,aAAzC,CAAf;AACA,SAAKyC,OAAL,GAAe,IAAIzE,MAAJ,CAAW,IAAX,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,aAA3B,EAA0C,KAAKgC,aAA/C,CAAf,CAzFJ,CA2FI;;AACA,SAAK0C,MAAL,GAAc,KAAKL,GAAL,CAASM,IAAT,CAAc,GAAd,EAAkB,MAAI,EAAtB,EAAyB,eAAzB,EAAyC;AAACC,MAAAA,QAAQ,EAAE,MAAX;AAAmBC,MAAAA,KAAK,EAAE;AAA1B,KAAzC,CAAd;AACA,SAAKH,MAAL,CAAYI,UAAZ,CAAuB,KAAvB,EA7FJ,CA+FI;;AACA,SAAKC,WAAL,GAAmB,IAAIzE,SAAJ,CAAc;AAAC8C,MAAAA,KAAK,EAAE,IAAR;AAAc4B,MAAAA,CAAC,EAAE,CAAjB;AAAoBC,MAAAA,CAAC,EAAC;AAAtB,KAAd,CAAnB;AACA,SAAKC,WAAL,GAAmB,IAAI5E,SAAJ,CAAc;AAAC8C,MAAAA,KAAK,EAAE,IAAR;AAAc4B,MAAAA,CAAC,EAAE,CAAjB;AAAoBC,MAAAA,CAAC,EAAC;AAAtB,KAAd,CAAnB;AAEA,SAAKE,eAAL,GAAuB,IAAI5E,QAAJ,CAAa,IAAb,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,WAA7B,EAA0C,GAA1C,CAAvB;AACA,SAAK6E,eAAL,GAAuB,IAAI7E,QAAJ,CAAa,IAAb,EAAmB,GAAnB,EAAwB,EAAxB,EAA4B,WAA5B,EAAyC,GAAzC,CAAvB;AAEA,SAAK8E,eAAL,GAAuB,IAAI9E,QAAJ,CAAa,IAAb,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,WAA7B,EAA0C,IAA1C,CAAvB;AACA,SAAK+E,eAAL,GAAuB,IAAI/E,QAAJ,CAAa,IAAb,EAAmB,GAAnB,EAAwB,EAAxB,EAA4B,WAA5B,EAAyC,IAAzC,CAAvB;AAEA,SAAKgF,eAAL,GAAuB,IAAIhF,QAAJ,CAAa,IAAb,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,WAA7B,EAA0C,IAA1C,CAAvB;AACA,SAAKiF,eAAL,GAAuB,IAAIjF,QAAJ,CAAa,IAAb,EAAmB,GAAnB,EAAwB,EAAxB,EAA4B,WAA5B,EAAyC,IAAzC,CAAvB;AAEA,SAAKkF,mBAAL,GAA2B,IAAIlF,QAAJ,CAAa,IAAb,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,eAA7B,EAA8C,IAA9C,CAA3B;AACA,SAAKmF,mBAAL,GAA2B,IAAInF,QAAJ,CAAa,IAAb,EAAmB,GAAnB,EAAwB,EAAxB,EAA4B,eAA5B,EAA6C,IAA7C,CAA3B,CA7GJ,CA+GI;AACA;;AACA,QAAIoF,GAAJ;AACA,QAAIC,YAAY,GAAK,KAAKC,aAAL,CAAmBrB,OAAnB,CAA2BsB,QAA3B,KAAsC,SAAvC,GAAmD,CAAnD,GAAqD,CAAzE;AACAF,IAAAA,YAAY,IAAM,KAAKC,aAAL,CAAmBpB,OAAnB,CAA2BqB,QAA3B,IAAqC,SAAtC,GAAkD,CAAlD,GAAoD,CAArE;AAEA,SAAKC,UAAL,GAAkB,IAAI9F,QAAJ,CAAa,IAAb,EAAkB;AAAC+F,MAAAA,YAAY,EAAE,KAAKH,aAAL,CAAmBrB,OAAnB,CAA2BsB,QAA1C;AAAoDnE,MAAAA,UAAU,EAAE,KAAKkE,aAAL,CAAmBrB,OAAnB,CAA2BtE,UAA3F;AAAuG+F,MAAAA,UAAU,EAAE,KAAKJ,aAAL,CAAmBrB,OAAnB,CAA2B0B;AAA9I,KAAlB,EAA4KN,YAA5K,EAAyL,CAAzL,CAAlB;AACA,SAAKO,UAAL,GAAkB,IAAIlG,QAAJ,CAAa,IAAb,EAAkB;AAAC+F,MAAAA,YAAY,EAAE,KAAKH,aAAL,CAAmBpB,OAAnB,CAA2BqB,QAA1C;AAAoDnE,MAAAA,UAAU,EAAE,KAAKkE,aAAL,CAAmBpB,OAAnB,CAA2BvE,UAA3F;AAAuG+F,MAAAA,UAAU,EAAE,KAAKJ,aAAL,CAAmBpB,OAAnB,CAA2ByB;AAA9I,KAAlB,EAA4KN,YAA5K,EAAyL,CAAzL,CAAlB;AAEA,SAAKQ,WAAL,GAAmB,KAAKC,OAAL,CAAahC,GAAb,CAAiBiC,KAAjB,EAAnB;AACA,SAAKC,aAAL,GAAqB,KAAKF,OAAL,CAAahC,GAAb,CAAiBiC,KAAjB,EAArB;AACA,SAAK1C,cAAL,GAAsB,KAAKyC,OAAL,CAAahC,GAAb,CAAiBiC,KAAjB,EAAtB,CA1HJ,CA4HI;;AACA,SAAKE,OAAL,GAAe,KAAKH,OAAL,CAAahC,GAAb,CAAiBiC,KAAjB,EAAf;AACA,SAAKE,OAAL,CAAanC,GAAb,CAAiB,KAAKG,OAAtB;AACA,SAAKgC,OAAL,CAAanC,GAAb,CAAiB,KAAKI,OAAtB,EA/HJ,CAiII;;AACA,SAAKD,OAAL,CAAaiC,YAAb,CAA0B,KAAK1B,WAA/B;AACA,SAAKN,OAAL,CAAagC,YAAb,CAA0B,KAAKvB,WAA/B;AAEA,SAAKV,OAAL,CAAakC,SAAb,CAAuB,CAAvB;AACA,SAAKjC,OAAL,CAAaiC,SAAb,CAAuB,CAAvB,EAtIJ,CAwII;;AACA,SAAKL,OAAL,CAAahC,GAAb,CAAiBsC,OAAjB,CAAyB,KAAKP,WAA9B,EAA0C,KAAKG,aAA/C,EAA6D,KAAK7E,YAAlE;AACA,SAAK2E,OAAL,CAAahC,GAAb,CAAiBsC,OAAjB,CAAyB,KAAKP,WAA9B,EAA0C,KAAKI,OAA/C,EAAuD,KAAK/D,SAA5D;AACA,SAAK4D,OAAL,CAAahC,GAAb,CAAiBsC,OAAjB,CAAyB,KAAK/C,cAA9B,EAA6C,KAAK4C,OAAlD,EAA0D,KAAK/C,kBAA/D,EA3IJ,CA6II;;AACA,SAAKmD,QAAL,GAAgB,KAAKP,OAAL,CAAahC,GAAb,CAAiBC,MAAjB,CAAwB,CAAC,EAAzB,EAA4B,GAA5B,EAAgC,OAAhC,CAAhB;AACA,SAAKsC,QAAL,CAAc7C,IAAd,CAAmB8C,SAAnB,GAA+B,IAA/B;AACA,SAAKC,SAAL,GAAiB,KAAKT,OAAL,CAAahC,GAAb,CAAiBC,MAAjB,CAAwB,GAAxB,EAA4B,GAA5B,EAAgC,OAAhC,CAAjB;AACA,SAAKwC,SAAL,CAAe/C,IAAf,CAAoB8C,SAApB,GAAgC,IAAhC;AACA,SAAKE,OAAL,GAAe,KAAKV,OAAL,CAAahC,GAAb,CAAiBC,MAAjB,CAAwB,GAAxB,EAA4B,CAAC,EAA7B,EAAgC,MAAhC,CAAf;AACA,SAAKyC,OAAL,CAAahD,IAAb,CAAkB8C,SAAlB,GAA8B,IAA9B;AACA,SAAKG,UAAL,GAAkB,KAAKX,OAAL,CAAahC,GAAb,CAAiBC,MAAjB,CAAwB,GAAxB,EAA4B,GAA5B,EAAgC,MAAhC,CAAlB;AACA,SAAK0C,UAAL,CAAgBjD,IAAhB,CAAqB8C,SAArB,GAAiC,IAAjC;AAEA,SAAKI,KAAL,GAAa,KAAKZ,OAAL,CAAahC,GAAb,CAAiB6C,WAAjB,EAAb;AACA,SAAKD,KAAL,CAAW5C,GAAX,CAAe,KAAKuC,QAApB;AACA,SAAKK,KAAL,CAAW5C,GAAX,CAAe,KAAKyC,SAApB;AACA,SAAKG,KAAL,CAAW5C,GAAX,CAAe,KAAK0C,OAApB;AACA,SAAKE,KAAL,CAAW5C,GAAX,CAAe,KAAK2C,UAApB,EA3JJ,CA6JI;;AACA,SAAKG,OAAL,GAAe,KAAKd,OAAL,CAAahC,GAAb,CAAiBC,MAAjB,CAAwB,GAAxB,EAA4B,GAA5B,EAAgC,MAAhC,CAAf;AACA,SAAK6C,OAAL,CAAaC,QAAb,CAAsB,CAAtB,EAAwB,GAAxB;AACA,SAAKD,OAAL,CAAarC,UAAb,CAAwB,KAAxB;AACA,SAAKqC,OAAL,CAAapD,IAAb,CAAkB8C,SAAlB,GAA8B,IAA9B;AAEA,SAAKR,OAAL,CAAahC,GAAb,CAAiBgD,QAAjB,CAA0B,KAAKF,OAA/B,EAAuC,KAAKX,OAA5C,EAnKJ,CAqKI;;AACA,SAAKH,OAAL,CAAahC,GAAb,CAAiBgD,QAAjB,CAA0B,KAAKjB,WAA/B,EAA2C,KAAKa,KAAhD;AACA,SAAKZ,OAAL,CAAahC,GAAb,CAAiBgD,QAAjB,CAA0B,KAAKJ,KAA/B,EAAqC,KAAKT,OAA1C;;AAEA,SAAKc,gBAAL,GAAwB,UAAS5E,MAAT,EAAgB;AAChC;AACA,UAAIf,UAAU,GAAG,IAAIzB,UAAJ,CAAe,IAAf,EAAoBwC,MAAM,CAAC6E,IAAP,EAApB,EACjB7E,MAAM,CAAC8E,IAAP,EADiB,EACH,YADG,EACU;AAACC,QAAAA,KAAK,EAAE/E;AAAR,OADV,CAAjB,CAFgC,CAIhC;;AACA,WAAK0D,WAAL,CAAiB/B,GAAjB,CAAqB1C,UAArB,EALgC,CAMhC;;AACAA,MAAAA,UAAU,CAAC+F,qBAAX,CAAiChF,MAAM,CAACiF,oBAAP,EAAjC,EAPgC,CAQhC;;AACAhG,MAAAA,UAAU,CAACiG,qBAAX,CAAiC,IAAjC;AACAjG,MAAAA,UAAU,CAAC+E,SAAX,CAAqB,CAArB;AAEP,KAZD;;AAaA,SAAKmB,sBAAL,GAA8B,UAASC,WAAT,EAAsBpF,MAAtB,EAA8BqF,QAA9B,EAAuC;AACjE;AACA,WAAKxB,aAAL,CAAmB1C,WAAnB,GAAiCC,OAAjC,CAAyCmC,UAAU,IAAI;AACnD,YAAIA,UAAU,CAAClE,QAAX,OAA0BW,MAA9B,EAAsC;AAClC,cAAIsF,YAAY,GAAG/B,UAAnB;AACH;AACJ,OAJD,EAFiE,CAOjE;;AACC,UAAK6B,WAAW,CAACG,gBAAZ,IAAgC,OAAOD,YAAP,IAAuB,WAAvD,IAAsE,CAACD,QAAQ,CAACG,QAAT,EAA5E,EAAiG;AAC9F;AACA,YAAIC,WAAW,GAAGzF,MAAM,CAAC6E,IAAP,EAAlB;AACA,YAAIa,WAAW,GAAG1F,MAAM,CAAC8E,IAAP,EAAlB,CAH8F,CAK9F;;AACA,YAAIa,aAAa,GAAG,IAAIlI,UAAJ,CAAe,IAAf,EAAoBgI,WAApB,EAAgCC,WAAhC,EAA4C,YAA5C,EAAyD;AAACX,UAAAA,KAAK,EAAE/E;AAAR,SAAzD,CAApB;AACA2F,QAAAA,aAAa,CAACC,UAAd;AACAP,QAAAA,QAAQ,CAACQ,aAAT;AACA,aAAKhC,aAAL,CAAmBlC,GAAnB,CAAuBgE,aAAvB;AAEF;AACL,KApBD;AAqBH,GAjOY;AAmOjBG,EAAAA,MAAM,EAAE,YACJ;AAEA;AACA,QAAI,CAAC,KAAKhE,OAAL,CAAaiE,OAAb,EAAL,EAA4B;AACxB,WAAK/D,MAAL,CAAYI,UAAZ,CAAuB,IAAvB;AACH,KAFD,MAGK,IAAG,CAAC,KAAKL,OAAL,CAAagE,OAAb,EAAJ,EAA2B;AAC5B,WAAK/D,MAAL,CAAYI,UAAZ,CAAuB,IAAvB;AACA,WAAKJ,MAAL,CAAYgE,OAAZ,CAAoB,cAApB;AACH,KATD,CAWA;;;AACA,SAAKC,gBAAL,GAAwB,KAAK5C,UAAL,CAAgB6C,iBAAhB,EAAxB;AACA,SAAKC,gBAAL,GAAwB,KAAK1C,UAAL,CAAgByC,iBAAhB,EAAxB;AACA,SAAKpE,OAAL,CAAasE,oBAAb,CAAkC,KAAKH,gBAAvC;AACA,SAAKlE,OAAL,CAAaqE,oBAAb,CAAkC,KAAKD,gBAAvC,EAfA,CAiBA;;AACA,QAAG,CAAC,KAAKrE,OAAL,CAAa5B,OAAb,EAAD,IAA2B,KAAK4B,OAAL,CAAaiE,OAAb,EAA3B,IAAqD,CAAC,KAAKjE,OAAL,CAAa3B,UAAb,EAAzD,EAAmF;AAC/E,WAAK2B,OAAL,CAAauE,iBAAb,CAA+B,KAAKJ,gBAApC;AACH;;AAED,QAAG,CAAC,KAAKlE,OAAL,CAAa7B,OAAb,EAAD,IAA2B,KAAK6B,OAAL,CAAagE,OAAb,EAA3B,IAAqD,CAAC,KAAKhE,OAAL,CAAa5B,UAAb,EAAzD,EAAmF;AAC/E,WAAK4B,OAAL,CAAasE,iBAAb,CAA+B,KAAKF,gBAApC;AACH,KAxBD,CA0BA;;;AACA,QAAIG,cAAc,GAAG,KAAKjD,UAAL,CAAgBkD,YAAhB,EAArB;AACA,QAAIC,cAAc,GAAG,KAAK/C,UAAL,CAAgB8C,YAAhB,EAArB,CA5BA,CA8BA;;AACA,QAAID,cAAc,CAACG,gBAAf,IAAmC,CAAC,KAAK9D,eAAL,CAAqB6C,QAArB,EAAxC,EAAwE;AACrE,WAAK7C,eAAL,CAAqBkD,aAArB;AACA,WAAKjB,gBAAL,CAAsB,KAAK9C,OAA3B;AACF;;AAAA;;AACA,QAAI0E,cAAc,CAACC,gBAAf,IAAmC,CAAC,KAAK7D,eAAL,CAAqB4C,QAArB,EAAxC,EAAwE;AACtE,WAAK5C,eAAL,CAAqBiD,aAArB;AACA,WAAKjB,gBAAL,CAAsB,KAAK7C,OAA3B;AACF;;AAAA,KAtCD,CAwCA;;AACA,QAAIuE,cAAc,CAACI,mBAAf,IAAsC,CAAC,KAAK3D,mBAAL,CAAyByC,QAAzB,EAA3C,EAA+E;AAC5E,WAAKzC,mBAAL,CAAyB8C,aAAzB;AACA,UAAI7E,aAAa,GAAG,IAAIlD,aAAJ,CAAkB,IAAlB,EAAuB,KAAKgE,OAAL,CAAa+C,IAAb,EAAvB,EAA2C,KAAK/C,OAAL,CAAagD,IAAb,EAA3C,EAA+D,eAA/D,EAA+E;AAACC,QAAAA,KAAK,EAAE,KAAKjD;AAAb,OAA/E,CAApB;AACA,UAAI6E,gBAAgB,GAAG,IAAI5I,WAAJ,CAAgB,IAAhB,EAAqB,KAAK+D,OAAL,CAAa+C,IAAb,EAArB,EAAyC,KAAK/C,OAAL,CAAagD,IAAb,EAAzC,EAA6D,YAA7D,EAA0E;AAACC,QAAAA,KAAK,EAAE,KAAKjD,OAAb;AAAsB8E,QAAAA,eAAe,EAAE5F,aAAvC;AAAsD6F,QAAAA,OAAO,EAAE;AAA/D,OAA1E,CAAvB;AACA,UAAIC,gBAAgB,GAAG,IAAI/I,WAAJ,CAAgB,IAAhB,EAAqB,KAAK+D,OAAL,CAAa+C,IAAb,EAArB,EAAyC,KAAK/C,OAAL,CAAagD,IAAb,EAAzC,EAA6D,YAA7D,EAA0E;AAACC,QAAAA,KAAK,EAAE,KAAKjD,OAAb;AAAsB8E,QAAAA,eAAe,EAAE5F,aAAvC;AAAsD6F,QAAAA,OAAO,EAAE;AAA/D,OAA1E,CAAvB;AACA,UAAIE,gBAAgB,GAAG,IAAIhJ,WAAJ,CAAgB,IAAhB,EAAqB,KAAK+D,OAAL,CAAa+C,IAAb,EAArB,EAAyC,KAAK/C,OAAL,CAAagD,IAAb,EAAzC,EAA6D,YAA7D,EAA0E;AAACC,QAAAA,KAAK,EAAE,KAAKjD,OAAb;AAAsB8E,QAAAA,eAAe,EAAE5F,aAAvC;AAAsD6F,QAAAA,OAAO,EAAE;AAA/D,OAA1E,CAAvB;AACA,UAAIG,gBAAgB,GAAG,IAAIjJ,WAAJ,CAAgB,IAAhB,EAAqB,KAAK+D,OAAL,CAAa+C,IAAb,EAArB,EAAyC,KAAK/C,OAAL,CAAagD,IAAb,EAAzC,EAA6D,YAA7D,EAA0E;AAACC,QAAAA,KAAK,EAAE,KAAKjD,OAAb;AAAsB8E,QAAAA,eAAe,EAAE5F,aAAvC;AAAsD6F,QAAAA,OAAO,EAAE;AAA/D,OAA1E,CAAvB;AACA,WAAK3F,cAAL,CAAoBS,GAApB,CAAwBgF,gBAAxB;AACA,WAAKzF,cAAL,CAAoBS,GAApB,CAAwBmF,gBAAxB;AACA,WAAK5F,cAAL,CAAoBS,GAApB,CAAwBoF,gBAAxB;AACA,WAAK7F,cAAL,CAAoBS,GAApB,CAAwBqF,gBAAxB;AACF;;AAAA;;AACD,QAAIR,cAAc,CAACE,mBAAf,IAAsC,CAAC,KAAK1D,mBAAL,CAAyBwC,QAAzB,EAA3C,EAA+E;AAC5E,WAAKxC,mBAAL,CAAyB6C,aAAzB;AACA,UAAI7E,aAAa,GAAG,IAAIlD,aAAJ,CAAkB,IAAlB,EAAuB,KAAKiE,OAAL,CAAa8C,IAAb,EAAvB,EAA2C,KAAK9C,OAAL,CAAa+C,IAAb,EAA3C,EAA+D,eAA/D,EAA+E;AAACC,QAAAA,KAAK,EAAE,KAAKhD;AAAb,OAA/E,CAApB;AACA,UAAI4E,gBAAgB,GAAG,IAAI5I,WAAJ,CAAgB,IAAhB,EAAqB,KAAKgE,OAAL,CAAa8C,IAAb,EAArB,EAAyC,KAAK9C,OAAL,CAAa+C,IAAb,EAAzC,EAA6D,YAA7D,EAA0E;AAACC,QAAAA,KAAK,EAAE,KAAKhD,OAAb;AAAsB6E,QAAAA,eAAe,EAAE5F,aAAvC;AAAsD6F,QAAAA,OAAO,EAAE;AAA/D,OAA1E,CAAvB;AACA,UAAIC,gBAAgB,GAAG,IAAI/I,WAAJ,CAAgB,IAAhB,EAAqB,KAAKgE,OAAL,CAAa8C,IAAb,EAArB,EAAyC,KAAK9C,OAAL,CAAa+C,IAAb,EAAzC,EAA6D,YAA7D,EAA0E;AAACC,QAAAA,KAAK,EAAE,KAAKhD,OAAb;AAAsB6E,QAAAA,eAAe,EAAE5F,aAAvC;AAAsD6F,QAAAA,OAAO,EAAE;AAA/D,OAA1E,CAAvB;AACA,UAAIE,gBAAgB,GAAG,IAAIhJ,WAAJ,CAAgB,IAAhB,EAAqB,KAAKgE,OAAL,CAAa8C,IAAb,EAArB,EAAyC,KAAK9C,OAAL,CAAa+C,IAAb,EAAzC,EAA6D,YAA7D,EAA0E;AAACC,QAAAA,KAAK,EAAE,KAAKhD,OAAb;AAAsB6E,QAAAA,eAAe,EAAE5F,aAAvC;AAAsD6F,QAAAA,OAAO,EAAE;AAA/D,OAA1E,CAAvB;AACA,UAAIG,gBAAgB,GAAG,IAAIjJ,WAAJ,CAAgB,IAAhB,EAAqB,KAAKgE,OAAL,CAAa8C,IAAb,EAArB,EAAyC,KAAK9C,OAAL,CAAa+C,IAAb,EAAzC,EAA6D,YAA7D,EAA0E;AAACC,QAAAA,KAAK,EAAE,KAAKhD,OAAb;AAAsB6E,QAAAA,eAAe,EAAE5F,aAAvC;AAAsD6F,QAAAA,OAAO,EAAE;AAA/D,OAA1E,CAAvB;AACA,WAAK3F,cAAL,CAAoBS,GAApB,CAAwBgF,gBAAxB;AACA,WAAKzF,cAAL,CAAoBS,GAApB,CAAwBmF,gBAAxB;AACA,WAAK5F,cAAL,CAAoBS,GAApB,CAAwBoF,gBAAxB;AACA,WAAK7F,cAAL,CAAoBS,GAApB,CAAwBqF,gBAAxB;AACF;;AAAA,KAhED,CAmEA;;AACA,QAAIV,cAAc,CAACW,WAAf,IAA8B,CAAC,KAAKnF,OAAL,CAAa3B,UAAb,EAA/B,IAA4D,CAAC,KAAK0C,eAAL,CAAqB2C,QAArB,EAAjE,EAAiG;AAC7F,WAAK3C,eAAL,CAAqBgD,aAArB;AACA,WAAK/D,OAAL,CAAaoF,KAAb;AACH;;AAAA;;AACD,QAAIV,cAAc,CAACS,WAAf,IAA8B,CAAC,KAAKlF,OAAL,CAAa5B,UAAb,EAA/B,IAA4D,CAAC,KAAK2C,eAAL,CAAqB0C,QAArB,EAAjE,EAAiG;AAC7F,WAAK1C,eAAL,CAAqB+C,aAArB;AACA,WAAK9D,OAAL,CAAamF,KAAb;AACH;;AAAA,KA3ED,CA6EA;AACA;;AACA,QAAIC,WAAW,GAAG,KAAKtD,aAAL,CAAmB1C,WAAnB,EAAlB;;AACA,QAAIgG,WAAW,CAACC,MAAZ,GAAmB,CAAvB,EAAyB;AACrBD,MAAAA,WAAW,CAAC/F,OAAZ,CAAoBmC,UAAU,IAAI;AAC9BA,QAAAA,UAAU,CAACuC,MAAX;AACH,OAFD;AAKH,KAtFD,CAwFA;;;AACA,SAAKX,sBAAL,CAA4BmB,cAA5B,EAA4C,KAAKxE,OAAjD,EAA0D,KAAKW,eAA/D;AACA,SAAK0C,sBAAL,CAA4BqB,cAA5B,EAA4C,KAAKzE,OAAjD,EAA0D,KAAKW,eAA/D;AACC;AA/TY,CAArB;AAsUA,eAAe1E,cAAf","sourcesContent":["import { Scene } from 'phaser';\r\nimport Player from \"../sprites/Player.js\";\r\nimport Controls from \"../controls/Controls.js\";\r\nimport MagicBlast from \"../sprites/MagicBlast.js\";\r\nimport SwordSwing from \"../sprites/SwordSwing.js\";\r\nimport Phaser from 'phaser';\r\nimport bckg from '../assets/bckg.png';\r\nimport HealthBar from \"../sprites/HealthBar.js\";\r\nimport CoolDown from \"../sprites/CoolDown.js\";\r\nimport LightningBolt from '../sprites/lightningBolt.js';\r\nimport LightningHB from '../sprites/lightningBoltHitbox.js';\r\nlet LocalGameScene = {\r\n    \r\n    \r\n    preload: function()\r\n        {\r\n            this.load.image('bckg', 'https://i.imgur.com/DMVC2IQ.png');\r\n            this.load.image('wall', 'https://i.imgur.com/av8q7Or.png');\r\n            this.load.image('vwall', 'https://i.imgur.com/UB2GdEL.png');\r\n            this.load.spritesheet('swordSwing', 'https://i.imgur.com/ULyXfap.png', {frameWidth: 500, frameHeight: 500});\r\n            this.load.image('swordCool', 'https://i.imgur.com/SnLjQdR.png');\r\n            this.load.image('blastCool', 'https://i.imgur.com/d4Enueh.png');\r\n            this.load.spritesheet('magicBlast', 'https://i.imgur.com/dEhNPqO.png', {frameWidth: 150, frameHeight: 150});\r\n            this.load.spritesheet('explosion','https://i.imgur.com/UHZiUKC.png', {frameWidth: 192, frameHeight: 192});\r\n            this.load.spritesheet('player', 'https://i.imgur.com/WlEeiKT.png', { frameWidth: 68, frameHeight: 68 });\r\n            this.load.spritesheet('otherPlayer','https://i.imgur.com/NYAJusD.png', { frameWidth: 68, frameHeight: 68 });\r\n            this.load.spritesheet('Background','https://i.imgur.com/8SzCikO.png', {frameWidth: 800, frameHeight: 600});\r\n            this.load.image('dodgeCool', 'https://i.imgur.com/mTklmkU.png');\r\n            this.load.spritesheet('lightningBolt', 'https://i.imgur.com/3MskIUy.png', {frameWidth: 16, frameHeight: 1000});\r\n            this.load.image('lightningCool', 'https://i.imgur.com/FVquIxw.png');\r\n        },\r\n\r\n    create: function()\r\n        {   \r\n            this.socket = io.connect(ENDPOINT, {reconnect: true});\r\n            this.socket.on(\"connection\", function (socket) {\r\n                console.log(\"connected to server\")\r\n            });\r\n            //Deflect Magic Blast with sword\r\n            this.deflectBlast = function(magicBlast,swordHitbox){\r\n                if(swordHitbox.inSwordSweep(magicBlast)){\r\n                    magicBlast.deflectFrom(swordHitbox.getOwner());\r\n                }\r\n\r\n            };\r\n            //console.log(this.props.returnMP);\r\n            this.explosionAnim = this.anims.create({\r\n                key: 'explode',\r\n                frames: this.anims.generateFrameNumbers('explosion',{ start: 1, end: 23}),\r\n                frameRate: 10,\r\n                repeat: -1\r\n            });\r\n            //Callback function for player/magicBlast Collision\r\n            this.playerHit = function(magicBlast,player){\r\n               //Check that the magicBlast is hitting the right player\r\n                if (magicBlast.getOwner()!==player){\r\n                    magicBlast.explode();\r\n                    //Check if player is stunned or dodging, if neither is true, play stun animation and calculate damage\r\n                    if (player.getStun() === false || player.getDodging() === false){\r\n                        player.playStun();\r\n                        //When the healthbar reaches 0, this evaluates to true\r\n                        if(player.getHealthBar().decrease(4)){\r\n                            player.gameOver();\r\n                            player.anims.play('explode', true);\r\n                            //Win Screen and link people back to main menu   \r\n                            //How could we access the react router DOM here?\r\n\r\n                            let timedEvent = player.scene.time.delayedCall(3000, player.scene.redirect, [], this);\r\n                        };\r\n                        //Knock opponent backwards\r\n                        player.knockBack(magicBlast);\r\n                    }\r\n                    \r\n                }\r\n            }\r\n            this.playerHitLightning = function(lightningBolt,player){\r\n                //Players cannot hit themselves with their own attacks\r\n                if(lightningBolt.getOwner()!==player){\r\n                    console.log(\"collision happening\");\r\n                    console.log(\"player.getStun() is: \" + player.getStun());\r\n                    console.log(\"player.getDodging() is: \" + player.getDodging());\r\n                    if (player.getStun() === false && player.getDodging() === false){\r\n                        console.log(\"collision happening here too\");\r\n                        player.playStun();\r\n\r\n                        if(player.getHealthBar().decrease(4)){\r\n                            player.gameOver();\r\n                            player.anims.play('explode', true);\r\n                            //Send players back to main menu\r\n                            let timedEvent = player.scene.time.delayedCall(3000, player.scene.redirect, [], this);\r\n                        }\r\n                        \r\n                        player.knockBack(lightningBolt);\r\n                      \r\n                        //Destroy the animation associated with these hitboxes\r\n                        lightningBolt.destroyAnimationSprite();\r\n\r\n                        //Find all other associated lightning bolt hitboxes and destroy them\r\n                        lightningBolt.scene.lightningBolts.getChildren().forEach(lightningBolt => {\r\n                            if (lightningBolt.getOwner() !== player) {\r\n                                lightningBolt.body.enable = false;\r\n                            }\r\n                    });\r\n                }\r\n            }\r\n            }\r\n            this.redirect = function(){\r\n                  window.location.replace('http://localhost:3000/');\r\n            }\r\n            //Glowing Background Sprite\r\n            this.background = this.add.sprite(400,300,'Background');\r\n            this.anims.create({\r\n                key: 'glow',\r\n                frames: this.anims.generateFrameNumbers('Background', { start: 1, end: 12 }),\r\n                frameRate: 4,\r\n                repeat: -1,\r\n                yoyo: true\r\n            });\r\n            this.background.anims.play('glow');\r\n\r\n            //Create Both Players\r\n            this.player1 = new Player(this, 400, 500,'player', this.explosionAnim);\r\n            this.player2 = new Player(this, 400, 100, 'otherPlayer', this.explosionAnim);\r\n            \r\n            //Create Win Text\r\n            this.youWin = this.add.text(150,300-60,'PLAYER2 WINS ',{fontSize: '70px', color: '#66FF00'});\r\n            this.youWin.setVisible(false);\r\n\r\n            //Create Health Bars\r\n            this.healthBarP1 = new HealthBar({scene: this, x: 0, y:584});\r\n            this.healthBarP2 = new HealthBar({scene: this, x: 0, y:0});\r\n\r\n            this.swordCoolDownP1 = new CoolDown(this, 230, 560, 'swordCool', 700);\r\n            this.swordCoolDownP2 = new CoolDown(this, 570, 40, 'swordCool', 700);\r\n           \r\n            this.magicCoolDownP1 = new CoolDown(this, 278, 560, 'blastCool', 1000);\r\n            this.magicCoolDownP2 = new CoolDown(this, 618, 40, 'blastCool', 1000);\r\n            \r\n            this.dodgeCoolDownP1 = new CoolDown(this, 326, 560, 'dodgeCool', 1000);\r\n            this.dodgeCoolDownP2 = new CoolDown(this, 665, 40, 'dodgeCool', 1000);\r\n\r\n            this.lightningCoolDownP1 = new CoolDown(this, 374, 560, 'lightningCool', 5000);\r\n            this.lightningCoolDownP2 = new CoolDown(this, 713, 40, 'lightningCool', 5000);\r\n\r\n            //Checks for the amount of gamepads connected to the phaser game, if the passed controls do not match the quantity of connected gamepads,\r\n            //the controls will be reset\r\n            let pad: Phaser.Input.Gamepad.Gamepad;\r\n            let gamePadCount = ((this.controlConfig.player1.Movement==='GamePad')? 1:0);\r\n            gamePadCount += ((this.controlConfig.player2.Movement=='GamePad')? 1:0);\r\n\r\n            this.controlsP1 = new Controls(this,{directionals: this.controlConfig.player1.Movement, magicBlast: this.controlConfig.player1.MagicBlast, swordSwing: this.controlConfig.player1.SwordSlash},gamePadCount,1);\r\n            this.controlsP2 = new Controls(this,{directionals: this.controlConfig.player2.Movement, magicBlast: this.controlConfig.player2.MagicBlast, swordSwing: this.controlConfig.player2.SwordSlash},gamePadCount,2);\r\n            \r\n            this.magicBlasts = this.physics.add.group();\r\n            this.swordHitBoxes = this.physics.add.group();\r\n            this.lightningBolts = this.physics.add.group();\r\n\r\n            //Create a sprite group in order to handle collisions\r\n            this.players = this.physics.add.group();\r\n            this.players.add(this.player1);\r\n            this.players.add(this.player2);\r\n\r\n            //Attach healthbars to the selected players\r\n            this.player1.setHealthBar(this.healthBarP1);\r\n            this.player2.setHealthBar(this.healthBarP2);\r\n\r\n            this.player1.setBounce(1);\r\n            this.player2.setBounce(1);\r\n\r\n            //Collision handling\r\n            this.physics.add.overlap(this.magicBlasts,this.swordHitBoxes,this.deflectBlast);\r\n            this.physics.add.overlap(this.magicBlasts,this.players,this.playerHit);\r\n            this.physics.add.overlap(this.lightningBolts,this.players,this.playerHitLightning);\r\n            \r\n            //4 walls on the outside\r\n            this.leftWall = this.physics.add.sprite(-55,300,'vwall');\r\n            this.leftWall.body.immovable = true;\r\n            this.rightWall = this.physics.add.sprite(855,300,'vwall');\r\n            this.rightWall.body.immovable = true;\r\n            this.topWall = this.physics.add.sprite(400,-55,'wall');\r\n            this.topWall.body.immovable = true;\r\n            this.bottomWall = this.physics.add.sprite(400,655,'wall');\r\n            this.bottomWall.body.immovable = true;\r\n            \r\n            this.walls = this.physics.add.staticGroup();\r\n            this.walls.add(this.leftWall);\r\n            this.walls.add(this.rightWall);\r\n            this.walls.add(this.topWall);\r\n            this.walls.add(this.bottomWall);\r\n            \r\n            //midline barrier wall\r\n            this.midWall = this.physics.add.sprite(400,300,'wall');\r\n            this.midWall.setScale(1,.08);\r\n            this.midWall.setVisible(false);\r\n            this.midWall.body.immovable = true;\r\n\r\n            this.physics.add.collider(this.midWall,this.players);\r\n            \r\n            //The order of the objects in collider matters, magicBlasts will bounce off the walls in this order\r\n            this.physics.add.collider(this.magicBlasts,this.walls);\r\n            this.physics.add.collider(this.walls,this.players);\r\n            \r\n            this.createMagicBlast = function(player){\r\n                    //Create magic Blast\r\n                    var magicBlast = new MagicBlast(this,player.getX(),\r\n                    player.getY(),'magicBlast',{owner: player});\r\n                    //Add to collision group\r\n                    this.magicBlasts.add(magicBlast);\r\n                    //Fire in direction of player orientation\r\n                    magicBlast.setMagicBlastVelocity(player.getOrientationVector());\r\n                    //Set magicBlast bounce\r\n                    magicBlast.setCollideWorldBounds(true);\r\n                    magicBlast.setBounce(1);\r\n                    \r\n            };\r\n            this.checkForSwingThenSwing = function(attackInput, player, coolDown){\r\n                //Check if swordSwing exists, and then check if it belongs to the player\r\n                this.swordHitBoxes.getChildren().forEach(swordSwing => {\r\n                    if (swordSwing.getOwner() === player) {\r\n                        let swordToCheck = swordSwing;\r\n                    }\r\n                });\r\n                //Check if sword swing can be activated\r\n                 if ((attackInput.swordSwingFiring && typeof swordToCheck == 'undefined' && !coolDown.isActive())){\r\n                    //Set sword swing spawn point\r\n                    let swordSpawnX = player.getX();\r\n                    let swordSpawnY = player.getY();\r\n                   \r\n                    //Create new sword swing\r\n                    let newSwordSwing = new SwordSwing(this,swordSpawnX,swordSpawnY,'swordSwing',{owner: player});\r\n                    newSwordSwing.swingSword();\r\n                    coolDown.startCoolDown();\r\n                    this.swordHitBoxes.add(newSwordSwing);\r\n                   \r\n                 }\r\n            };\r\n        },\r\n\r\n    update: function()\r\n        {\r\n        \r\n        //Checks if player 1 and player2 are alive, can events be used for this instead?\r\n        if (!this.player1.isAlive()){\r\n            this.youWin.setVisible(true);\r\n        }\r\n        else if(!this.player2.isAlive()){\r\n            this.youWin.setVisible(true);\r\n            this.youWin.setText('PLAYER1 WINS');\r\n        }\r\n\r\n        //Get Player input\r\n        this.movementVectorP1 = this.controlsP1.getMovementVector();\r\n        this.movementVectorP2 = this.controlsP2.getMovementVector();\r\n        this.player1.setOrientationVector(this.movementVectorP1);\r\n        this.player2.setOrientationVector(this.movementVectorP2);\r\n\r\n        //Check to make sure the player is not stunned, alive, and is not dodging\r\n        if(!this.player1.getStun() && this.player1.isAlive() && !this.player1.getDodging()){\r\n            this.player1.setPlayerVelocity(this.movementVectorP1);\r\n        }\r\n\r\n        if(!this.player2.getStun() && this.player2.isAlive() && !this.player2.getDodging()){\r\n            this.player2.setPlayerVelocity(this.movementVectorP2);\r\n        }\r\n\r\n        //Get attack inputs every update cycle\r\n        let attackInputsP1 = this.controlsP1.getMoveInput();\r\n        let attackInputsP2 = this.controlsP2.getMoveInput();\r\n\r\n        //Check for user firing magic blast\r\n        if (attackInputsP1.magicBlastFiring && !this.magicCoolDownP1.isActive()){\r\n           this.magicCoolDownP1.startCoolDown();\r\n           this.createMagicBlast(this.player1);\r\n        };\r\n         if (attackInputsP2.magicBlastFiring && !this.magicCoolDownP2.isActive()){\r\n           this.magicCoolDownP2.startCoolDown();\r\n           this.createMagicBlast(this.player2);\r\n        };\r\n\r\n        //Check for user firing Lightning Bolt\r\n        if (attackInputsP1.lightningBoltFiring && !this.lightningCoolDownP1.isActive()){\r\n           this.lightningCoolDownP1.startCoolDown();\r\n           let lightningBolt = new LightningBolt(this,this.player1.getX(),this.player1.getY(),'lightningBolt',{owner: this.player1});\r\n           let lightningBoltHB1 = new LightningHB(this,this.player1.getX(),this.player1.getY(),'magicBlast',{owner: this.player1, animationSprite: lightningBolt, Olength: 100});\r\n           let lightningBoltHB2 = new LightningHB(this,this.player1.getX(),this.player1.getY(),'magicBlast',{owner: this.player1, animationSprite: lightningBolt, Olength: 50});\r\n           let lightningBoltHB3 = new LightningHB(this,this.player1.getX(),this.player1.getY(),'magicBlast',{owner: this.player1, animationSprite: lightningBolt, Olength: 25});\r\n           let lightningBoltHB4 = new LightningHB(this,this.player1.getX(),this.player1.getY(),'magicBlast',{owner: this.player1, animationSprite: lightningBolt, Olength: 75});\r\n           this.lightningBolts.add(lightningBoltHB1);\r\n           this.lightningBolts.add(lightningBoltHB2);\r\n           this.lightningBolts.add(lightningBoltHB3);\r\n           this.lightningBolts.add(lightningBoltHB4);\r\n        };\r\n        if (attackInputsP2.lightningBoltFiring && !this.lightningCoolDownP2.isActive()){\r\n           this.lightningCoolDownP2.startCoolDown();\r\n           let lightningBolt = new LightningBolt(this,this.player2.getX(),this.player2.getY(),'lightningBolt',{owner: this.player2});\r\n           let lightningBoltHB1 = new LightningHB(this,this.player2.getX(),this.player2.getY(),'magicBlast',{owner: this.player2, animationSprite: lightningBolt, Olength: 100});\r\n           let lightningBoltHB2 = new LightningHB(this,this.player2.getX(),this.player2.getY(),'magicBlast',{owner: this.player2, animationSprite: lightningBolt, Olength: 50});\r\n           let lightningBoltHB3 = new LightningHB(this,this.player2.getX(),this.player2.getY(),'magicBlast',{owner: this.player2, animationSprite: lightningBolt, Olength: 25});\r\n           let lightningBoltHB4 = new LightningHB(this,this.player2.getX(),this.player2.getY(),'magicBlast',{owner: this.player2, animationSprite: lightningBolt, Olength: 75});\r\n           this.lightningBolts.add(lightningBoltHB1);\r\n           this.lightningBolts.add(lightningBoltHB2);\r\n           this.lightningBolts.add(lightningBoltHB3);\r\n           this.lightningBolts.add(lightningBoltHB4);\r\n        };\r\n\r\n       \r\n        //check for user dodging and check that they aren't already in dodge mode\r\n        if (attackInputsP1.dodgeFiring && !this.player1.getDodging() && !this.dodgeCoolDownP1.isActive()){\r\n            this.dodgeCoolDownP1.startCoolDown();\r\n            this.player1.dodge();\r\n        };\r\n        if (attackInputsP2.dodgeFiring && !this.player2.getDodging() && !this.dodgeCoolDownP2.isActive()){\r\n            this.dodgeCoolDownP2.startCoolDown();\r\n            this.player2.dodge();\r\n        };\r\n\r\n        //Check if sword swings exist, and update them as needed, \r\n        //this is the best way I can think of for tracking and following player position in the main loop\r\n        let swordSwings = this.swordHitBoxes.getChildren();\r\n        if (swordSwings.length>0){\r\n            swordSwings.forEach(swordSwing => {\r\n                swordSwing.update();\r\n            }\r\n            );\r\n            \r\n        }\r\n        \r\n        //Check for user swinging sword and then swing, starting the cooldown\r\n        this.checkForSwingThenSwing(attackInputsP1, this.player1, this.swordCoolDownP1);\r\n        this.checkForSwingThenSwing(attackInputsP2, this.player2, this.swordCoolDownP2);\r\n        }\r\n    \r\n    \r\n\r\n\r\n}\r\n\r\nexport default LocalGameScene;"]},"metadata":{},"sourceType":"module"}