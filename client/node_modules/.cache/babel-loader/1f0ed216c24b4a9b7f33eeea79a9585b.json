{"ast":null,"code":"import{Scene}from'phaser';import Player from\"../sprites/Player.js\";import Controls from\"../controls/Controls.js\";import MagicBlast from\"../sprites/MagicBlast.js\";import SwordSwing from\"../sprites/SwordSwing.js\";import Phaser from'phaser';import bckg from'../assets/bckg.png';import HealthBar from\"../sprites/HealthBar.js\";import CoolDown from\"../sprites/CoolDown.js\";import LightningBolt from'../sprites/lightningBolt.js';import LightningHB from'../sprites/lightningBoltHitbox.js';//import proxy from 'socket.io-proxy';\nvar LocalGameScene={preload:function preload(){//I load the images from my publicly hosted imgur\n//because the file system seems to break for some reason when this is run in IonPhaser\n//(Which is inside a React application)\n//I make these drawings/spritesheets in piskel\nthis.load.image('bckg','https://i.imgur.com/DMVC2IQ.png');this.load.image('wall','https://i.imgur.com/av8q7Or.png');this.load.image('vwall','https://i.imgur.com/UB2GdEL.png');this.load.spritesheet('swordSwing','https://i.imgur.com/ULyXfap.png',{frameWidth:500,frameHeight:500});this.load.image('swordCool','https://i.imgur.com/SnLjQdR.png');this.load.image('blastCool','https://i.imgur.com/d4Enueh.png');this.load.spritesheet('magicBlast','https://i.imgur.com/dEhNPqO.png',{frameWidth:150,frameHeight:150});this.load.spritesheet('explosion','https://i.imgur.com/UHZiUKC.png',{frameWidth:192,frameHeight:192});this.load.spritesheet('player','https://i.imgur.com/WlEeiKT.png',{frameWidth:68,frameHeight:68});this.load.spritesheet('otherPlayer','https://i.imgur.com/NYAJusD.png',{frameWidth:68,frameHeight:68});this.load.spritesheet('Background','https://i.imgur.com/8SzCikO.png',{frameWidth:800,frameHeight:600});this.load.image('dodgeCool','https://i.imgur.com/mTklmkU.png');this.load.spritesheet('lightningBolt','https://i.imgur.com/3MskIUy.png',{frameWidth:16,frameHeight:1000});this.load.image('lightningCool','https://i.imgur.com/FVquIxw.png');},create:function create(){/*I define some of the functions ex:this.deflectBlast\r\n           this way instead of outside of the preload/create/update\r\n           because that is the way they don't throw an error while using IonPhaser,\r\n           Perhaps they can be moved to another file and imported in*/ //Deflect Magic Blast with sword\nthis.deflectBlast=function(magicBlast,swordHitbox){if(swordHitbox.inSwordSweep(magicBlast)){magicBlast.deflectFrom(swordHitbox.getOwner());}};//Create explosion animation\nthis.explosionAnim=this.anims.create({key:'explode',frames:this.anims.generateFrameNumbers('explosion',{start:1,end:23}),frameRate:10,repeat:-1});//Callback function for player/magicBlast Collision\nthis.playerHit=function(magicBlast,player){//Check that the magicBlast is hitting the right player\nif(magicBlast.getOwner()!==player){magicBlast.explode();//Check if player is stunned or dodging, if neither is true, play stun animation and calculate damage\nif(player.getStun()===false||player.getDodging()===false){player.playStun();//When the healthbar reaches 0, this evaluates to true\nif(player.getHealthBar().decrease(4)){//This function \nplayer.gameOver();player.anims.play('explode',true);//Win Screen and link people back to main menu   \n//How could we access the react router DOM here?\nvar timedEvent=player.scene.time.delayedCall(3000,player.scene.redirect,[],this);};//Knock opponent backwards\nplayer.knockBack(magicBlast);}}};//Collision between lightning and player\nthis.playerHitLightning=function(lightningBolt,player){//Players cannot hit themselves with their own attacks\nif(lightningBolt.getOwner()!==player){if(player.getStun()===false&&player.getDodging()===false){//Stun is started for player\nplayer.playStun();if(player.getHealthBar().decrease(4)){//Player dies\nplayer.gameOver();player.anims.play('explode',true);//Send players back to main menu\nvar timedEvent=player.scene.time.delayedCall(3000,player.scene.redirect,[],this);}player.knockBack(lightningBolt);//Destroy the animation associated with these hitboxes\nlightningBolt.destroyAnimationSprite();//Find all other associated lightning bolt hitboxes and destroy them\nlightningBolt.scene.lightningBolts.getChildren().forEach(function(lightningBolt){if(lightningBolt.getOwner()!==player){lightningBolt.body.enable=false;}});}}};//Callback for sending user back to main page when game ends\nthis.redirect=function(){window.location.replace('http://localhost:3000/');};//Glowing Background Sprite\nthis.background=this.add.sprite(400,300,'Background');this.anims.create({key:'glow',frames:this.anims.generateFrameNumbers('Background',{start:1,end:12}),frameRate:4,repeat:-1,yoyo:true});this.background.anims.play('glow');//Refactoring idea: make every variable passed into constructors \n//descriptive javascript properties for readability\n//Create Both Players\nthis.player1=new Player(this,400,500,'player',this.explosionAnim);this.player2=new Player(this,400,100,'otherPlayer',this.explosionAnim);//Create Win Text\nthis.youWin=this.add.text(150,300-60,'PLAYER2 WINS ',{fontSize:'70px',color:'#66FF00'});this.youWin.setVisible(false);//Create Health Bars\nthis.healthBarP1=new HealthBar({scene:this,x:0,y:584});this.healthBarP2=new HealthBar({scene:this,x:0,y:0});//Create Cooldowns: Note, final variable passed in is a timer, it sets how long the cooldown lasts in milliseconds            \nthis.swordCoolDownP1=new CoolDown(this,230,560,'swordCool',700);this.swordCoolDownP2=new CoolDown(this,570,40,'swordCool',700);this.magicCoolDownP1=new CoolDown(this,278,560,'blastCool',1000);this.magicCoolDownP2=new CoolDown(this,618,40,'blastCool',1000);this.dodgeCoolDownP1=new CoolDown(this,326,560,'dodgeCool',1000);this.dodgeCoolDownP2=new CoolDown(this,665,40,'dodgeCool',1000);this.lightningCoolDownP1=new CoolDown(this,374,560,'lightningCool',5000);this.lightningCoolDownP2=new CoolDown(this,713,40,'lightningCool',5000);//Checks for the amount of gamepads connected to the phaser game, if the passed controls do not match the quantity of connected gamepads,\n//the controls will be reset, this can be fixed later\nvar pad;var gamePadCount=this.controlConfig.player1.Movement==='GamePad'?1:0;gamePadCount+=this.controlConfig.player2.Movement=='GamePad'?1:0;//Create controls object which can be accessed in the update logic for game object interactions\nthis.controlsP1=new Controls(this,{directionals:this.controlConfig.player1.Movement,magicBlast:this.controlConfig.player1.MagicBlast,swordSwing:this.controlConfig.player1.SwordSlash},gamePadCount,1);this.controlsP2=new Controls(this,{directionals:this.controlConfig.player2.Movement,magicBlast:this.controlConfig.player2.MagicBlast,swordSwing:this.controlConfig.player2.SwordSlash},gamePadCount,2);//These phaser groups allow for collisino detection of classes of objects at scale, for example all magic blasts have the same collision callack that is called\nthis.magicBlasts=this.physics.add.group();this.swordHitBoxes=this.physics.add.group();this.lightningBolts=this.physics.add.group();//Create a sprite group in order to handle collisions\nthis.players=this.physics.add.group();this.players.add(this.player1);this.players.add(this.player2);//Attach healthbars to the selected players, this is so the game knows whose healthbar is whose\nthis.player1.setHealthBar(this.healthBarP1);this.player2.setHealthBar(this.healthBarP2);//phaser has a prebuilt bounce physics setup, any value greater than 1 causes an exponential growth in object velocity as it multiplies each bounce\nthis.player1.setBounce(1);this.player2.setBounce(1);//Collision handling for object groups (group1, group2, callback)\nthis.physics.add.overlap(this.magicBlasts,this.swordHitBoxes,this.deflectBlast);this.physics.add.overlap(this.magicBlasts,this.players,this.playerHit);this.physics.add.overlap(this.lightningBolts,this.players,this.playerHitLightning);//4 walls on the outside\nthis.leftWall=this.physics.add.sprite(-55,300,'vwall');//Set immovable allows the objects to not move on collision\nthis.leftWall.body.immovable=true;this.rightWall=this.physics.add.sprite(855,300,'vwall');this.rightWall.body.immovable=true;this.topWall=this.physics.add.sprite(400,-55,'wall');this.topWall.body.immovable=true;this.bottomWall=this.physics.add.sprite(400,655,'wall');this.bottomWall.body.immovable=true;//staticGroup is a different type of group that doesn't move I believe\nthis.walls=this.physics.add.staticGroup();this.walls.add(this.leftWall);this.walls.add(this.rightWall);this.walls.add(this.topWall);this.walls.add(this.bottomWall);//midline barrier wall\nthis.midWall=this.physics.add.sprite(400,300,'wall');this.midWall.setScale(1,.08);this.midWall.setVisible(false);this.midWall.body.immovable=true;this.physics.add.collider(this.midWall,this.players);//The order of the objects in the collider matters, magicBlasts \n//will only bounce off the walls if this.magicBlasts is the first argument\nthis.physics.add.collider(this.magicBlasts,this.walls);this.physics.add.collider(this.walls,this.players);this.createMagicBlast=function(player){//Create magic Blast\nvar magicBlast=new MagicBlast(this,player.getX(),player.getY(),'magicBlast',{owner:player});//Add to collision group\nthis.magicBlasts.add(magicBlast);//Fire in direction of player orientation\nmagicBlast.setMagicBlastVelocity(player.getOrientationVector());//Set magicBlast bounce\nmagicBlast.setCollideWorldBounds(true);magicBlast.setBounce(1);};this.checkForSwingThenSwing=function(attackInput,player,coolDown){//Check if swordSwing exists, and then check if it belongs to the player\nthis.swordHitBoxes.getChildren().forEach(function(swordSwing){if(swordSwing.getOwner()===player){var _swordToCheck=swordSwing;}});//Check if sword swing can be activated\n//if the attack button is pressed,\n//and there is no sword currently active on the player,\n//and the cooldown is no active, then the sword can be swung\nif(attackInput.swordSwingFiring&&typeof swordToCheck=='undefined'&&!coolDown.isActive()){//Set sword swing spawn point\nvar swordSpawnX=player.getX();var swordSpawnY=player.getY();//Create new sword swing\nvar newSwordSwing=new SwordSwing(this,swordSpawnX,swordSpawnY,'swordSwing',{owner:player});newSwordSwing.swingSword();coolDown.startCoolDown();this.swordHitBoxes.add(newSwordSwing);}};},update:function update(){//Checks if player 1 or player2 have lost, can events be used for this instead?\nif(!this.player1.isAlive()){this.youWin.setVisible(true);this.youWin.setText('PLAYER2 WINS');}else if(!this.player2.isAlive()){this.youWin.setVisible(true);this.youWin.setText('PLAYER1 WINS');}//Get Player input\nthis.movementVectorP1=this.controlsP1.getMovementVector();this.movementVectorP2=this.controlsP2.getMovementVector();//Set the orientation of the player\nthis.player1.setOrientationVector(this.movementVectorP1);this.player2.setOrientationVector(this.movementVectorP2);//Check to make sure the player is not stunned, alive, and is not dodging\nif(!this.player1.getStun()&&this.player1.isAlive()&&!this.player1.getDodging()){this.player1.setPlayerVelocity(this.movementVectorP1);}if(!this.player2.getStun()&&this.player2.isAlive()&&!this.player2.getDodging()){this.player2.setPlayerVelocity(this.movementVectorP2);}//Get attack inputs every update cycle\nvar attackInputsP1=this.controlsP1.getMoveInput();var attackInputsP2=this.controlsP2.getMoveInput();//Check for user firing magic blast and that the cooldown is not active\nif(attackInputsP1.magicBlastFiring&&!this.magicCoolDownP1.isActive()){this.magicCoolDownP1.startCoolDown();this.createMagicBlast(this.player1);};if(attackInputsP2.magicBlastFiring&&!this.magicCoolDownP2.isActive()){this.magicCoolDownP2.startCoolDown();this.createMagicBlast(this.player2);};//Check for user firing Lightning Bolt\nif(attackInputsP1.lightningBoltFiring&&!this.lightningCoolDownP1.isActive()){this.lightningCoolDownP1.startCoolDown();//create lightning Bolt animation object\nvar lightningBolt=new LightningBolt(this,this.player1.getX(),this.player1.getY(),'lightningBolt',{owner:this.player1});//Creates 4 lightning bolt hitboxes which are the WIDTH of the lightning bolt, they travel \n//at a speed so fast that it mimics a diagonal hitbox. This normally\n//can't be created using Arcade physics and its Axis aligned bounding boxes;\nvar lightningBoltHB1=new LightningHB(this,this.player1.getX(),this.player1.getY(),'magicBlast',{owner:this.player1,animationSprite:lightningBolt,Olength:100});var lightningBoltHB2=new LightningHB(this,this.player1.getX(),this.player1.getY(),'magicBlast',{owner:this.player1,animationSprite:lightningBolt,Olength:50});var lightningBoltHB3=new LightningHB(this,this.player1.getX(),this.player1.getY(),'magicBlast',{owner:this.player1,animationSprite:lightningBolt,Olength:25});var lightningBoltHB4=new LightningHB(this,this.player1.getX(),this.player1.getY(),'magicBlast',{owner:this.player1,animationSprite:lightningBolt,Olength:75});//Add to collision group\nthis.lightningBolts.add(lightningBoltHB1);this.lightningBolts.add(lightningBoltHB2);this.lightningBolts.add(lightningBoltHB3);this.lightningBolts.add(lightningBoltHB4);};if(attackInputsP2.lightningBoltFiring&&!this.lightningCoolDownP2.isActive()){this.lightningCoolDownP2.startCoolDown();var _lightningBolt=new LightningBolt(this,this.player2.getX(),this.player2.getY(),'lightningBolt',{owner:this.player2});var _lightningBoltHB=new LightningHB(this,this.player2.getX(),this.player2.getY(),'magicBlast',{owner:this.player2,animationSprite:_lightningBolt,Olength:100});var _lightningBoltHB2=new LightningHB(this,this.player2.getX(),this.player2.getY(),'magicBlast',{owner:this.player2,animationSprite:_lightningBolt,Olength:50});var _lightningBoltHB3=new LightningHB(this,this.player2.getX(),this.player2.getY(),'magicBlast',{owner:this.player2,animationSprite:_lightningBolt,Olength:25});var _lightningBoltHB4=new LightningHB(this,this.player2.getX(),this.player2.getY(),'magicBlast',{owner:this.player2,animationSprite:_lightningBolt,Olength:75});this.lightningBolts.add(_lightningBoltHB);this.lightningBolts.add(_lightningBoltHB2);this.lightningBolts.add(_lightningBoltHB3);this.lightningBolts.add(_lightningBoltHB4);};//Check for user dodging and check that they aren't already in dodge mode\nif(attackInputsP1.dodgeFiring&&!this.player1.getDodging()&&!this.dodgeCoolDownP1.isActive()){this.dodgeCoolDownP1.startCoolDown();this.player1.dodge();};if(attackInputsP2.dodgeFiring&&!this.player2.getDodging()&&!this.dodgeCoolDownP2.isActive()){this.dodgeCoolDownP2.startCoolDown();this.player2.dodge();};//Check if sword swings exist, and update them as needed, \n//this is the best way I can think of for tracking and following player position in the main loop\n//Perhaps there's a better way? Without it \n//the sword is stuck in place, perhaps it can be attached to a reference to player position?\n//I took a look at an update pattern for a situation like this\nvar swordSwings=this.swordHitBoxes.getChildren();if(swordSwings.length>0){swordSwings.forEach(function(swordSwing){swordSwing.update();});}//Check for user swinging sword and then swing, starting the cooldown\n//I think functions are supposed to do only one thing, I'll fix this later\nthis.checkForSwingThenSwing(attackInputsP1,this.player1,this.swordCoolDownP1);this.checkForSwingThenSwing(attackInputsP2,this.player2,this.swordCoolDownP2);}};export default LocalGameScene;","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/src/phaser/scenes/LocalGameScene.js"],"names":["Scene","Player","Controls","MagicBlast","SwordSwing","Phaser","bckg","HealthBar","CoolDown","LightningBolt","LightningHB","LocalGameScene","preload","load","image","spritesheet","frameWidth","frameHeight","create","deflectBlast","magicBlast","swordHitbox","inSwordSweep","deflectFrom","getOwner","explosionAnim","anims","key","frames","generateFrameNumbers","start","end","frameRate","repeat","playerHit","player","explode","getStun","getDodging","playStun","getHealthBar","decrease","gameOver","play","timedEvent","scene","time","delayedCall","redirect","knockBack","playerHitLightning","lightningBolt","destroyAnimationSprite","lightningBolts","getChildren","forEach","body","enable","window","location","replace","background","add","sprite","yoyo","player1","player2","youWin","text","fontSize","color","setVisible","healthBarP1","x","y","healthBarP2","swordCoolDownP1","swordCoolDownP2","magicCoolDownP1","magicCoolDownP2","dodgeCoolDownP1","dodgeCoolDownP2","lightningCoolDownP1","lightningCoolDownP2","pad","gamePadCount","controlConfig","Movement","controlsP1","directionals","swordSwing","SwordSlash","controlsP2","magicBlasts","physics","group","swordHitBoxes","players","setHealthBar","setBounce","overlap","leftWall","immovable","rightWall","topWall","bottomWall","walls","staticGroup","midWall","setScale","collider","createMagicBlast","getX","getY","owner","setMagicBlastVelocity","getOrientationVector","setCollideWorldBounds","checkForSwingThenSwing","attackInput","coolDown","swordToCheck","swordSwingFiring","isActive","swordSpawnX","swordSpawnY","newSwordSwing","swingSword","startCoolDown","update","isAlive","setText","movementVectorP1","getMovementVector","movementVectorP2","setOrientationVector","setPlayerVelocity","attackInputsP1","getMoveInput","attackInputsP2","magicBlastFiring","lightningBoltFiring","lightningBoltHB1","animationSprite","Olength","lightningBoltHB2","lightningBoltHB3","lightningBoltHB4","dodgeFiring","dodge","swordSwings","length"],"mappings":"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","sourcesContent":["import { Scene } from 'phaser';\r\nimport Player from \"../sprites/Player.js\";\r\nimport Controls from \"../controls/Controls.js\";\r\nimport MagicBlast from \"../sprites/MagicBlast.js\";\r\nimport SwordSwing from \"../sprites/SwordSwing.js\";\r\nimport Phaser from 'phaser';\r\nimport bckg from '../assets/bckg.png';\r\nimport HealthBar from \"../sprites/HealthBar.js\";\r\nimport CoolDown from \"../sprites/CoolDown.js\";\r\nimport LightningBolt from '../sprites/lightningBolt.js';\r\nimport LightningHB from '../sprites/lightningBoltHitbox.js';\r\n\r\n//import proxy from 'socket.io-proxy';\r\nlet LocalGameScene = {\r\n    \r\n    \r\n    preload: function()\r\n        {\r\n            //I load the images from my publicly hosted imgur\r\n            //because the file system seems to break for some reason when this is run in IonPhaser\r\n            //(Which is inside a React application)\r\n            //I make these drawings/spritesheets in piskel\r\n            this.load.image('bckg', 'https://i.imgur.com/DMVC2IQ.png');\r\n            this.load.image('wall', 'https://i.imgur.com/av8q7Or.png');\r\n            this.load.image('vwall', 'https://i.imgur.com/UB2GdEL.png');\r\n            this.load.spritesheet('swordSwing', 'https://i.imgur.com/ULyXfap.png', {frameWidth: 500, frameHeight: 500});\r\n            this.load.image('swordCool', 'https://i.imgur.com/SnLjQdR.png');\r\n            this.load.image('blastCool', 'https://i.imgur.com/d4Enueh.png');\r\n            this.load.spritesheet('magicBlast', 'https://i.imgur.com/dEhNPqO.png', {frameWidth: 150, frameHeight: 150});\r\n            this.load.spritesheet('explosion','https://i.imgur.com/UHZiUKC.png', {frameWidth: 192, frameHeight: 192});\r\n            this.load.spritesheet('player', 'https://i.imgur.com/WlEeiKT.png', { frameWidth: 68, frameHeight: 68 });\r\n            this.load.spritesheet('otherPlayer','https://i.imgur.com/NYAJusD.png', { frameWidth: 68, frameHeight: 68 });\r\n            this.load.spritesheet('Background','https://i.imgur.com/8SzCikO.png', {frameWidth: 800, frameHeight: 600});\r\n            this.load.image('dodgeCool', 'https://i.imgur.com/mTklmkU.png');\r\n            this.load.spritesheet('lightningBolt', 'https://i.imgur.com/3MskIUy.png', {frameWidth: 16, frameHeight: 1000});\r\n            this.load.image('lightningCool', 'https://i.imgur.com/FVquIxw.png');\r\n        },\r\n\r\n    create: function()\r\n        {   \r\n           \r\n           \r\n           /*I define some of the functions ex:this.deflectBlast\r\n           this way instead of outside of the preload/create/update\r\n           because that is the way they don't throw an error while using IonPhaser,\r\n           Perhaps they can be moved to another file and imported in*/\r\n\r\n          //Deflect Magic Blast with sword\r\n            this.deflectBlast = function(magicBlast,swordHitbox){\r\n                if(swordHitbox.inSwordSweep(magicBlast)){\r\n                    magicBlast.deflectFrom(swordHitbox.getOwner());\r\n                }\r\n            };\r\n           //Create explosion animation\r\n            this.explosionAnim = this.anims.create({\r\n                key: 'explode',\r\n                frames: this.anims.generateFrameNumbers('explosion',{ start: 1, end: 23}),\r\n                frameRate: 10,\r\n                repeat: -1\r\n            });\r\n            //Callback function for player/magicBlast Collision\r\n            this.playerHit = function(magicBlast,player){\r\n               //Check that the magicBlast is hitting the right player\r\n                if (magicBlast.getOwner()!==player){\r\n                    magicBlast.explode();\r\n                    //Check if player is stunned or dodging, if neither is true, play stun animation and calculate damage\r\n                    if (player.getStun() === false || player.getDodging() === false){\r\n                        player.playStun();\r\n                        //When the healthbar reaches 0, this evaluates to true\r\n                        if(player.getHealthBar().decrease(4)){\r\n                            //This function \r\n                            player.gameOver();\r\n                            player.anims.play('explode', true);\r\n                            //Win Screen and link people back to main menu   \r\n                            //How could we access the react router DOM here?\r\n\r\n                            let timedEvent = player.scene.time.delayedCall(3000, player.scene.redirect, [], this);\r\n                        };\r\n                        //Knock opponent backwards\r\n                        player.knockBack(magicBlast);\r\n                    }\r\n                    \r\n                }\r\n            }\r\n            \r\n            //Collision between lightning and player\r\n            this.playerHitLightning = function(lightningBolt,player){\r\n                //Players cannot hit themselves with their own attacks\r\n                if(lightningBolt.getOwner()!==player){\r\n                   \r\n                    if (player.getStun() === false && player.getDodging() === false){\r\n                        \r\n                        //Stun is started for player\r\n                        player.playStun();\r\n\r\n                        if(player.getHealthBar().decrease(4)){\r\n                            //Player dies\r\n                            player.gameOver();\r\n                            player.anims.play('explode', true);\r\n                            //Send players back to main menu\r\n                            let timedEvent = player.scene.time.delayedCall(3000, player.scene.redirect, [], this);\r\n                        }\r\n                        \r\n                        player.knockBack(lightningBolt);\r\n                      \r\n                        //Destroy the animation associated with these hitboxes\r\n                        lightningBolt.destroyAnimationSprite();\r\n\r\n                        //Find all other associated lightning bolt hitboxes and destroy them\r\n                        lightningBolt.scene.lightningBolts.getChildren().forEach(lightningBolt => {\r\n                            if (lightningBolt.getOwner() !== player) {\r\n                                lightningBolt.body.enable = false;\r\n                            }\r\n                    });\r\n                }\r\n            }\r\n            }\r\n            //Callback for sending user back to main page when game ends\r\n            this.redirect = function(){\r\n                  window.location.replace('http://localhost:3000/');\r\n            }\r\n            //Glowing Background Sprite\r\n            this.background = this.add.sprite(400,300,'Background');\r\n            this.anims.create({\r\n                key: 'glow',\r\n                frames: this.anims.generateFrameNumbers('Background', { start: 1, end: 12 }),\r\n                frameRate: 4,\r\n                repeat: -1,\r\n                yoyo: true\r\n            });\r\n            this.background.anims.play('glow');\r\n            \r\n            //Refactoring idea: make every variable passed into constructors \r\n            //descriptive javascript properties for readability\r\n\r\n            //Create Both Players\r\n            this.player1 = new Player(this, 400, 500,'player', this.explosionAnim);\r\n            this.player2 = new Player(this, 400, 100, 'otherPlayer', this.explosionAnim);\r\n            \r\n            //Create Win Text\r\n            this.youWin = this.add.text(150,300-60,'PLAYER2 WINS ',{fontSize: '70px', color: '#66FF00'});\r\n            this.youWin.setVisible(false);\r\n\r\n            //Create Health Bars\r\n            this.healthBarP1 = new HealthBar({scene: this, x: 0, y:584});\r\n            this.healthBarP2 = new HealthBar({scene: this, x: 0, y:0});\r\n\r\n            //Create Cooldowns: Note, final variable passed in is a timer, it sets how long the cooldown lasts in milliseconds            \r\n            this.swordCoolDownP1 = new CoolDown(this, 230, 560, 'swordCool', 700);\r\n            this.swordCoolDownP2 = new CoolDown(this, 570, 40, 'swordCool', 700);\r\n           \r\n            this.magicCoolDownP1 = new CoolDown(this, 278, 560, 'blastCool', 1000);\r\n            this.magicCoolDownP2 = new CoolDown(this, 618, 40, 'blastCool', 1000);\r\n            \r\n            this.dodgeCoolDownP1 = new CoolDown(this, 326, 560, 'dodgeCool', 1000);\r\n            this.dodgeCoolDownP2 = new CoolDown(this, 665, 40, 'dodgeCool', 1000);\r\n\r\n            this.lightningCoolDownP1 = new CoolDown(this, 374, 560, 'lightningCool', 5000);\r\n            this.lightningCoolDownP2 = new CoolDown(this, 713, 40, 'lightningCool', 5000);\r\n\r\n            //Checks for the amount of gamepads connected to the phaser game, if the passed controls do not match the quantity of connected gamepads,\r\n            //the controls will be reset, this can be fixed later\r\n            let pad: Phaser.Input.Gamepad.Gamepad;\r\n            let gamePadCount = ((this.controlConfig.player1.Movement==='GamePad')? 1:0);\r\n            gamePadCount += ((this.controlConfig.player2.Movement=='GamePad')? 1:0);\r\n\r\n            //Create controls object which can be accessed in the update logic for game object interactions\r\n            this.controlsP1 = new Controls(this,{directionals: this.controlConfig.player1.Movement, magicBlast: this.controlConfig.player1.MagicBlast, swordSwing: this.controlConfig.player1.SwordSlash},gamePadCount,1);\r\n            this.controlsP2 = new Controls(this,{directionals: this.controlConfig.player2.Movement, magicBlast: this.controlConfig.player2.MagicBlast, swordSwing: this.controlConfig.player2.SwordSlash},gamePadCount,2);\r\n            \r\n            //These phaser groups allow for collisino detection of classes of objects at scale, for example all magic blasts have the same collision callack that is called\r\n            this.magicBlasts = this.physics.add.group();\r\n            this.swordHitBoxes = this.physics.add.group();\r\n            this.lightningBolts = this.physics.add.group();\r\n\r\n            //Create a sprite group in order to handle collisions\r\n            this.players = this.physics.add.group();\r\n            this.players.add(this.player1);\r\n            this.players.add(this.player2);\r\n\r\n            //Attach healthbars to the selected players, this is so the game knows whose healthbar is whose\r\n            this.player1.setHealthBar(this.healthBarP1);\r\n            this.player2.setHealthBar(this.healthBarP2);\r\n\r\n            //phaser has a prebuilt bounce physics setup, any value greater than 1 causes an exponential growth in object velocity as it multiplies each bounce\r\n            this.player1.setBounce(1);\r\n            this.player2.setBounce(1);\r\n\r\n            //Collision handling for object groups (group1, group2, callback)\r\n            this.physics.add.overlap(this.magicBlasts,this.swordHitBoxes,this.deflectBlast);\r\n            this.physics.add.overlap(this.magicBlasts,this.players,this.playerHit);\r\n            this.physics.add.overlap(this.lightningBolts,this.players,this.playerHitLightning);\r\n            \r\n            //4 walls on the outside\r\n            this.leftWall = this.physics.add.sprite(-55,300,'vwall');\r\n            //Set immovable allows the objects to not move on collision\r\n            this.leftWall.body.immovable = true;\r\n            this.rightWall = this.physics.add.sprite(855,300,'vwall');\r\n            this.rightWall.body.immovable = true;\r\n            this.topWall = this.physics.add.sprite(400,-55,'wall');\r\n            this.topWall.body.immovable = true;\r\n            this.bottomWall = this.physics.add.sprite(400,655,'wall');\r\n            this.bottomWall.body.immovable = true;\r\n            \r\n            //staticGroup is a different type of group that doesn't move I believe\r\n            this.walls = this.physics.add.staticGroup();\r\n            this.walls.add(this.leftWall);\r\n            this.walls.add(this.rightWall);\r\n            this.walls.add(this.topWall);\r\n            this.walls.add(this.bottomWall);\r\n            \r\n            //midline barrier wall\r\n            this.midWall = this.physics.add.sprite(400,300,'wall');\r\n            this.midWall.setScale(1,.08);\r\n            this.midWall.setVisible(false);\r\n            this.midWall.body.immovable = true;\r\n\r\n            this.physics.add.collider(this.midWall,this.players);\r\n            \r\n            //The order of the objects in the collider matters, magicBlasts \r\n            //will only bounce off the walls if this.magicBlasts is the first argument\r\n            this.physics.add.collider(this.magicBlasts,this.walls);\r\n            this.physics.add.collider(this.walls,this.players);\r\n            \r\n            \r\n            this.createMagicBlast = function(player){\r\n                    //Create magic Blast\r\n                    var magicBlast = new MagicBlast(this,player.getX(),\r\n                    player.getY(),'magicBlast',{owner: player});\r\n                    //Add to collision group\r\n                    this.magicBlasts.add(magicBlast);\r\n                    //Fire in direction of player orientation\r\n                    magicBlast.setMagicBlastVelocity(player.getOrientationVector());\r\n                    //Set magicBlast bounce\r\n                    magicBlast.setCollideWorldBounds(true);\r\n                    magicBlast.setBounce(1);\r\n                    \r\n            };\r\n            this.checkForSwingThenSwing = function(attackInput, player, coolDown){\r\n                //Check if swordSwing exists, and then check if it belongs to the player\r\n                this.swordHitBoxes.getChildren().forEach(swordSwing => {\r\n                    if (swordSwing.getOwner() === player) {\r\n                        let swordToCheck = swordSwing;\r\n                    }\r\n                });\r\n                //Check if sword swing can be activated\r\n                //if the attack button is pressed,\r\n                //and there is no sword currently active on the player,\r\n                //and the cooldown is no active, then the sword can be swung\r\n                 if ((attackInput.swordSwingFiring && typeof swordToCheck == 'undefined' && !coolDown.isActive())){\r\n                    //Set sword swing spawn point\r\n                    let swordSpawnX = player.getX();\r\n                    let swordSpawnY = player.getY();\r\n                   \r\n                    //Create new sword swing\r\n                    let newSwordSwing = new SwordSwing(this,swordSpawnX,swordSpawnY,'swordSwing',{owner: player});\r\n                    newSwordSwing.swingSword();\r\n                    coolDown.startCoolDown();\r\n                    this.swordHitBoxes.add(newSwordSwing);\r\n                   \r\n                 }\r\n            };\r\n        },\r\n\r\n    update: function()\r\n        {\r\n        \r\n        //Checks if player 1 or player2 have lost, can events be used for this instead?\r\n        if (!this.player1.isAlive()){\r\n            this.youWin.setVisible(true);\r\n            this.youWin.setText('PLAYER2 WINS');\r\n        }\r\n        else if(!this.player2.isAlive()){\r\n            this.youWin.setVisible(true);\r\n            this.youWin.setText('PLAYER1 WINS');\r\n        }\r\n\r\n        //Get Player input\r\n        this.movementVectorP1 = this.controlsP1.getMovementVector();\r\n        this.movementVectorP2 = this.controlsP2.getMovementVector();\r\n\r\n        //Set the orientation of the player\r\n        this.player1.setOrientationVector(this.movementVectorP1);\r\n        this.player2.setOrientationVector(this.movementVectorP2);\r\n\r\n        //Check to make sure the player is not stunned, alive, and is not dodging\r\n        if(!this.player1.getStun() && this.player1.isAlive() && !this.player1.getDodging()){\r\n            this.player1.setPlayerVelocity(this.movementVectorP1);\r\n        }\r\n\r\n        if(!this.player2.getStun() && this.player2.isAlive() && !this.player2.getDodging()){\r\n            this.player2.setPlayerVelocity(this.movementVectorP2);\r\n        }\r\n\r\n        //Get attack inputs every update cycle\r\n        let attackInputsP1 = this.controlsP1.getMoveInput();\r\n        let attackInputsP2 = this.controlsP2.getMoveInput();\r\n\r\n        //Check for user firing magic blast and that the cooldown is not active\r\n        if (attackInputsP1.magicBlastFiring && !this.magicCoolDownP1.isActive()){\r\n           this.magicCoolDownP1.startCoolDown();\r\n           this.createMagicBlast(this.player1);\r\n        };\r\n        \r\n         if (attackInputsP2.magicBlastFiring && !this.magicCoolDownP2.isActive()){\r\n           this.magicCoolDownP2.startCoolDown();\r\n           this.createMagicBlast(this.player2);\r\n        };\r\n\r\n        //Check for user firing Lightning Bolt\r\n        if (attackInputsP1.lightningBoltFiring && !this.lightningCoolDownP1.isActive()){\r\n           this.lightningCoolDownP1.startCoolDown();\r\n           \r\n           //create lightning Bolt animation object\r\n           let lightningBolt = new LightningBolt(this,this.player1.getX(),this.player1.getY(),'lightningBolt',{owner: this.player1});\r\n           //Creates 4 lightning bolt hitboxes which are the WIDTH of the lightning bolt, they travel \r\n           //at a speed so fast that it mimics a diagonal hitbox. This normally\r\n           //can't be created using Arcade physics and its Axis aligned bounding boxes;\r\n           let lightningBoltHB1 = new LightningHB(this,this.player1.getX(),this.player1.getY(),'magicBlast',{owner: this.player1, animationSprite: lightningBolt, Olength: 100});\r\n           let lightningBoltHB2 = new LightningHB(this,this.player1.getX(),this.player1.getY(),'magicBlast',{owner: this.player1, animationSprite: lightningBolt, Olength: 50});\r\n           let lightningBoltHB3 = new LightningHB(this,this.player1.getX(),this.player1.getY(),'magicBlast',{owner: this.player1, animationSprite: lightningBolt, Olength: 25});\r\n           let lightningBoltHB4 = new LightningHB(this,this.player1.getX(),this.player1.getY(),'magicBlast',{owner: this.player1, animationSprite: lightningBolt, Olength: 75});\r\n           //Add to collision group\r\n           this.lightningBolts.add(lightningBoltHB1);\r\n           this.lightningBolts.add(lightningBoltHB2);\r\n           this.lightningBolts.add(lightningBoltHB3);\r\n           this.lightningBolts.add(lightningBoltHB4);\r\n        };\r\n        if (attackInputsP2.lightningBoltFiring && !this.lightningCoolDownP2.isActive()){\r\n           this.lightningCoolDownP2.startCoolDown();\r\n           let lightningBolt = new LightningBolt(this,this.player2.getX(),this.player2.getY(),'lightningBolt',{owner: this.player2});\r\n           let lightningBoltHB1 = new LightningHB(this,this.player2.getX(),this.player2.getY(),'magicBlast',{owner: this.player2, animationSprite: lightningBolt, Olength: 100});\r\n           let lightningBoltHB2 = new LightningHB(this,this.player2.getX(),this.player2.getY(),'magicBlast',{owner: this.player2, animationSprite: lightningBolt, Olength: 50});\r\n           let lightningBoltHB3 = new LightningHB(this,this.player2.getX(),this.player2.getY(),'magicBlast',{owner: this.player2, animationSprite: lightningBolt, Olength: 25});\r\n           let lightningBoltHB4 = new LightningHB(this,this.player2.getX(),this.player2.getY(),'magicBlast',{owner: this.player2, animationSprite: lightningBolt, Olength: 75});\r\n           this.lightningBolts.add(lightningBoltHB1);\r\n           this.lightningBolts.add(lightningBoltHB2);\r\n           this.lightningBolts.add(lightningBoltHB3);\r\n           this.lightningBolts.add(lightningBoltHB4);\r\n        };\r\n\r\n       \r\n        //Check for user dodging and check that they aren't already in dodge mode\r\n        if (attackInputsP1.dodgeFiring && !this.player1.getDodging() && !this.dodgeCoolDownP1.isActive()){\r\n            this.dodgeCoolDownP1.startCoolDown();\r\n            this.player1.dodge();\r\n        };\r\n        if (attackInputsP2.dodgeFiring && !this.player2.getDodging() && !this.dodgeCoolDownP2.isActive()){\r\n            this.dodgeCoolDownP2.startCoolDown();\r\n            this.player2.dodge();\r\n        };\r\n\r\n        //Check if sword swings exist, and update them as needed, \r\n        //this is the best way I can think of for tracking and following player position in the main loop\r\n        //Perhaps there's a better way? Without it \r\n        //the sword is stuck in place, perhaps it can be attached to a reference to player position?\r\n        //I took a look at an update pattern for a situation like this\r\n        let swordSwings = this.swordHitBoxes.getChildren();\r\n        if (swordSwings.length>0){\r\n            swordSwings.forEach(swordSwing => {\r\n                swordSwing.update();\r\n            }\r\n            );\r\n            \r\n        }\r\n        \r\n        //Check for user swinging sword and then swing, starting the cooldown\r\n        //I think functions are supposed to do only one thing, I'll fix this later\r\n        this.checkForSwingThenSwing(attackInputsP1, this.player1, this.swordCoolDownP1);\r\n        this.checkForSwingThenSwing(attackInputsP2, this.player2, this.swordCoolDownP2);\r\n        }\r\n    \r\n    \r\n\r\n\r\n}\r\n\r\nexport default LocalGameScene;"]},"metadata":{},"sourceType":"module"}