{"ast":null,"code":"import _classCallCheck from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/createSuper\";import Phaser from'phaser';var MagicBlast=/*#__PURE__*/function(_Phaser$Physics$Arcad){_inherits(MagicBlast,_Phaser$Physics$Arcad);var _super=_createSuper(MagicBlast);//https://www.youtube.com/watch?v=jEaoeEdv7eU I used this tutorial to for extending a sprite in phaser3\nfunction MagicBlast(scene,x,y,texture){var _this;var _ref=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{},owner=_ref.owner;_classCallCheck(this,MagicBlast);_this=_super.call(this,scene,x,y,texture);//Adds sprite to screen\nscene.add.existing(_assertThisInitialized(_this));//Adds physics to sprite\nscene.physics.add.existing(_assertThisInitialized(_this));//Make sprite .4 times the size\n_this.setScale(.4);_this.magicSpeed=800;//Turns hitbox into circle\n_this.setCircle(85);_this.createAnimations(scene);_this.anims.play('magicBlastSpin',true);//Set which player owns the magic blast\n_this.owner=owner;_this.x=x;_this.y=y;var magicBlastTimeOut=_this.scene.time.delayedCall(1000,_this.explodeTimer,[],_assertThisInitialized(_this));//this callback plays at the end of an animation sequence\n_this.on('animationcomplete',function(anim){//This nested event emit allows for specific animations to trigger specific actions\n//Without it, the object would destroy itself at the end of any animation loop, \n//AKA before it explodes\nthis.emit('animationcomplete_'+anim.key,anim);},_assertThisInitialized(_this));_this.on('animationcomplete_magicBlastExplode',function(){this.destroy();});return _this;}//Callback for magicBlast timeout timer, \n//this runs if the magicBlast hasn't been destroyed by some other means\n//(Hits player) after a certain amount of time\n_createClass(MagicBlast,[{key:\"explodeTimer\",value:function explodeTimer(){this.explode();}},{key:\"createAnimations\",value:function createAnimations(scene){scene.anims.create({key:'magicBlastSpin',frames:scene.anims.generateFrameNumbers(this.texture.key,{start:1,end:12}),frameRate:10,repeat:-1});scene.anims.create({key:'magicBlastExplode',frames:scene.anims.generateFrameNumbers(this.texture.key,{start:13,end:29}),frameRate:20});}},{key:\"getOwner\",value:function getOwner(){return this.owner;}},{key:\"setMagicBlastVelocity\",value:function setMagicBlastVelocity(velocity){var vectorAngle=Phaser.Math.Angle.Between(0,0,velocity.x,velocity.y);this.body.setVelocity(velocity.x*Math.abs(Math.cos(vectorAngle))*this.magicSpeed,velocity.y*Math.abs(Math.sin(vectorAngle))*this.magicSpeed);}},{key:\"explode\",value:function explode(){if(this.body){this.body.enable=false;this.anims.play('magicBlastExplode',true);}}},{key:\"deflectFrom\",value:function deflectFrom(player){//This code takes an input object \n//and sets a velocity that moves the magicblast directly away from it\nvar vectorAngle=Phaser.Math.Angle.Between(player.x,player.y,this.x,this.y);this.body.setVelocity(Math.cos(vectorAngle)*this.magicSpeed,Math.sin(vectorAngle)*this.magicSpeed);}}]);return MagicBlast;}(Phaser.Physics.Arcade.Sprite);export{MagicBlast as default};","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/src/phaser/sprites/MagicBlast.js"],"names":["Phaser","MagicBlast","scene","x","y","texture","owner","add","existing","physics","setScale","magicSpeed","setCircle","createAnimations","anims","play","magicBlastTimeOut","time","delayedCall","explodeTimer","on","anim","emit","key","destroy","explode","create","frames","generateFrameNumbers","start","end","frameRate","repeat","velocity","vectorAngle","Math","Angle","Between","body","setVelocity","abs","cos","sin","enable","player","Physics","Arcade","Sprite"],"mappings":"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","sourcesContent":["import Phaser from 'phaser';\r\nexport default class MagicBlast extends Phaser.Physics.Arcade.Sprite\r\n    {\r\n\r\n        //https://www.youtube.com/watch?v=jEaoeEdv7eU I used this tutorial to for extending a sprite in phaser3\r\n        constructor (scene,x,y,texture,{owner}={})\r\n        {\r\n            super(scene,x,y,texture);\r\n            //Adds sprite to screen\r\n            scene.add.existing(this);\r\n\r\n            //Adds physics to sprite\r\n            scene.physics.add.existing(this);\r\n            //Make sprite .4 times the size\r\n            this.setScale(.4);\r\n            this.magicSpeed = 800;\r\n            //Turns hitbox into circle\r\n            this.setCircle(85);\r\n            this.createAnimations(scene);\r\n            this.anims.play('magicBlastSpin',true);\r\n            //Set which player owns the magic blast\r\n            this.owner = owner;\r\n            this.x = x;\r\n            this.y = y;\r\n            let magicBlastTimeOut = this.scene.time.delayedCall(1000, this.explodeTimer, [], this);\r\n            //this callback plays at the end of an animation sequence\r\n            this.on('animationcomplete', function(anim) {\r\n              //This nested event emit allows for specific animations to trigger specific actions\r\n              //Without it, the object would destroy itself at the end of any animation loop, \r\n              //AKA before it explodes\r\n              this.emit('animationcomplete_' + anim.key, anim);\r\n            },this);\r\n            this.on('animationcomplete_magicBlastExplode', function() {\r\n              this.destroy();\r\n            });\r\n            \r\n        }\r\n        //Callback for magicBlast timeout timer, \r\n        //this runs if the magicBlast hasn't been destroyed by some other means\r\n        //(Hits player) after a certain amount of time\r\n        explodeTimer(){\r\n          this.explode();\r\n        }\r\n\r\n        createAnimations(scene){\r\n          scene.anims.create({\r\n            key: 'magicBlastSpin',\r\n            frames: scene.anims.generateFrameNumbers(this.texture.key, { start: 1, end: 12 }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n          });\r\n          scene.anims.create({\r\n            key: 'magicBlastExplode',\r\n            frames: scene.anims.generateFrameNumbers(this.texture.key, { start: 13,end: 29 }),\r\n            frameRate: 20,\r\n           \r\n          });\r\n          \r\n        }\r\n        getOwner(){\r\n          return this.owner;\r\n        }\r\n        \r\n        setMagicBlastVelocity(velocity){\r\n          \r\n          let vectorAngle = Phaser.Math.Angle.Between(0,0,velocity.x,velocity.y);\r\n          this.body.setVelocity(velocity.x*Math.abs(Math.cos(vectorAngle))*this.magicSpeed,velocity.y*Math.abs(Math.sin(vectorAngle))*this.magicSpeed);\r\n        }\r\n        explode(){\r\n          if (this.body){\r\n            this.body.enable = false;\r\n            this.anims.play('magicBlastExplode',\r\n            true);\r\n          }\r\n         \r\n        }\r\n        deflectFrom(player){\r\n          //This code takes an input object \r\n          //and sets a velocity that moves the magicblast directly away from it\r\n          let vectorAngle = Phaser.Math.Angle.Between(player.x,player.y,this.x,this.y);\r\n          this.body.setVelocity(Math.cos(vectorAngle)*this.magicSpeed,Math.sin(vectorAngle)*this.magicSpeed);\r\n        }\r\n    }"]},"metadata":{},"sourceType":"module"}