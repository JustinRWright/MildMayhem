{"ast":null,"code":"/**\r\n * @file\r\n * @copyright (c) 2013 Stephan Brenner\r\n * @license   This project is released under the MIT License.\r\n *\r\n * This file implements a Node.js module for initiating socket.io connections\r\n * through a proxy server.\r\n */\n(function () {\n  var http = require('http');\n\n  var https = require('https');\n\n  var url = require('url');\n\n  var io = require('socket.io-client');\n\n  var tunnelPort = 61423;\n  var tunnelServer;\n  var initialized = false;\n\n  exports.connect = function (destinationUrl, options) {\n    var destination = url.parse(destinationUrl);\n\n    if (!destination.port) {\n      destination.port = destination.protocol === 'https:' ? 443 : 80;\n    }\n\n    if (!initialized) exports.init();\n    if (typeof tunnelServer === 'undefined') return io.connect(destinationUrl, options); // Direct connection\n\n    options = options || {};\n    options['force new connection'] = true; // Allows one tunnel server to handle multiple destinations\n\n    return io.connect('http://localhost:' + tunnelPort + '/' + '?protocol=' + destination.protocol.replace(':', '') + '&hostname=' + destination.hostname + '&port=' + destination.port, options);\n  };\n\n  exports.init = function (proxyUrl) {\n    initialized = true;\n\n    if (typeof tunnelServer !== 'undefined') {\n      tunnelServer.close();\n      tunnelServer = undefined;\n    }\n\n    if (typeof proxyUrl === 'undefined') {\n      if (process.env.http_proxy) {\n        proxyUrl = process.env.http_proxy;\n      } else {\n        console.log('Direct connection (no proxy defined)');\n        return;\n      }\n    }\n\n    var proxy = url.parse(proxyUrl, true);\n    tunnelServer = http.createServer(function (request, response) {\n      var requestUrl = url.parse(request.url, true);\n      var hostname = requestUrl.query.hostname;\n      var port = requestUrl.query.port;\n      var options = {\n        hostname: typeof proxy !== 'undefined' ? proxy.hostname : hostname,\n        port: typeof proxy !== 'undefined' ? proxy.port : port,\n        path: requestUrl.pathname + '?t=' + requestUrl.query.t,\n        method: request.method,\n        headers: request.headers\n      };\n      options['headers']['Host'] = hostname + ':' + port;\n      var proxy_request = requestUrl.query.protocol === 'http' ? http.request(options) : https.request(options);\n      proxy_request.addListener('response', function (proxy_response) {\n        proxy_response.addListener('data', function (chunk) {\n          response.write(chunk, 'binary');\n        });\n        proxy_response.addListener('end', function () {\n          response.end();\n        });\n        response.writeHead(proxy_response.statusCode, proxy_response.headers);\n      });\n      proxy_request.on('error', function (err) {\n        console.log('Error: found error in socket.io-proxy - error is: ' + err);\n        console.log(err.stack);\n      });\n      request.addListener('data', function (chunk) {\n        proxy_request.write(chunk, 'binary');\n      });\n      request.addListener('end', function () {\n        proxy_request.end();\n      });\n    });\n    tunnelServer.listen(tunnelPort);\n    console.log('Proxy: ' + proxyUrl);\n  };\n})();","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/socket.io-proxy/lib/main.js"],"names":["http","require","https","url","io","tunnelPort","tunnelServer","initialized","exports","connect","destinationUrl","options","destination","parse","port","protocol","init","replace","hostname","proxyUrl","close","undefined","process","env","http_proxy","console","log","proxy","createServer","request","response","requestUrl","query","path","pathname","t","method","headers","proxy_request","addListener","proxy_response","chunk","write","end","writeHead","statusCode","on","err","stack","listen"],"mappings":"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","sourcesContent":["/**\r\n * @file\r\n * @copyright (c) 2013 Stephan Brenner\r\n * @license   This project is released under the MIT License.\r\n *\r\n * This file implements a Node.js module for initiating socket.io connections\r\n * through a proxy server.\r\n */\r\n\r\n(function(){\r\n    var http = require('http');\r\n    var https = require('https');\r\n    var url = require('url');\r\n    var io = require('socket.io-client');\r\n\r\n    var tunnelPort = 61423;\r\n    var tunnelServer;\r\n    var initialized = false;\r\n\r\n    exports.connect = function(destinationUrl, options) {\r\n        var destination = url.parse(destinationUrl);\r\n        if (!destination.port) {\r\n            destination.port = destination.protocol === 'https:' ? 443 : 80;\r\n        }\r\n\r\n        if (!initialized) exports.init();\r\n\r\n        if (typeof tunnelServer === 'undefined') return io.connect(destinationUrl, options);   // Direct connection\r\n\r\n        options = options || {};\r\n        options['force new connection'] = true;   // Allows one tunnel server to handle multiple destinations\r\n\r\n        return io.connect('http://localhost:' + tunnelPort + '/' +\r\n            '?protocol=' + destination.protocol.replace(':', '')  +\r\n            '&hostname=' + destination.hostname +\r\n            '&port=' + destination.port, options);\r\n    };\r\n\r\n    exports.init = function(proxyUrl) {\r\n        initialized = true;\r\n\r\n        if (typeof tunnelServer !== 'undefined') {\r\n            tunnelServer.close();\r\n            tunnelServer = undefined;\r\n        }\r\n\r\n        if (typeof proxyUrl === 'undefined') {\r\n            if (process.env.http_proxy) {\r\n                proxyUrl = process.env.http_proxy;\r\n            } else {\r\n                console.log('Direct connection (no proxy defined)');\r\n                return;\r\n            }\r\n        }\r\n\r\n        var proxy = url.parse(proxyUrl, true);\r\n\r\n        tunnelServer = http.createServer(function (request, response) {\r\n            var requestUrl = url.parse(request.url, true);\r\n            var hostname = requestUrl.query.hostname;\r\n            var port = requestUrl.query.port;\r\n\r\n            var options = {\r\n                hostname: typeof proxy !== 'undefined' ? proxy.hostname : hostname,\r\n                port: typeof proxy !== 'undefined' ? proxy.port : port,\r\n                path: requestUrl.pathname + '?t=' + requestUrl.query.t,\r\n                method: request.method,\r\n                headers: request.headers\r\n            };\r\n            options['headers']['Host'] = hostname + ':' + port;\r\n\r\n            var proxy_request = requestUrl.query.protocol === 'http'\r\n                ? http.request(options)\r\n                : https.request(options);\r\n\r\n            proxy_request.addListener('response', function (proxy_response) {\r\n                proxy_response.addListener('data', function (chunk) { response.write(chunk, 'binary'); });\r\n                proxy_response.addListener('end', function () { response.end(); });\r\n                response.writeHead(proxy_response.statusCode, proxy_response.headers);\r\n            });\r\n\r\n            proxy_request.on('error', function(err) {\r\n               console.log('Error: found error in socket.io-proxy - error is: ' + err);\r\n               console.log(err.stack);\r\n            });\r\n\r\n            request.addListener('data', function (chunk) { proxy_request.write(chunk, 'binary'); });\r\n            request.addListener('end', function () { proxy_request.end(); });\r\n        });\r\n\r\n        tunnelServer.listen(tunnelPort);\r\n        console.log('Proxy: ' + proxyUrl);\r\n    };\r\n})();\r\n"]},"metadata":{},"sourceType":"script"}