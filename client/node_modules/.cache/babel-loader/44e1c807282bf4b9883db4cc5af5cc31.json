{"ast":null,"code":"var ZeParser = require('zeparser').ZeParser;\n\nvar Util = require('util');\n\nmodule.exports = ActiveXObfuscator;\n\nfunction ActiveXObfuscator(code) {\n  if (!(this instanceof ActiveXObfuscator)) {\n    var obfuscator = new ActiveXObfuscator(code);\n    obfuscator.execute();\n    return obfuscator.toString();\n  }\n\n  this._parser = ZeParser.createParser(code);\n}\n\nvar OBFUSCATED_ACTIVE_X_OBJECT = ActiveXObfuscator.OBFUSCATED_ACTIVE_X_OBJECT = \"(['Active'].concat('Object').join('X'))\";\nvar OBFUSCATED_ACTIVE_X = ActiveXObfuscator.OBFUSCATED_ACTIVE_X = \"(['Active'].concat('').join('X'))\";\n\nActiveXObfuscator.prototype.execute = function () {\n  this._parser.tokenizer.fixValues();\n\n  this._obfuscate(this.getAst());\n};\n\nActiveXObfuscator.prototype.getAst = function () {\n  return this._parser.stack;\n};\n\nActiveXObfuscator.prototype.getWhiteTokens = function () {\n  return this._parser.tokenizer.wtree;\n};\n\nActiveXObfuscator.prototype._obfuscate = function (ast) {\n  var self = this;\n  ast.forEach(function (node, index) {\n    if (Array.isArray(node)) {\n      self._obfuscate(node);\n\n      return;\n    }\n\n    switch (node.value) {\n      case 'ActiveXObject':\n        if (!node.isPropertyName) {\n          node.value = 'window[' + OBFUSCATED_ACTIVE_X_OBJECT + ']';\n          break;\n        }\n\n        var dot = ast[index - 1];\n        var whiteTokens = self.getWhiteTokens();\n        whiteTokens[dot.tokposw].value = '';\n        node.value = '[' + OBFUSCATED_ACTIVE_X_OBJECT + ']';\n        break;\n\n      case \"'ActiveXObject'\":\n      case '\"ActiveXObject\"':\n        node.value = OBFUSCATED_ACTIVE_X_OBJECT;\n        break;\n\n      case \"'ActiveX'\":\n      case '\"ActiveX\"':\n        node.value = OBFUSCATED_ACTIVE_X;\n        break;\n\n      default:\n        if (!/ActiveX/i.test(node.value)) {\n          break;\n        }\n\n        if (!node.isComment) {\n          throw new Error('Unknown ActiveX occurence in: ' + Util.inspect(node));\n        }\n\n        node.value = node.value.replace(/ActiveX/i, 'Ac...eX');\n    }\n  });\n};\n\nActiveXObfuscator.prototype.toString = function () {\n  var whiteTokens = this.getWhiteTokens();\n  return whiteTokens.reduce(function (output, node) {\n    return output += node.value;\n  }, '');\n};","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/active-x-obfuscator/index.js"],"names":["ZeParser","require","Util","module","exports","ActiveXObfuscator","code","obfuscator","execute","toString","_parser","createParser","OBFUSCATED_ACTIVE_X_OBJECT","OBFUSCATED_ACTIVE_X","prototype","tokenizer","fixValues","_obfuscate","getAst","stack","getWhiteTokens","wtree","ast","self","forEach","node","index","Array","isArray","value","isPropertyName","dot","whiteTokens","tokposw","test","isComment","Error","inspect","replace","reduce","output"],"mappings":"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","sourcesContent":["var ZeParser = require('zeparser').ZeParser;\nvar Util     = require('util');\n\nmodule.exports = ActiveXObfuscator;\nfunction ActiveXObfuscator(code) {\n  if (!(this instanceof ActiveXObfuscator)) {\n    var obfuscator = new ActiveXObfuscator(code);\n    obfuscator.execute();\n    return obfuscator.toString();\n  }\n\n  this._parser = ZeParser.createParser(code);\n}\n\nvar OBFUSCATED_ACTIVE_X_OBJECT = ActiveXObfuscator.OBFUSCATED_ACTIVE_X_OBJECT =\n  \"(['Active'].concat('Object').join('X'))\";\nvar OBFUSCATED_ACTIVE_X = ActiveXObfuscator.OBFUSCATED_ACTIVE_X =\n  \"(['Active'].concat('').join('X'))\";\n\nActiveXObfuscator.prototype.execute = function() {\n  this._parser.tokenizer.fixValues();\n  this._obfuscate(this.getAst());\n};\n\nActiveXObfuscator.prototype.getAst = function() {\n  return this._parser.stack;\n};\n\nActiveXObfuscator.prototype.getWhiteTokens = function() {\n  return this._parser.tokenizer.wtree;\n};\n\nActiveXObfuscator.prototype._obfuscate = function(ast) {\n  var self = this;\n\n  ast.forEach(function(node, index) {\n    if (Array.isArray(node)) {\n      self._obfuscate(node);\n      return;\n    }\n\n    switch (node.value) {\n      case 'ActiveXObject':\n        if (!node.isPropertyName) {\n          node.value = 'window[' + OBFUSCATED_ACTIVE_X_OBJECT + ']';\n          break;\n        }\n\n        var dot = ast[index - 1]\n        var whiteTokens = self.getWhiteTokens();\n        whiteTokens[dot.tokposw].value = '';\n\n        node.value = '[' + OBFUSCATED_ACTIVE_X_OBJECT + ']';\n        break;\n      case \"'ActiveXObject'\":\n      case '\"ActiveXObject\"':\n        node.value = OBFUSCATED_ACTIVE_X_OBJECT;\n        break;\n      case \"'ActiveX'\":\n      case '\"ActiveX\"':\n        node.value = OBFUSCATED_ACTIVE_X;\n        break;\n      default:\n        if (!/ActiveX/i.test(node.value)) {\n          break;\n        }\n\n        if (!node.isComment) {\n          throw new Error('Unknown ActiveX occurence in: ' + Util.inspect(node));\n        }\n\n        node.value = node.value.replace(/ActiveX/i, 'Ac...eX');\n    }\n\n  });\n};\n\nActiveXObfuscator.prototype.toString = function() {\n  var whiteTokens = this.getWhiteTokens();\n  return whiteTokens.reduce(function(output, node) {\n    return output += node.value;\n  }, '');\n};\n"]},"metadata":{},"sourceType":"script"}