{"ast":null,"code":"/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n(function (exports, io, global) {\n  /**\n   * Expose constructor.\n   *\n   * @api public\n   */\n  exports.XHR = XHR;\n  /**\n   * XHR constructor\n   *\n   * @costructor\n   * @api public\n   */\n\n  function XHR(socket) {\n    if (!socket) return;\n    io.Transport.apply(this, arguments);\n    this.sendBuffer = [];\n  }\n\n  ;\n  /**\n   * Inherits from Transport.\n   */\n\n  io.util.inherit(XHR, io.Transport);\n  /**\n   * Establish a connection\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.open = function () {\n    this.socket.setBuffer(false);\n    this.onOpen();\n    this.get(); // we need to make sure the request succeeds since we have no indication\n    // whether the request opened or not until it succeeded.\n\n    this.setCloseTimeout();\n    return this;\n  };\n  /**\n   * Check if we need to send data to the Socket.IO server, if we have data in our\n   * buffer we encode it and forward it to the `post` method.\n   *\n   * @api private\n   */\n\n\n  XHR.prototype.payload = function (payload) {\n    var msgs = [];\n\n    for (var i = 0, l = payload.length; i < l; i++) {\n      msgs.push(io.parser.encodePacket(payload[i]));\n    }\n\n    this.send(io.parser.encodePayload(msgs));\n  };\n  /**\n   * Send data to the Socket.IO server.\n   *\n   * @param data The message\n   * @returns {Transport}\n   * @api public\n   */\n\n\n  XHR.prototype.send = function (data) {\n    this.post(data);\n    return this;\n  };\n  /**\n   * Posts a encoded message to the Socket.IO server.\n   *\n   * @param {String} data A encoded message.\n   * @api private\n   */\n\n\n  function empty() {}\n\n  ;\n\n  XHR.prototype.post = function (data) {\n    var self = this;\n    this.socket.setBuffer(true);\n\n    function stateChange() {\n      if (this.readyState == 4) {\n        this.onreadystatechange = empty;\n        self.posting = false;\n\n        if (this.status == 200) {\n          self.socket.setBuffer(false);\n        } else {\n          self.onClose();\n        }\n      }\n    }\n\n    function onload() {\n      this.onload = empty;\n      self.socket.setBuffer(false);\n    }\n\n    ;\n    this.sendXHR = this.request('POST');\n\n    if (global.XDomainRequest && this.sendXHR instanceof XDomainRequest) {\n      this.sendXHR.onload = this.sendXHR.onerror = onload;\n    } else {\n      this.sendXHR.onreadystatechange = stateChange;\n    }\n\n    this.sendXHR.send(data);\n  };\n  /**\n   * Disconnects the established `XHR` connection.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n\n  XHR.prototype.close = function () {\n    this.onClose();\n    return this;\n  };\n  /**\n   * Generates a configured XHR request\n   *\n   * @param {String} url The url that needs to be requested.\n   * @param {String} method The method the request should use.\n   * @returns {XMLHttpRequest}\n   * @api private\n   */\n\n\n  XHR.prototype.request = function (method) {\n    var req = io.util.request(this.socket.isXDomain()),\n        query = io.util.query(this.socket.options.query, 't=' + +new Date());\n    req.open(method || 'GET', this.prepareUrl() + query, true);\n\n    if (method == 'POST') {\n      try {\n        if (req.setRequestHeader) {\n          req.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n        } else {\n          // XDomainRequest\n          req.contentType = 'text/plain';\n        }\n      } catch (e) {}\n    }\n\n    return req;\n  };\n  /**\n   * Returns the scheme to use for the transport URLs.\n   *\n   * @api private\n   */\n\n\n  XHR.prototype.scheme = function () {\n    return this.socket.options.secure ? 'https' : 'http';\n  };\n  /**\n   * Check if the XHR transports are supported\n   *\n   * @param {Boolean} xdomain Check if we support cross domain requests.\n   * @returns {Boolean}\n   * @api public\n   */\n\n\n  XHR.check = function (socket, xdomain) {\n    try {\n      var request = io.util.request(xdomain),\n          usesXDomReq = global.XDomainRequest && request instanceof XDomainRequest,\n          socketProtocol = socket && socket.options && socket.options.secure ? 'https:' : 'http:',\n          isXProtocol = global.location && socketProtocol != global.location.protocol;\n\n      if (request && !(usesXDomReq && isXProtocol)) {\n        return true;\n      }\n    } catch (e) {}\n\n    return false;\n  };\n  /**\n   * Check if the XHR transport supports cross domain requests.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n\n  XHR.xdomainCheck = function (socket) {\n    return XHR.check(socket, true);\n  };\n})('undefined' != typeof io ? io.Transport : module.exports, 'undefined' != typeof io ? io : module.parent.exports, this);","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/socket.io-proxy/node_modules/socket.io-client/lib/transports/xhr.js"],"names":["exports","io","global","XHR","socket","Transport","apply","arguments","sendBuffer","util","inherit","prototype","open","setBuffer","onOpen","get","setCloseTimeout","payload","msgs","i","l","length","push","parser","encodePacket","send","encodePayload","data","post","empty","self","stateChange","readyState","onreadystatechange","posting","status","onClose","onload","sendXHR","request","XDomainRequest","onerror","close","method","req","isXDomain","query","options","Date","prepareUrl","setRequestHeader","contentType","e","scheme","secure","check","xdomain","usesXDomReq","socketProtocol","isXProtocol","location","protocol","xdomainCheck","module","parent"],"mappings":"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","sourcesContent":["\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   *\n   * @api public\n   */\n\n  exports.XHR = XHR;\n\n  /**\n   * XHR constructor\n   *\n   * @costructor\n   * @api public\n   */\n\n  function XHR (socket) {\n    if (!socket) return;\n\n    io.Transport.apply(this, arguments);\n    this.sendBuffer = [];\n  };\n\n  /**\n   * Inherits from Transport.\n   */\n\n  io.util.inherit(XHR, io.Transport);\n\n  /**\n   * Establish a connection\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.open = function () {\n    this.socket.setBuffer(false);\n    this.onOpen();\n    this.get();\n\n    // we need to make sure the request succeeds since we have no indication\n    // whether the request opened or not until it succeeded.\n    this.setCloseTimeout();\n\n    return this;\n  };\n\n  /**\n   * Check if we need to send data to the Socket.IO server, if we have data in our\n   * buffer we encode it and forward it to the `post` method.\n   *\n   * @api private\n   */\n\n  XHR.prototype.payload = function (payload) {\n    var msgs = [];\n\n    for (var i = 0, l = payload.length; i < l; i++) {\n      msgs.push(io.parser.encodePacket(payload[i]));\n    }\n\n    this.send(io.parser.encodePayload(msgs));\n  };\n\n  /**\n   * Send data to the Socket.IO server.\n   *\n   * @param data The message\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.send = function (data) {\n    this.post(data);\n    return this;\n  };\n\n  /**\n   * Posts a encoded message to the Socket.IO server.\n   *\n   * @param {String} data A encoded message.\n   * @api private\n   */\n\n  function empty () { };\n\n  XHR.prototype.post = function (data) {\n    var self = this;\n    this.socket.setBuffer(true);\n\n    function stateChange () {\n      if (this.readyState == 4) {\n        this.onreadystatechange = empty;\n        self.posting = false;\n\n        if (this.status == 200){\n          self.socket.setBuffer(false);\n        } else {\n          self.onClose();\n        }\n      }\n    }\n\n    function onload () {\n      this.onload = empty;\n      self.socket.setBuffer(false);\n    };\n\n    this.sendXHR = this.request('POST');\n\n    if (global.XDomainRequest && this.sendXHR instanceof XDomainRequest) {\n      this.sendXHR.onload = this.sendXHR.onerror = onload;\n    } else {\n      this.sendXHR.onreadystatechange = stateChange;\n    }\n\n    this.sendXHR.send(data);\n  };\n\n  /**\n   * Disconnects the established `XHR` connection.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.close = function () {\n    this.onClose();\n    return this;\n  };\n\n  /**\n   * Generates a configured XHR request\n   *\n   * @param {String} url The url that needs to be requested.\n   * @param {String} method The method the request should use.\n   * @returns {XMLHttpRequest}\n   * @api private\n   */\n\n  XHR.prototype.request = function (method) {\n    var req = io.util.request(this.socket.isXDomain())\n      , query = io.util.query(this.socket.options.query, 't=' + +new Date);\n\n    req.open(method || 'GET', this.prepareUrl() + query, true);\n\n    if (method == 'POST') {\n      try {\n        if (req.setRequestHeader) {\n          req.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n        } else {\n          // XDomainRequest\n          req.contentType = 'text/plain';\n        }\n      } catch (e) {}\n    }\n\n    return req;\n  };\n\n  /**\n   * Returns the scheme to use for the transport URLs.\n   *\n   * @api private\n   */\n\n  XHR.prototype.scheme = function () {\n    return this.socket.options.secure ? 'https' : 'http';\n  };\n\n  /**\n   * Check if the XHR transports are supported\n   *\n   * @param {Boolean} xdomain Check if we support cross domain requests.\n   * @returns {Boolean}\n   * @api public\n   */\n\n  XHR.check = function (socket, xdomain) {\n    try {\n      var request = io.util.request(xdomain),\n          usesXDomReq = (global.XDomainRequest && request instanceof XDomainRequest),\n          socketProtocol = (socket && socket.options && socket.options.secure ? 'https:' : 'http:'),\n          isXProtocol = (global.location && socketProtocol != global.location.protocol);\n      if (request && !(usesXDomReq && isXProtocol)) {\n        return true;\n      }\n    } catch(e) {}\n\n    return false;\n  };\n\n  /**\n   * Check if the XHR transport supports cross domain requests.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  XHR.xdomainCheck = function (socket) {\n    return XHR.check(socket, true);\n  };\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n"]},"metadata":{},"sourceType":"script"}