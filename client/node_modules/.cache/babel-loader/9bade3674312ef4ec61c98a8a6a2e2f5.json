{"ast":null,"code":"/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n(function (exports, io) {\n  /**\n   * Parser namespace.\n   *\n   * @namespace\n   */\n  var parser = exports.parser = {};\n  /**\n   * Packet types.\n   */\n\n  var packets = parser.packets = ['disconnect', 'connect', 'heartbeat', 'message', 'json', 'event', 'ack', 'error', 'noop'];\n  /**\n   * Errors reasons.\n   */\n\n  var reasons = parser.reasons = ['transport not supported', 'client not handshaken', 'unauthorized'];\n  /**\n   * Errors advice.\n   */\n\n  var advice = parser.advice = ['reconnect'];\n  /**\n   * Shortcuts.\n   */\n\n  var JSON = io.JSON,\n      indexOf = io.util.indexOf;\n  /**\n   * Encodes a packet.\n   *\n   * @api private\n   */\n\n  parser.encodePacket = function (packet) {\n    var type = indexOf(packets, packet.type),\n        id = packet.id || '',\n        endpoint = packet.endpoint || '',\n        ack = packet.ack,\n        data = null;\n\n    switch (packet.type) {\n      case 'error':\n        var reason = packet.reason ? indexOf(reasons, packet.reason) : '',\n            adv = packet.advice ? indexOf(advice, packet.advice) : '';\n        if (reason !== '' || adv !== '') data = reason + (adv !== '' ? '+' + adv : '');\n        break;\n\n      case 'message':\n        if (packet.data !== '') data = packet.data;\n        break;\n\n      case 'event':\n        var ev = {\n          name: packet.name\n        };\n\n        if (packet.args && packet.args.length) {\n          ev.args = packet.args;\n        }\n\n        data = JSON.stringify(ev);\n        break;\n\n      case 'json':\n        data = JSON.stringify(packet.data);\n        break;\n\n      case 'connect':\n        if (packet.qs) data = packet.qs;\n        break;\n\n      case 'ack':\n        data = packet.ackId + (packet.args && packet.args.length ? '+' + JSON.stringify(packet.args) : '');\n        break;\n    } // construct packet with required fragments\n\n\n    var encoded = [type, id + (ack == 'data' ? '+' : ''), endpoint]; // data fragment is optional\n\n    if (data !== null && data !== undefined) encoded.push(data);\n    return encoded.join(':');\n  };\n  /**\n   * Encodes multiple messages (payload).\n   *\n   * @param {Array} messages\n   * @api private\n   */\n\n\n  parser.encodePayload = function (packets) {\n    var decoded = '';\n    if (packets.length == 1) return packets[0];\n\n    for (var i = 0, l = packets.length; i < l; i++) {\n      var packet = packets[i];\n      decoded += '\\ufffd' + packet.length + '\\ufffd' + packets[i];\n    }\n\n    return decoded;\n  };\n  /**\n   * Decodes a packet\n   *\n   * @api private\n   */\n\n\n  var regexp = /([^:]+):([0-9]+)?(\\+)?:([^:]+)?:?([\\s\\S]*)?/;\n\n  parser.decodePacket = function (data) {\n    var pieces = data.match(regexp);\n    if (!pieces) return {};\n    var id = pieces[2] || '',\n        data = pieces[5] || '',\n        packet = {\n      type: packets[pieces[1]],\n      endpoint: pieces[4] || ''\n    }; // whether we need to acknowledge the packet\n\n    if (id) {\n      packet.id = id;\n      if (pieces[3]) packet.ack = 'data';else packet.ack = true;\n    } // handle different packet types\n\n\n    switch (packet.type) {\n      case 'error':\n        var pieces = data.split('+');\n        packet.reason = reasons[pieces[0]] || '';\n        packet.advice = advice[pieces[1]] || '';\n        break;\n\n      case 'message':\n        packet.data = data || '';\n        break;\n\n      case 'event':\n        try {\n          var opts = JSON.parse(data);\n          packet.name = opts.name;\n          packet.args = opts.args;\n        } catch (e) {}\n\n        packet.args = packet.args || [];\n        break;\n\n      case 'json':\n        try {\n          packet.data = JSON.parse(data);\n        } catch (e) {}\n\n        break;\n\n      case 'connect':\n        packet.qs = data || '';\n        break;\n\n      case 'ack':\n        var pieces = data.match(/^([0-9]+)(\\+)?(.*)/);\n\n        if (pieces) {\n          packet.ackId = pieces[1];\n          packet.args = [];\n\n          if (pieces[3]) {\n            try {\n              packet.args = pieces[3] ? JSON.parse(pieces[3]) : [];\n            } catch (e) {}\n          }\n        }\n\n        break;\n\n      case 'disconnect':\n      case 'heartbeat':\n        break;\n    }\n\n    ;\n    return packet;\n  };\n  /**\n   * Decodes data payload. Detects multiple messages\n   *\n   * @return {Array} messages\n   * @api public\n   */\n\n\n  parser.decodePayload = function (data) {\n    // IE doesn't like data[i] for unicode chars, charAt works fine\n    if (data.charAt(0) == '\\ufffd') {\n      var ret = [];\n\n      for (var i = 1, length = ''; i < data.length; i++) {\n        if (data.charAt(i) == '\\ufffd') {\n          ret.push(parser.decodePacket(data.substr(i + 1).substr(0, length)));\n          i += Number(length) + 1;\n          length = '';\n        } else {\n          length += data.charAt(i);\n        }\n      }\n\n      return ret;\n    } else {\n      return [parser.decodePacket(data)];\n    }\n  };\n})('undefined' != typeof io ? io : module.exports, 'undefined' != typeof io ? io : module.parent.exports);","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/socket.io-proxy/node_modules/socket.io-client/lib/parser.js"],"names":["exports","io","parser","packets","reasons","advice","JSON","indexOf","util","encodePacket","packet","type","id","endpoint","ack","data","reason","adv","ev","name","args","length","stringify","qs","ackId","encoded","undefined","push","join","encodePayload","decoded","i","l","regexp","decodePacket","pieces","match","split","opts","parse","e","decodePayload","charAt","ret","substr","Number","module","parent"],"mappings":"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","sourcesContent":["\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Parser namespace.\n   *\n   * @namespace\n   */\n\n  var parser = exports.parser = {};\n\n  /**\n   * Packet types.\n   */\n\n  var packets = parser.packets = [\n      'disconnect'\n    , 'connect'\n    , 'heartbeat'\n    , 'message'\n    , 'json'\n    , 'event'\n    , 'ack'\n    , 'error'\n    , 'noop'\n  ];\n\n  /**\n   * Errors reasons.\n   */\n\n  var reasons = parser.reasons = [\n      'transport not supported'\n    , 'client not handshaken'\n    , 'unauthorized'\n  ];\n\n  /**\n   * Errors advice.\n   */\n\n  var advice = parser.advice = [\n      'reconnect'\n  ];\n\n  /**\n   * Shortcuts.\n   */\n\n  var JSON = io.JSON\n    , indexOf = io.util.indexOf;\n\n  /**\n   * Encodes a packet.\n   *\n   * @api private\n   */\n\n  parser.encodePacket = function (packet) {\n    var type = indexOf(packets, packet.type)\n      , id = packet.id || ''\n      , endpoint = packet.endpoint || ''\n      , ack = packet.ack\n      , data = null;\n\n    switch (packet.type) {\n      case 'error':\n        var reason = packet.reason ? indexOf(reasons, packet.reason) : ''\n          , adv = packet.advice ? indexOf(advice, packet.advice) : '';\n\n        if (reason !== '' || adv !== '')\n          data = reason + (adv !== '' ? ('+' + adv) : '');\n\n        break;\n\n      case 'message':\n        if (packet.data !== '')\n          data = packet.data;\n        break;\n\n      case 'event':\n        var ev = { name: packet.name };\n\n        if (packet.args && packet.args.length) {\n          ev.args = packet.args;\n        }\n\n        data = JSON.stringify(ev);\n        break;\n\n      case 'json':\n        data = JSON.stringify(packet.data);\n        break;\n\n      case 'connect':\n        if (packet.qs)\n          data = packet.qs;\n        break;\n\n      case 'ack':\n        data = packet.ackId\n          + (packet.args && packet.args.length\n              ? '+' + JSON.stringify(packet.args) : '');\n        break;\n    }\n\n    // construct packet with required fragments\n    var encoded = [\n        type\n      , id + (ack == 'data' ? '+' : '')\n      , endpoint\n    ];\n\n    // data fragment is optional\n    if (data !== null && data !== undefined)\n      encoded.push(data);\n\n    return encoded.join(':');\n  };\n\n  /**\n   * Encodes multiple messages (payload).\n   *\n   * @param {Array} messages\n   * @api private\n   */\n\n  parser.encodePayload = function (packets) {\n    var decoded = '';\n\n    if (packets.length == 1)\n      return packets[0];\n\n    for (var i = 0, l = packets.length; i < l; i++) {\n      var packet = packets[i];\n      decoded += '\\ufffd' + packet.length + '\\ufffd' + packets[i];\n    }\n\n    return decoded;\n  };\n\n  /**\n   * Decodes a packet\n   *\n   * @api private\n   */\n\n  var regexp = /([^:]+):([0-9]+)?(\\+)?:([^:]+)?:?([\\s\\S]*)?/;\n\n  parser.decodePacket = function (data) {\n    var pieces = data.match(regexp);\n\n    if (!pieces) return {};\n\n    var id = pieces[2] || ''\n      , data = pieces[5] || ''\n      , packet = {\n            type: packets[pieces[1]]\n          , endpoint: pieces[4] || ''\n        };\n\n    // whether we need to acknowledge the packet\n    if (id) {\n      packet.id = id;\n      if (pieces[3])\n        packet.ack = 'data';\n      else\n        packet.ack = true;\n    }\n\n    // handle different packet types\n    switch (packet.type) {\n      case 'error':\n        var pieces = data.split('+');\n        packet.reason = reasons[pieces[0]] || '';\n        packet.advice = advice[pieces[1]] || '';\n        break;\n\n      case 'message':\n        packet.data = data || '';\n        break;\n\n      case 'event':\n        try {\n          var opts = JSON.parse(data);\n          packet.name = opts.name;\n          packet.args = opts.args;\n        } catch (e) { }\n\n        packet.args = packet.args || [];\n        break;\n\n      case 'json':\n        try {\n          packet.data = JSON.parse(data);\n        } catch (e) { }\n        break;\n\n      case 'connect':\n        packet.qs = data || '';\n        break;\n\n      case 'ack':\n        var pieces = data.match(/^([0-9]+)(\\+)?(.*)/);\n        if (pieces) {\n          packet.ackId = pieces[1];\n          packet.args = [];\n\n          if (pieces[3]) {\n            try {\n              packet.args = pieces[3] ? JSON.parse(pieces[3]) : [];\n            } catch (e) { }\n          }\n        }\n        break;\n\n      case 'disconnect':\n      case 'heartbeat':\n        break;\n    };\n\n    return packet;\n  };\n\n  /**\n   * Decodes data payload. Detects multiple messages\n   *\n   * @return {Array} messages\n   * @api public\n   */\n\n  parser.decodePayload = function (data) {\n    // IE doesn't like data[i] for unicode chars, charAt works fine\n    if (data.charAt(0) == '\\ufffd') {\n      var ret = [];\n\n      for (var i = 1, length = ''; i < data.length; i++) {\n        if (data.charAt(i) == '\\ufffd') {\n          ret.push(parser.decodePacket(data.substr(i + 1).substr(0, length)));\n          i += Number(length) + 1;\n          length = '';\n        } else {\n          length += data.charAt(i);\n        }\n      }\n\n      return ret;\n    } else {\n      return [parser.decodePacket(data)];\n    }\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n"]},"metadata":{},"sourceType":"script"}