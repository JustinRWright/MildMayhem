{"ast":null,"code":"import Phaser from 'phaser';\nexport default class MagicBlast extends Phaser.Physics.Arcade.Sprite {\n  //https://www.youtube.com/watch?v=jEaoeEdv7eU I used this tutorial to for extending a sprite in phaser3\n  constructor(scene, x, y, texture, {\n    owner\n  } = {}) {\n    super(scene, x, y, texture); //Adds sprite to screen\n\n    scene.add.existing(this); //Adds physics to sprite\n\n    scene.physics.add.existing(this);\n    this.setScale(.4);\n    this.magicSpeed = 800;\n    this.setCircle(85);\n    this.createAnimations(scene);\n    this.anims.play('magicBlastSpin', true);\n    this.owner = owner;\n    this.x = x;\n    this.y = y;\n    let timedEvent = this.scene.time.delayedCall(1000, this.onEvent, [], this);\n    this.on('animationcomplete', function (anim) {\n      //console.log(\"animation completed!\");\n      this.emit('animationcomplete_' + anim.key, anim);\n    }, this);\n    this.on('animationcomplete_magicBlastExplode', function () {\n      this.destroy();\n    });\n  }\n\n  onEvent() {\n    this.explode();\n  }\n\n  createAnimations(scene) {\n    scene.anims.create({\n      key: 'magicBlastSpin',\n      frames: scene.anims.generateFrameNumbers(this.texture.key, {\n        start: 1,\n        end: 12\n      }),\n      frameRate: 10,\n      repeat: -1\n    });\n    scene.anims.create({\n      key: 'magicBlastExplode',\n      frames: scene.anims.generateFrameNumbers(this.texture.key, {\n        start: 13,\n        end: 29\n      }),\n      frameRate: 20\n    });\n  }\n\n  getOwner() {\n    return this.owner;\n  }\n\n  setMagicBlastVelocity(velocity) {\n    let vectorAngle = Phaser.Math.Angle.Between(0, 0, velocity.x, velocity.y);\n    this.body.setVelocity(velocity.x * Math.abs(Math.cos(vectorAngle)) * this.magicSpeed, velocity.y * Math.abs(Math.sin(vectorAngle)) * this.magicSpeed);\n  }\n\n  explode() {\n    if (this.body) {\n      this.body.enable = false;\n      this.anims.play('magicBlastExplode', true);\n    }\n  }\n\n  deflectFrom(player) {\n    let vectorAngle = Phaser.Math.Angle.Between(player.x, player.y, this.x, this.y); //console.log(vectorAngle*180/Math.PI);\n\n    this.body.setVelocity(Math.cos(vectorAngle) * this.magicSpeed, Math.sin(vectorAngle) * this.magicSpeed);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/src/phaser/sprites/MagicBlast.js"],"names":["Phaser","MagicBlast","Physics","Arcade","Sprite","constructor","scene","x","y","texture","owner","add","existing","physics","setScale","magicSpeed","setCircle","createAnimations","anims","play","timedEvent","time","delayedCall","onEvent","on","anim","emit","key","destroy","explode","create","frames","generateFrameNumbers","start","end","frameRate","repeat","getOwner","setMagicBlastVelocity","velocity","vectorAngle","Math","Angle","Between","body","setVelocity","abs","cos","sin","enable","deflectFrom","player"],"mappings":"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","sourcesContent":["import Phaser from 'phaser';\r\nexport default class MagicBlast extends Phaser.Physics.Arcade.Sprite\r\n    {\r\n\r\n        //https://www.youtube.com/watch?v=jEaoeEdv7eU I used this tutorial to for extending a sprite in phaser3\r\n        constructor (scene,x,y,texture,{owner}={})\r\n        {\r\n            super(scene,x,y,texture);\r\n            //Adds sprite to screen\r\n            scene.add.existing(this);\r\n\r\n            //Adds physics to sprite\r\n            scene.physics.add.existing(this);\r\n            this.setScale(.4);\r\n            this.magicSpeed = 800;\r\n            this.setCircle(85);\r\n            this.createAnimations(scene);\r\n            this.anims.play('magicBlastSpin',true);\r\n            this.owner = owner;\r\n            this.x = x;\r\n            this.y = y;\r\n            let timedEvent = this.scene.time.delayedCall(1000, this.onEvent, [], this);\r\n            this.on('animationcomplete', function(anim) {\r\n              //console.log(\"animation completed!\");\r\n              this.emit('animationcomplete_' + anim.key, anim);\r\n            },this);\r\n            this.on('animationcomplete_magicBlastExplode', function() {\r\n              this.destroy();\r\n            });\r\n            \r\n        }\r\n        onEvent(){\r\n          this.explode();\r\n        }\r\n        createAnimations(scene){\r\n          scene.anims.create({\r\n            key: 'magicBlastSpin',\r\n            frames: scene.anims.generateFrameNumbers(this.texture.key, { start: 1, end: 12 }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n          });\r\n          scene.anims.create({\r\n            key: 'magicBlastExplode',\r\n            frames: scene.anims.generateFrameNumbers(this.texture.key, { start: 13,end: 29 }),\r\n            frameRate: 20,\r\n           \r\n          });\r\n          \r\n        }\r\n        getOwner(){\r\n          return this.owner;\r\n        }\r\n        setMagicBlastVelocity(velocity){\r\n          \r\n          let vectorAngle = Phaser.Math.Angle.Between(0,0,velocity.x,velocity.y);\r\n          this.body.setVelocity(velocity.x*Math.abs(Math.cos(vectorAngle))*this.magicSpeed,velocity.y*Math.abs(Math.sin(vectorAngle))*this.magicSpeed);\r\n        }\r\n        explode(){\r\n          if (this.body){\r\n            this.body.enable = false;\r\n            this.anims.play('magicBlastExplode',\r\n            true);\r\n          }\r\n         \r\n        }\r\n        deflectFrom(player){\r\n          let vectorAngle = Phaser.Math.Angle.Between(player.x,player.y,this.x,this.y);\r\n          //console.log(vectorAngle*180/Math.PI);\r\n          this.body.setVelocity(Math.cos(vectorAngle)*this.magicSpeed,Math.sin(vectorAngle)*this.magicSpeed);\r\n        }\r\n    }"]},"metadata":{},"sourceType":"module"}