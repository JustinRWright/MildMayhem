{"ast":null,"code":"import _classCallCheck from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/createSuper\";import Phaser from'phaser';var Controls=/*#__PURE__*/function(_Phaser$GameObjects$S){_inherits(Controls,_Phaser$GameObjects$S);var _super=_createSuper(Controls);function Controls(scene,type,gamePadCount,gamePadNumber){var _this;_classCallCheck(this,Controls);//Information is being passed from the react application into here for control config\n_this=_super.call(this,scene,type,gamePadCount,gamePadNumber);_this.setKeyInput(scene,type);_this.scene=scene;//The gamePad Count and gamePad number are tracked to make sure that the passed\n//gamepad amounts are equal to the detected gamepads in the scene,\n//Otherwise errors will occurs\n//The onConnect listener does not seem to work normally,  \n//But I am sure there is a better solution for this\n_this.gamePadCount=gamePadCount;_this.gamePadNumber=gamePadNumber;return _this;}_createClass(Controls,[{key:\"setWASDControls\",value:function setWASDControls(){this.directionals=this.directionals=this.scene.input.keyboard.addKeys({up:Phaser.Input.Keyboard.KeyCodes.W,down:Phaser.Input.Keyboard.KeyCodes.S,left:Phaser.Input.Keyboard.KeyCodes.A,right:Phaser.Input.Keyboard.KeyCodes.D});this.magicBlastAttack=this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.P);this.swordSwing=this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);this.dodge=this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SHIFT);this.lightningBolt=this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.O);}},{key:\"setArrowKeyControls\",value:function setArrowKeyControls(){this.directionals=this.scene.input.keyboard.createCursorKeys();this.magicBlastAttack=this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.NUMPAD_NINE);this.swordSwing=this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.NUMPAD_ZERO);this.dodge=this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.NUMPAD_FOUR);this.lightningBolt=this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.NUMPAD_EIGHT);}},{key:\"setKeyInput\",value:function setKeyInput(scene){var _ref=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},directionals=_ref.directionals,magicBlast=_ref.magicBlast,swordSwing=_ref.swordSwing,dodge=_ref.dodge;//Potentially can add more configurable controls by using passing keycodes in here in the future\nif(directionals==='WASD'){this.setWASDControls();}else if(directionals==='ArrowKeys'){this.setArrowKeyControls();}else if(directionals==='GamePad'){this.gamePadMode=true;console.log(\"game pad mode active\"+this.gamePadMode);this.lightningBolt={};this.swordSwing={};this.magicBlastAttack={};this.dodge={};var xAxis=0;var yAxis=0;this.directionals={up:{isDown:yAxis>0?true:false},down:{isDown:yAxis<0?true:false},left:{isDown:xAxis>0?true:false},right:{isDown:xAxis>0?true:false}};this.scene.input.gamepad.once('connected',function(pad,event){},this);this.scene.input.gamepad.on('down',function(pad,button,index){this.swordSwing.isDown=pad.X;this.magicBlastAttack.isDown=pad.R2;this.dodge.isDown=pad.R1;this.lightningBolt.isDown=pad.L2;},this);this.scene.input.gamepad.on('up',function(pad,button,index){this.swordSwing.isDown=false;this.magicBlastAttack.isDown=false;this.dodge.isDown=false;this.lightningBolt.isDown=false;},this);}}},{key:\"getMovementVector\",value:function getMovementVector(){//This function returns an x and y value that can easily be multiplied onto\n//direction values in the scene, ex: {x:0*velocity,y:1*velocity}, \nif(this.gamePadMode){var pad;//If there are any controllers connected and the gamepad isActive at all then...\nif(this.scene.input.gamepad.total&&this.scene.input.gamepad.isActive()){//If the total amount of gamepads are greater than or equal to the desired amount...\nif(this.scene.input.gamepad.total>=this.gamePadCount){pad=this.scene.input.gamepad.pad1;if(this.scene.input.gamepad.pad2&&this.gamePadNumber===2){pad=this.scene.input.gamepad.pad2;}var xAxis=pad.axes[0].getValue();var yAxis=pad.axes[1].getValue();this.directionals={up:{isDown:yAxis<0?true:false},down:{isDown:yAxis>0?true:false},left:{isDown:xAxis<0?true:false},right:{isDown:xAxis>0?true:false}};}}else{console.log(\"Hey you didn't connect enough controllers\");//We should create a callback function here that resets the control scheme that is missing\n//and inform the user of the error of their ways.\n//We need the player number which is\nif(this.gamePadNumber==1){//set controls back to keyboard wasd\nconsole.log(\"WASD keyboard Set\");this.setWASDControls();this.gamePadCount-=1;}else{//set controls to arrowkeys\nconsole.log(\"Arrow keyboard Set\");this.setArrowKeyControls();this.gamePadCount-=1;}}}return{//Gets the vector for a directional press(y is inverted as it is in phaser/html5)\nx:(this.directionals.right.isDown?1:0)+(this.directionals.left.isDown?-1:0),y:(this.directionals.up.isDown?-1:0)+(this.directionals.down.isDown?1:0)};}},{key:\"getMoveInput\",value:function getMoveInput(){return{lightningBoltFiring:this.lightningBolt.isDown,dodgeFiring:this.dodge.isDown,magicBlastFiring:this.magicBlastAttack.isDown,swordSwingFiring:this.swordSwing.isDown};}}]);return Controls;}(Phaser.GameObjects.Sprite);export{Controls as default};","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/src/phaser/controls/Controls.js"],"names":["Phaser","Controls","scene","type","gamePadCount","gamePadNumber","setKeyInput","directionals","input","keyboard","addKeys","up","Input","Keyboard","KeyCodes","W","down","S","left","A","right","D","magicBlastAttack","addKey","P","swordSwing","SPACE","dodge","SHIFT","lightningBolt","O","createCursorKeys","NUMPAD_NINE","NUMPAD_ZERO","NUMPAD_FOUR","NUMPAD_EIGHT","magicBlast","setWASDControls","setArrowKeyControls","gamePadMode","console","log","xAxis","yAxis","isDown","gamepad","once","pad","event","on","button","index","X","R2","R1","L2","total","isActive","pad1","pad2","axes","getValue","x","y","lightningBoltFiring","dodgeFiring","magicBlastFiring","swordSwingFiring","GameObjects","Sprite"],"mappings":"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","sourcesContent":["import Phaser from 'phaser';\r\nexport default class Controls extends Phaser.GameObjects.Sprite\r\n    {\r\n\r\n        constructor (scene,type,gamePadCount,gamePadNumber)\r\n        {\r\n            //Information is being passed from the react application into here for control config\r\n            super(scene,type,gamePadCount,gamePadNumber);\r\n            this.setKeyInput(scene,type);\r\n            this.scene = scene;\r\n            //The gamePad Count and gamePad number are tracked to make sure that the passed\r\n            //gamepad amounts are equal to the detected gamepads in the scene,\r\n            //Otherwise errors will occurs\r\n            //The onConnect listener does not seem to work normally,  \r\n            //But I am sure there is a better solution for this\r\n            this.gamePadCount = gamePadCount;\r\n            this.gamePadNumber = gamePadNumber;\r\n            \r\n        }\r\n\r\n        setWASDControls(){\r\n          this.directionals = this.directionals = this.scene.input.keyboard.addKeys({\r\n                up:Phaser.Input.Keyboard.KeyCodes.W,\r\n                down:Phaser.Input.Keyboard.KeyCodes.S,\r\n                left:Phaser.Input.Keyboard.KeyCodes.A,\r\n                right:Phaser.Input.Keyboard.KeyCodes.D\r\n            });\r\n          this.magicBlastAttack = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.P);\r\n          this.swordSwing = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\r\n          this.dodge = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SHIFT);\r\n          this.lightningBolt = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.O);\r\n        }\r\n        setArrowKeyControls(){\r\n          this.directionals = this.scene.input.keyboard.createCursorKeys();\r\n          this.magicBlastAttack = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.NUMPAD_NINE);\r\n          this.swordSwing = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.NUMPAD_ZERO);\r\n          this.dodge = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.NUMPAD_FOUR);\r\n          this.lightningBolt = this.scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.NUMPAD_EIGHT);\r\n        }\r\n        setKeyInput(scene,{directionals,magicBlast,swordSwing,dodge}={}){\r\n          //Potentially can add more configurable controls by using passing keycodes in here in the future\r\n          if (directionals === 'WASD'){\r\n           this.setWASDControls();\r\n          }\r\n          else if (directionals === 'ArrowKeys'){\r\n           this.setArrowKeyControls();\r\n          }\r\n          else if (directionals === 'GamePad'){\r\n            \r\n            this.gamePadMode = true;\r\n            console.log(\"game pad mode active\" + this.gamePadMode);\r\n            this.lightningBolt = {};\r\n            this.swordSwing = {};\r\n            this.magicBlastAttack = {};\r\n            this.dodge = {};\r\n           \r\n            const xAxis = 0;\r\n            const yAxis = 0;\r\n            this.directionals = {\r\n                up: {isDown: yAxis > 0 ? true : false},\r\n                down: {isDown: yAxis < 0 ? true : false},\r\n                left: {isDown: xAxis > 0 ? true : false},\r\n                right: {isDown: xAxis > 0 ? true : false},\r\n              };\r\n            this.scene.input.gamepad.once('connected', function (pad, event) {\r\n             \r\n            }, this);\r\n            this.scene.input.gamepad.on('down', function (pad, button, index) {\r\n             \r\n              this.swordSwing.isDown = pad.X;\r\n              this.magicBlastAttack.isDown = pad.R2;\r\n              this.dodge.isDown =  pad.R1;\r\n              this.lightningBolt.isDown = pad.L2;\r\n              \r\n            }, this);\r\n           this.scene.input.gamepad.on('up', function (pad, button, index) {\r\n              this.swordSwing.isDown = false;\r\n              this.magicBlastAttack.isDown = false;\r\n              this.dodge.isDown = false;\r\n              this.lightningBolt.isDown = false;\r\n              \r\n            }, this);\r\n          }\r\n          \r\n          \r\n          \r\n          \r\n          \r\n         \r\n        }\r\n        \r\n        getMovementVector(){\r\n         //This function returns an x and y value that can easily be multiplied onto\r\n         //direction values in the scene, ex: {x:0*velocity,y:1*velocity}, \r\n          if (this.gamePadMode){\r\n            let pad: Phaser.Input.Gamepad.Gamepad;\r\n\r\n            //If there are any controllers connected and the gamepad isActive at all then...\r\n            if (this.scene.input.gamepad.total&&this.scene.input.gamepad.isActive()){ \r\n               \r\n                //If the total amount of gamepads are greater than or equal to the desired amount...\r\n                if (this.scene.input.gamepad.total>=this.gamePadCount){\r\n                 \r\n                  pad = this.scene.input.gamepad.pad1\r\n                  \r\n                  if (this.scene.input.gamepad.pad2 && this.gamePadNumber===2){\r\n                    pad = this.scene.input.gamepad.pad2;\r\n                  }\r\n\r\n                  const xAxis = pad.axes[0].getValue();\r\n                  const yAxis = pad.axes[1].getValue();\r\n                \r\n                  this.directionals = {\r\n                    up: {isDown: yAxis < 0 ? true : false},\r\n                    down: {isDown: yAxis > 0 ? true : false},\r\n                    left: {isDown: xAxis < 0 ? true : false},\r\n                    right: {isDown: xAxis > 0 ? true : false},\r\n                  }\r\n                }\r\n                \r\n                \r\n                \r\n            }\r\n            else {\r\n                  console.log(\"Hey you didn't connect enough controllers\");\r\n                  //We should create a callback function here that resets the control scheme that is missing\r\n                  //and inform the user of the error of their ways.\r\n                  //We need the player number which is\r\n                  if (this.gamePadNumber == 1){\r\n                    //set controls back to keyboard wasd\r\n                    console.log(\"WASD keyboard Set\");\r\n                    this.setWASDControls();\r\n                    this.gamePadCount-=1;\r\n                  }\r\n                  else\r\n                  {\r\n                    //set controls to arrowkeys\r\n                    console.log(\"Arrow keyboard Set\");\r\n                    this.setArrowKeyControls();\r\n                    this.gamePadCount-=1;\r\n                  }\r\n                }\r\n\r\n       \r\n           }\r\n         return {\r\n           //Gets the vector for a directional press(y is inverted as it is in phaser/html5)\r\n           x: ((this.directionals.right.isDown)? 1:0)+((this.directionals.left.isDown)? -1:0),\r\n           y: ((this.directionals.up.isDown)? -1:0)+((this.directionals.down.isDown)? 1:0)};\r\n        }\r\n        getMoveInput(){\r\n          return {lightningBoltFiring: this.lightningBolt.isDown, dodgeFiring: this.dodge.isDown, magicBlastFiring: this.magicBlastAttack.isDown,swordSwingFiring: this.swordSwing.isDown};\r\n          \r\n        }\r\n        \r\n       \r\n    }"]},"metadata":{},"sourceType":"module"}