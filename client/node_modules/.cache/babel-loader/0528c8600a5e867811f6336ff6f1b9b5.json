{"ast":null,"code":"import _classCallCheck from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/createSuper\";import Phaser from'phaser';var Player=/*#__PURE__*/function(_Phaser$Physics$Arcad){_inherits(Player,_Phaser$Physics$Arcad);var _super=_createSuper(Player);function Player(scene,x,y,texture){var _this;_classCallCheck(this,Player);_this=_super.call(this,scene,x,y,texture);//Adds sprite to screen\nscene.add.existing(_assertThisInitialized(_this));//Adds physics to sprite\nscene.physics.add.existing(_assertThisInitialized(_this));_this.body.setSize(30,61);_this.createAnimations(scene);//Tracks changes in player orientation\n//Player starts out looking forwards so x: 0, y: -1 makes sense as initial value\n_this.orientationVector={x:0,y:-1};//\n_this.alive=true;_this.x=x;_this.y=y;_this.dodging=false;_this.scene=scene;_this.stunned=false;//This can be passed into contructor later\n//Should I use getters and setters like this?\n_this.setPlayerSpeed(400);return _this;}//Starts stun for player\n_createClass(Player,[{key:\"playStun\",value:function playStun(){this.toggleStun();//calls a timer which removes player stun after 1 second\nvar timedEvent=this.scene.time.delayedCall(1000,this.onEvent,[],this);}},{key:\"knockBack\",value:function knockBack(gameObj){//This code finds the angle between the player and the object that damaged the player,\n//then it sends the player flying in the exact opposite direction\nvar gameObjCenter=gameObj.getCenter();var playerCenter=this.getCenter();var vectorAngle=Phaser.Math.Angle.Between(gameObjCenter['x'],gameObjCenter['y'],playerCenter['x'],playerCenter['y']);var knockBackVel=1200;var movementX=Math.cos(vectorAngle)*knockBackVel;var movementY=Math.sin(vectorAngle)*knockBackVel;this.setVelocity(movementX,movementY);}},{key:\"onEvent\",value:function onEvent(){this.toggleStun();}},{key:\"toggleStun\",value:function toggleStun(){//While player is stunned, changed the player opacity\nthis.stunned=!this.stunned;if(this.stunned===false){this.setAlpha(1);}else{this.setAlpha(.5);}}},{key:\"dodge\",value:function dodge(){//Changes player velocity and sets dodge property \nthis.body.setVelocity(this.orientationVector.x*1500,this.orientationVector.y*1500);this.dodging=true;this.setBounce(0);console.log(this.orientationVector);//This calls after the dodge cooldown completes\nvar timedEvent=this.scene.time.delayedCall(150,this.finishedDodging,[],this);}},{key:\"finishedDodging\",value:function finishedDodging(){this.setBounce(0);this.dodging=false;this.body.setVelocity(0,0);}//These two functions are for checking collisions in the scene code,\n//In the event that player is hit while stunned, the player shouldn't take damage or do anything else that's strange.\n},{key:\"getDodging\",value:function getDodging(){return this.dodging;}},{key:\"getStun\",value:function getStun(){return this.stunned;}},{key:\"setPlayerSpeed\",value:function setPlayerSpeed(speed){this.playerSpeed=speed;}},{key:\"setPlayerVelocity\",value:function setPlayerVelocity(velocityVector){this.body.setVelocity(velocityVector.x*this.playerSpeed,velocityVector.y*this.playerSpeed);//Not Moving\nif(velocityVector.x===0&&velocityVector.y===0){this.anims.stop();}//Moving Up\nelse if(velocityVector.y>0){this.anims.play(this.texture.key+'down',true);}//Moving Down\nelse if(velocityVector.y<0){this.anims.play(this.texture.key+'up',true);}//Moving Right\nelse if(velocityVector.x>0){this.anims.play(this.texture.key+'right',true);}//Moving Left\nelse if(velocityVector.x<0){this.anims.play(this.texture.key+'left',true);}}},{key:\"setMovementAnim\",value:function setMovementAnim(velocityVector){if(typeof this.anims!=='undefined'){//Not Moving\nif(velocityVector.x===0&&velocityVector.y===0){this.anims.stop();}//Moving Up\nelse if(velocityVector.y>0){this.anims.play(this.texture.key+'down',true);}//Moving Down\nelse if(velocityVector.y<0){this.anims.play(this.texture.key+'up',true);}//Moving Right\nelse if(velocityVector.x>0){this.anims.play(this.texture.key+'right',true);}//Moving Left\nelse if(velocityVector.x<0){this.anims.play(this.texture.key+'left',true);}}}},{key:\"setOrientationVector\",value:function setOrientationVector(velocityVector){//Check to make sure 0,0 is not passed in(that is not a direction)\nif(Math.abs(velocityVector.x)+Math.abs(velocityVector.y)>0){//Check to see if there is a change in orientation\nif(this.orientationVector.x!==velocityVector.x||this.orientationVector.y!==velocityVector.y){this.orientationVector=velocityVector;}}}},{key:\"gameOver\",value:function gameOver(){this.alive=false;}},{key:\"isAlive\",value:function isAlive(){return this.alive;}},{key:\"getOrientationVector\",value:function getOrientationVector(){return this.orientationVector;}},{key:\"setHealthBar\",value:function setHealthBar(healthBar){this.healthBar=healthBar;}},{key:\"getHealthBar\",value:function getHealthBar(){return this.healthBar;}},{key:\"getX\",value:function getX(){return this.x;}},{key:\"getY\",value:function getY(){return this.y;}//Create player animations\n},{key:\"createAnimations\",value:function createAnimations(scene){scene.anims.create({key:this.texture.key+'left',frames:scene.anims.generateFrameNumbers(this.texture.key,{start:4,end:5}),frameRate:10,repeat:-1});scene.anims.create({key:this.texture.key+'up',frames:scene.anims.generateFrameNumbers(this.texture.key,{start:0,end:1}),frameRate:10,repeat:-1});scene.anims.create({key:this.texture.key+'right',frames:scene.anims.generateFrameNumbers(this.texture.key,{start:2,end:3}),frameRate:10,repeat:-1});scene.anims.create({key:this.texture.key+'down',frames:scene.anims.generateFrameNumbers(this.texture.key,{start:6,end:7}),frameRate:10,repeat:-1});}}]);return Player;}(Phaser.Physics.Arcade.Sprite);export{Player as default};","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/src/phaser/sprites/Player.js"],"names":["Phaser","Player","scene","x","y","texture","add","existing","physics","body","setSize","createAnimations","orientationVector","alive","dodging","stunned","setPlayerSpeed","toggleStun","timedEvent","time","delayedCall","onEvent","gameObj","gameObjCenter","getCenter","playerCenter","vectorAngle","Math","Angle","Between","knockBackVel","movementX","cos","movementY","sin","setVelocity","setAlpha","setBounce","console","log","finishedDodging","speed","playerSpeed","velocityVector","anims","stop","play","key","abs","healthBar","create","frames","generateFrameNumbers","start","end","frameRate","repeat","Physics","Arcade","Sprite"],"mappings":"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","sourcesContent":["\r\nimport Phaser from 'phaser';\r\nexport default class Player extends Phaser.Physics.Arcade.Sprite\r\n    {\r\n\r\n        constructor (scene,x,y,texture)\r\n        {\r\n            super(scene,x,y,texture);\r\n            //Adds sprite to screen\r\n            scene.add.existing(this);\r\n            //Adds physics to sprite\r\n            scene.physics.add.existing(this);\r\n            this.body.setSize(30,61);\r\n            this.createAnimations(scene);\r\n            //Tracks changes in player orientation\r\n            //Player starts out looking forwards so x: 0, y: -1 makes sense as initial value\r\n            this.orientationVector = {x: 0, y: -1};\r\n            //\r\n            this.alive = true;\r\n            this.x = x;\r\n            this.y = y;\r\n            this.dodging = false;\r\n            this.scene = scene;\r\n            this.stunned = false;\r\n            //This can be passed into contructor later\r\n            //Should I use getters and setters like this?\r\n            this.setPlayerSpeed(400);\r\n           \r\n        }\r\n        \r\n        //Starts stun for player\r\n        playStun(){\r\n            this.toggleStun();\r\n            //calls a timer which removes player stun after 1 second\r\n            let timedEvent = this.scene.time.delayedCall(1000, this.onEvent, [], this);\r\n        }\r\n        knockBack(gameObj){\r\n          //This code finds the angle between the player and the object that damaged the player,\r\n          //then it sends the player flying in the exact opposite direction\r\n          let gameObjCenter = gameObj.getCenter();\r\n          let playerCenter = this.getCenter();\r\n          let vectorAngle = Phaser.Math.Angle.Between(gameObjCenter['x'],gameObjCenter['y'],playerCenter['x'],playerCenter['y']);\r\n          \r\n          let knockBackVel = 1200;\r\n          let movementX = Math.cos(vectorAngle)*knockBackVel;\r\n          let movementY = Math.sin(vectorAngle)*knockBackVel;\r\n          this.setVelocity(movementX,movementY);\r\n        }\r\n        onEvent(){\r\n          this.toggleStun();\r\n        }\r\n        toggleStun(){\r\n          //While player is stunned, changed the player opacity\r\n          this.stunned = !this.stunned;\r\n          if (this.stunned === false){\r\n            this.setAlpha(1);\r\n          }\r\n          else {\r\n            this.setAlpha(.5);\r\n          }\r\n          \r\n        }\r\n        dodge(){\r\n          //Changes player velocity and sets dodge property \r\n          this.body.setVelocity(this.orientationVector.x*1500,this.orientationVector.y*1500);\r\n          this.dodging = true;\r\n          this.setBounce(0);\r\n          console.log(this.orientationVector);\r\n          //This calls after the dodge cooldown completes\r\n          let timedEvent = this.scene.time.delayedCall(150, this.finishedDodging, [], this);\r\n        }\r\n        finishedDodging(){\r\n          this.setBounce(0);\r\n          this.dodging = false;\r\n          this.body.setVelocity(0,0);\r\n        }\r\n        //These two functions are for checking collisions in the scene code,\r\n        //In the event that player is hit while stunned, the player shouldn't take damage or do anything else that's strange.\r\n        getDodging(){\r\n          return this.dodging;\r\n        }\r\n        getStun(){\r\n          return this.stunned;\r\n        }\r\n        setPlayerSpeed(speed)\r\n        {\r\n          this.playerSpeed = speed;\r\n        }\r\n\r\n        setPlayerVelocity(velocityVector)\r\n        {\r\n          \r\n          this.body.setVelocity(velocityVector.x*this.playerSpeed,velocityVector.y*this.playerSpeed);\r\n          //Not Moving\r\n          if(velocityVector.x === 0 && velocityVector.y === 0){\r\n            this.anims.stop();\r\n          }\r\n          //Moving Up\r\n          else if (velocityVector.y > 0){\r\n            this.anims.play(this.texture.key + 'down', true);\r\n          }\r\n          //Moving Down\r\n          else if (velocityVector.y < 0){\r\n            this.anims.play(this.texture.key + 'up', true);\r\n          }\r\n          //Moving Right\r\n          else if (velocityVector.x > 0) {\r\n            this.anims.play(this.texture.key + 'right', true);\r\n          }\r\n          //Moving Left\r\n          else if (velocityVector.x < 0) {\r\n            this.anims.play(this.texture.key + 'left', true);\r\n          }\r\n    \r\n        }\r\n        setMovementAnim(velocityVector){\r\n          if (typeof this.anims !== 'undefined'){\r\n             //Not Moving\r\n              if(velocityVector.x === 0 && velocityVector.y === 0){\r\n                this.anims.stop();\r\n              }\r\n              //Moving Up\r\n              else if (velocityVector.y > 0){\r\n                this.anims.play(this.texture.key + 'down', true);\r\n              }\r\n              //Moving Down\r\n              else if (velocityVector.y < 0){\r\n                this.anims.play(this.texture.key + 'up', true);\r\n              }\r\n              //Moving Right\r\n              else if (velocityVector.x > 0) {\r\n                this.anims.play(this.texture.key + 'right', true);\r\n              }\r\n              //Moving Left\r\n              else if (velocityVector.x < 0) {\r\n                this.anims.play(this.texture.key + 'left', true);\r\n              }\r\n          }\r\n        }\r\n        setOrientationVector(velocityVector){\r\n          //Check to make sure 0,0 is not passed in(that is not a direction)\r\n          if(Math.abs(velocityVector.x)+Math.abs(velocityVector.y)>0){\r\n             \r\n            //Check to see if there is a change in orientation\r\n            if (this.orientationVector.x !== velocityVector.x || this.orientationVector.y !== velocityVector.y){\r\n              this.orientationVector = velocityVector;\r\n            }\r\n\r\n          }\r\n        }\r\n        gameOver(){\r\n          this.alive = false;\r\n        }\r\n        isAlive(){\r\n          return this.alive;\r\n        }\r\n        getOrientationVector(){\r\n          return this.orientationVector;\r\n        }\r\n        setHealthBar(healthBar){\r\n          this.healthBar = healthBar;\r\n        }\r\n        getHealthBar(){\r\n          return this.healthBar;\r\n        }\r\n        getX()\r\n        {\r\n          return this.x;\r\n        }\r\n        getY()\r\n        {\r\n          return this.y;\r\n        }\r\n        //Create player animations\r\n        createAnimations(scene){\r\n          scene.anims.create({\r\n            key: this.texture.key + 'left',\r\n            frames: scene.anims.generateFrameNumbers(this.texture.key, { start: 4, end: 5 }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n          });\r\n          scene.anims.create({\r\n            key: this.texture.key + 'up',\r\n            frames: scene.anims.generateFrameNumbers(this.texture.key, { start: 0, end: 1 }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n          });\r\n          scene.anims.create({\r\n            key: this.texture.key + 'right',\r\n            frames: scene.anims.generateFrameNumbers(this.texture.key, { start: 2, end: 3 }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n          });\r\n          scene.anims.create({\r\n            key: this.texture.key + 'down',\r\n            frames: scene.anims.generateFrameNumbers(this.texture.key, { start: 6, end: 7 }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n          });\r\n          \r\n        }\r\n    }\r\n"]},"metadata":{},"sourceType":"module"}