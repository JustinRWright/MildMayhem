{"ast":null,"code":"import _classCallCheck from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/createSuper\";import Phaser from'phaser';var LightningBolt=/*#__PURE__*/function(_Phaser$Physics$Arcad){_inherits(LightningBolt,_Phaser$Physics$Arcad);var _super=_createSuper(LightningBolt);//This object is purely an animation, it has no hitbox as Axis aligned bounding boxes (AABB)\n//The reason is that to implement a diagonal attack, one would need to create a diagonal bounding box\n//This is impossible with AABB, so another solution was used with\n//a series of lightningBolt Hitbox objects \nfunction LightningBolt(scene,x,y,texture){var _this;var _ref=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{},owner=_ref.owner;_classCallCheck(this,LightningBolt);_this=_super.call(this,scene,x,y,texture);scene.add.existing(_assertThisInitialized(_this));//create and play lightning strike animations\n_this.createAnimations(scene);_this.anims.play('lightningStrike',true);//set angle of object to match that of the player\nvar vectorAngle=Phaser.Math.Angle.Between(0,0,owner.getOrientationVector().x,owner.getOrientationVector().y);//Angle is in degrees in phaser,\n//as well, the object needs to be rotated 90 extra degrees to actually line up with the player\n_this.angle=vectorAngle*180/Math.PI+90;_this.owner=owner;//This code sets the animation position at a distance just outside the width/height\n//of the player so it doesn't look like it spawned right on top of them \n_this.x=x+owner.getOrientationVector().x*owner.width/2+owner.getOrientationVector().x*_this.height/2*Math.abs(Math.cos(vectorAngle));_this.y=y+owner.getOrientationVector().y*owner.height/2+owner.getOrientationVector().y*_this.height/2*Math.abs(Math.sin(vectorAngle));//This timer is for if the lightning bolt doesn't collide with a player and times out.\n//it then destroys the animation object\nvar timedEvent=_this.scene.time.delayedCall(3000,_this.endLightningBolt,[],_assertThisInitialized(_this));_this.on('animationcomplete',function(anim){this.emit('animationcomplete_'+anim.key,anim);},_assertThisInitialized(_this));//This animation runs once the lightning has reached it's peak 'size'\n//and spreads across the screen, it basically \n//just sits there until a collision or timeout\n_this.on('animationcomplete_lightningStrike',function(){this.anims.play('lightningSizzle');});return _this;}_createClass(LightningBolt,[{key:\"endLightningBolt\",value:function endLightningBolt(){this.destroy();}//Creates lightning animations\n},{key:\"createAnimations\",value:function createAnimations(scene){scene.anims.create({key:'lightningStrike',frames:scene.anims.generateFrameNumbers(this.texture.key,{start:1,end:17}),frameRate:30});scene.anims.create({key:'lightningSizzle',frames:scene.anims.generateFrameNumbers(this.texture.key,{start:15,end:17}),frameRate:10,repeat:-1});}//Used for checking collisions, etc\n},{key:\"getOwner\",value:function getOwner(){return this.owner;}}]);return LightningBolt;}(Phaser.Physics.Arcade.Sprite);export{LightningBolt as default};","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/src/phaser/sprites/lightningBolt.js"],"names":["Phaser","LightningBolt","scene","x","y","texture","owner","add","existing","createAnimations","anims","play","vectorAngle","Math","Angle","Between","getOrientationVector","angle","PI","width","height","abs","cos","sin","timedEvent","time","delayedCall","endLightningBolt","on","anim","emit","key","destroy","create","frames","generateFrameNumbers","start","end","frameRate","repeat","Physics","Arcade","Sprite"],"mappings":"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","sourcesContent":["import Phaser from 'phaser';\r\nexport default class LightningBolt extends Phaser.Physics.Arcade.Sprite\r\n    {\r\n        //This object is purely an animation, it has no hitbox as Axis aligned bounding boxes (AABB)\r\n        //The reason is that to implement a diagonal attack, one would need to create a diagonal bounding box\r\n        //This is impossible with AABB, so another solution was used with\r\n        //a series of lightningBolt Hitbox objects \r\n        constructor (scene,x,y,texture,{owner}={})\r\n        {\r\n            super(scene,x,y,texture);\r\n           \r\n            scene.add.existing(this);\r\n            \r\n            //create and play lightning strike animations\r\n            this.createAnimations(scene);\r\n            this.anims.play('lightningStrike',true);\r\n            \r\n            //set angle of object to match that of the player\r\n            let vectorAngle = Phaser.Math.Angle.Between(0,0,owner.getOrientationVector().x,owner.getOrientationVector().y);\r\n           \r\n            //Angle is in degrees in phaser,\r\n            //as well, the object needs to be rotated 90 extra degrees to actually line up with the player\r\n            this.angle = vectorAngle*180/Math.PI+90;\r\n            this.owner = owner;\r\n            \r\n            //This code sets the animation position at a distance just outside the width/height\r\n            //of the player so it doesn't look like it spawned right on top of them \r\n            this.x = x + (owner.getOrientationVector().x*owner.width/2) + (owner.getOrientationVector().x*this.height/2*Math.abs(Math.cos(vectorAngle)));\r\n            this.y = y + (owner.getOrientationVector().y*owner.height/2) + (owner.getOrientationVector().y*this.height/2*Math.abs(Math.sin(vectorAngle)));\r\n           \r\n           //This timer is for if the lightning bolt doesn't collide with a player and times out.\r\n           //it then destroys the animation object\r\n            let timedEvent = this.scene.time.delayedCall(3000, this.endLightningBolt, [], this);\r\n            \r\n            this.on('animationcomplete', function(anim) {\r\n              this.emit('animationcomplete_' + anim.key, anim);\r\n            },this);\r\n            //This animation runs once the lightning has reached it's peak 'size'\r\n            //and spreads across the screen, it basically \r\n            //just sits there until a collision or timeout\r\n            this.on('animationcomplete_lightningStrike', function() {\r\n              this.anims.play('lightningSizzle');\r\n            });\r\n            \r\n        }\r\n        endLightningBolt(){\r\n          this.destroy();\r\n        }\r\n        //Creates lightning animations\r\n        createAnimations(scene){\r\n          scene.anims.create({\r\n            key: 'lightningStrike',\r\n            frames: scene.anims.generateFrameNumbers(this.texture.key, { start: 1, end: 17 }),\r\n            frameRate: 30,\r\n          });\r\n          scene.anims.create({\r\n            key: 'lightningSizzle',\r\n            frames: scene.anims.generateFrameNumbers(this.texture.key, { start: 15, end: 17 }),\r\n            frameRate: 10,\r\n            repeat: -1\r\n          });\r\n        }\r\n        //Used for checking collisions, etc\r\n        getOwner(){\r\n          return this.owner;\r\n        }\r\n       \r\n        \r\n       \r\n    }"]},"metadata":{},"sourceType":"module"}