{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = exports.RESERVED_EVENTS = void 0;\n\nvar events_1 = require(\"events\");\n\nvar socket_io_parser_1 = require(\"socket.io-parser\");\n\nvar url = require(\"url\");\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar base64id_1 = __importDefault(require(\"base64id\"));\n\nvar debug = debug_1.default(\"socket.io:socket\");\nexports.RESERVED_EVENTS = new Set([\"connect\", \"connect_error\", \"disconnect\", \"disconnecting\", // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n\"newListener\", \"removeListener\"]);\n\nvar Socket = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(Socket, _events_1$EventEmitte);\n\n  var _super = _createSuper(Socket);\n\n  /**\n   * Interface to a `Client` for a given `Namespace`.\n   *\n   * @param {Namespace} nsp\n   * @param {Client} client\n   * @param {Object} auth\n   * @package\n   */\n  function Socket(nsp, client, auth) {\n    var _this;\n\n    _classCallCheck(this, Socket);\n\n    _this = _super.call(this);\n    _this.nsp = nsp;\n    _this.client = client;\n    _this.acks = new Map();\n    _this.fns = [];\n    _this.flags = {};\n    _this._rooms = new Set();\n    _this.server = nsp.server;\n    _this.adapter = _this.nsp.adapter;\n    _this.id = base64id_1.default.generateId(); // don't reuse the Engine.IO id because it's sensitive information\n\n    _this.connected = true;\n    _this.disconnected = false;\n    _this.handshake = _this.buildHandshake(auth);\n    return _this;\n  }\n  /**\n   * Builds the `handshake` BC object\n   *\n   * @private\n   */\n\n\n  _createClass(Socket, [{\n    key: \"buildHandshake\",\n    value: function buildHandshake(auth) {\n      return {\n        headers: this.request.headers,\n        time: new Date() + \"\",\n        address: this.conn.remoteAddress,\n        xdomain: !!this.request.headers.origin,\n        // @ts-ignore\n        secure: !!this.request.connection.encrypted,\n        issued: +new Date(),\n        url: this.request.url,\n        query: url.parse(this.request.url, true).query,\n        auth: auth\n      };\n    }\n    /**\n     * Emits to this client.\n     *\n     * @return {Boolean} Always true\n     * @public\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      if (exports.RESERVED_EVENTS.has(ev)) {\n        throw new Error(\"\\\"\".concat(ev, \"\\\" is a reserved event name\"));\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      args.unshift(ev);\n      var packet = {\n        type: socket_io_parser_1.PacketType.EVENT,\n        data: args\n      }; // access last argument to see if it's an ACK callback\n\n      if (typeof args[args.length - 1] === \"function\") {\n        if (this._rooms.size || this.flags.broadcast) {\n          throw new Error(\"Callbacks are not supported when broadcasting\");\n        }\n\n        debug(\"emitting packet with ack id %d\", this.nsp._ids);\n        this.acks.set(this.nsp._ids, args.pop());\n        packet.id = this.nsp._ids++;\n      }\n\n      var rooms = new Set(this._rooms);\n      var flags = Object.assign({}, this.flags); // reset flags\n\n      this._rooms.clear();\n\n      this.flags = {};\n\n      if (rooms.size || flags.broadcast) {\n        this.adapter.broadcast(packet, {\n          except: new Set([this.id]),\n          rooms: rooms,\n          flags: flags\n        });\n      } else {\n        // dispatch packet\n        this.packet(packet, flags);\n      }\n\n      return true;\n    }\n    /**\n     * Targets a room when broadcasting.\n     *\n     * @param {String} name\n     * @return {Socket} self\n     * @public\n     */\n\n  }, {\n    key: \"to\",\n    value: function to(name) {\n      this._rooms.add(name);\n\n      return this;\n    }\n    /**\n     * Targets a room when broadcasting.\n     *\n     * @param {String} name\n     * @return {Socket} self\n     * @public\n     */\n\n  }, {\n    key: \"in\",\n    value: function _in(name) {\n      this._rooms.add(name);\n\n      return this;\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return {Socket} self\n     * @public\n     */\n\n  }, {\n    key: \"send\",\n    value: function send() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return {Socket} self\n     * @public\n     */\n\n  }, {\n    key: \"write\",\n    value: function write() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param {Object} packet - packet object\n     * @param {Object} opts - options\n     * @private\n     */\n\n  }, {\n    key: \"packet\",\n    value: function packet(_packet) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      _packet.nsp = this.nsp.name;\n      opts.compress = false !== opts.compress;\n\n      this.client._packet(_packet, opts);\n    }\n    /**\n     * Joins a room.\n     *\n     * @param {String|Array} rooms - room or array of rooms\n     * @return a Promise or nothing, depending on the adapter\n     * @public\n     */\n\n  }, {\n    key: \"join\",\n    value: function join(rooms) {\n      debug(\"join room %s\", rooms);\n      return this.adapter.addAll(this.id, new Set(Array.isArray(rooms) ? rooms : [rooms]));\n    }\n    /**\n     * Leaves a room.\n     *\n     * @param {String} room\n     * @return a Promise or nothing, depending on the adapter\n     * @public\n     */\n\n  }, {\n    key: \"leave\",\n    value: function leave(room) {\n      debug(\"leave room %s\", room);\n      return this.adapter.del(this.id, room);\n    }\n    /**\n     * Leave all rooms.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"leaveAll\",\n    value: function leaveAll() {\n      this.adapter.delAll(this.id);\n    }\n    /**\n     * Called by `Namespace` upon successful\n     * middleware execution (ie: authorization).\n     * Socket is added to namespace array before\n     * call to join, so adapters can access it.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_onconnect\",\n    value: function _onconnect() {\n      debug(\"socket connected - writing packet\");\n      this.join(this.id);\n      this.packet({\n        type: socket_io_parser_1.PacketType.CONNECT,\n        data: {\n          sid: this.id\n        }\n      });\n    }\n    /**\n     * Called with each packet. Called by `Client`.\n     *\n     * @param {Object} packet\n     * @private\n     */\n\n  }, {\n    key: \"_onpacket\",\n    value: function _onpacket(packet) {\n      debug(\"got packet %j\", packet);\n\n      switch (packet.type) {\n        case socket_io_parser_1.PacketType.EVENT:\n          this.onevent(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.ACK:\n          this.onack(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n\n        case socket_io_parser_1.PacketType.CONNECT_ERROR:\n          this._onerror(new Error(packet.data));\n\n      }\n    }\n    /**\n     * Called upon event packet.\n     *\n     * @param {Object} packet - packet object\n     * @private\n     */\n\n  }, {\n    key: \"onevent\",\n    value: function onevent(packet) {\n      var args = packet.data || [];\n      debug(\"emitting event %j\", args);\n\n      if (null != packet.id) {\n        debug(\"attaching ack callback to event\");\n        args.push(this.ack(packet.id));\n      }\n\n      if (this._anyListeners && this._anyListeners.length) {\n        var listeners = this._anyListeners.slice();\n\n        var _iterator = _createForOfIteratorHelper(listeners),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var listener = _step.value;\n            listener.apply(this, args);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @param {Number} id - packet id\n     * @private\n     */\n\n  }, {\n    key: \"ack\",\n    value: function ack(id) {\n      var self = this;\n      var sent = false;\n      return function () {\n        // prevent double callbacks\n        if (sent) return;\n        var args = Array.prototype.slice.call(arguments);\n        debug(\"sending ack %j\", args);\n        self.packet({\n          id: id,\n          type: socket_io_parser_1.PacketType.ACK,\n          data: args\n        });\n        sent = true;\n      };\n    }\n    /**\n     * Called upon ack packet.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onack\",\n    value: function onack(packet) {\n      var ack = this.acks.get(packet.id);\n\n      if (\"function\" == typeof ack) {\n        debug(\"calling ack %s with %j\", packet.id, packet.data);\n        ack.apply(this, packet.data);\n        this.acks.delete(packet.id);\n      } else {\n        debug(\"bad ack %s\", packet.id);\n      }\n    }\n    /**\n     * Called upon client disconnect packet.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"ondisconnect\",\n    value: function ondisconnect() {\n      debug(\"got disconnect packet\");\n\n      this._onclose(\"client namespace disconnect\");\n    }\n    /**\n     * Handles a client error.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_onerror\",\n    value: function _onerror(err) {\n      if (this.listeners(\"error\").length) {\n        _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"error\", err);\n      } else {\n        console.error(\"Missing error handler on `socket`.\");\n        console.error(err.stack);\n      }\n    }\n    /**\n     * Called upon closing. Called by `Client`.\n     *\n     * @param {String} reason\n     * @throw {Error} optional error object\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_onclose\",\n    value: function _onclose(reason) {\n      if (!this.connected) return this;\n      debug(\"closing socket - reason %s\", reason);\n\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"disconnecting\", reason);\n\n      this.leaveAll();\n\n      this.nsp._remove(this);\n\n      this.client._remove(this);\n\n      this.connected = false;\n      this.disconnected = true;\n\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"disconnect\", reason);\n    }\n    /**\n     * Produces an `error` packet.\n     *\n     * @param {Object} err - error object\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      this.packet({\n        type: socket_io_parser_1.PacketType.CONNECT_ERROR,\n        data: err\n      });\n    }\n    /**\n     * Disconnects this client.\n     *\n     * @param {Boolean} close - if `true`, closes the underlying connection\n     * @return {Socket} self\n     *\n     * @public\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var close = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!this.connected) return this;\n\n      if (close) {\n        this.client._disconnect();\n      } else {\n        this.packet({\n          type: socket_io_parser_1.PacketType.DISCONNECT\n        });\n\n        this._onclose(\"server namespace disconnect\");\n      }\n\n      return this;\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param {Boolean} compress - if `true`, compresses the sending data\n     * @return {Socket} self\n     * @public\n     */\n\n  }, {\n    key: \"compress\",\n    value: function compress(_compress) {\n      this.flags.compress = _compress;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n     * receive messages (because of network slowness or other issues, or because they’re connected through long polling\n     * and is in the middle of a request-response cycle).\n     *\n     * @return {Socket} self\n     * @public\n     */\n\n  }, {\n    key: \"onAny\",\n\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n    value: function onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.push(listener);\n\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n\n  }, {\n    key: \"prependAny\",\n    value: function prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.unshift(listener);\n\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n\n  }, {\n    key: \"offAny\",\n    value: function offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n\n      if (listener) {\n        var listeners = this._anyListeners;\n\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"listenersAny\",\n    value: function listenersAny() {\n      return this._anyListeners || [];\n    }\n  }, {\n    key: \"volatile\",\n    get: function get() {\n      this.flags.volatile = true;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to every sockets but the\n     * sender.\n     *\n     * @return {Socket} self\n     * @public\n     */\n\n  }, {\n    key: \"broadcast\",\n    get: function get() {\n      this.flags.broadcast = true;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n     *\n     * @return {Socket} self\n     * @public\n     */\n\n  }, {\n    key: \"local\",\n    get: function get() {\n      this.flags.local = true;\n      return this;\n    }\n    /**\n     * A reference to the request that originated the underlying Engine.IO Socket.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"request\",\n    get: function get() {\n      return this.client.request;\n    }\n    /**\n     * A reference to the underlying Client transport connection (Engine.IO Socket object).\n     *\n     * @public\n     */\n\n  }, {\n    key: \"conn\",\n    get: function get() {\n      return this.client.conn;\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: \"rooms\",\n    get: function get() {\n      return this.adapter.socketRooms(this.id) || new Set();\n    }\n  }]);\n\n  return Socket;\n}(events_1.EventEmitter);\n\nexports.Socket = Socket;","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/socket.io/dist/socket.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Socket","RESERVED_EVENTS","events_1","require","socket_io_parser_1","url","debug_1","base64id_1","debug","default","Set","nsp","client","auth","acks","Map","fns","flags","_rooms","server","adapter","id","generateId","connected","disconnected","handshake","buildHandshake","headers","request","time","Date","address","conn","remoteAddress","xdomain","origin","secure","connection","encrypted","issued","query","parse","ev","has","Error","args","unshift","packet","type","PacketType","EVENT","data","length","size","broadcast","_ids","set","pop","rooms","assign","clear","except","name","add","emit","apply","opts","compress","_packet","addAll","Array","isArray","room","del","delAll","join","CONNECT","sid","onevent","BINARY_EVENT","ACK","onack","BINARY_ACK","DISCONNECT","ondisconnect","CONNECT_ERROR","_onerror","push","ack","_anyListeners","listeners","slice","listener","self","sent","prototype","call","arguments","get","delete","_onclose","err","console","error","stack","reason","leaveAll","_remove","close","_disconnect","i","splice","volatile","local","socketRooms","EventEmitter"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Socket = exports.RESERVED_EVENTS = void 0;\nconst events_1 = require(\"events\");\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nconst url = require(\"url\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst base64id_1 = __importDefault(require(\"base64id\"));\nconst debug = debug_1.default(\"socket.io:socket\");\nexports.RESERVED_EVENTS = new Set([\n    \"connect\",\n    \"connect_error\",\n    \"disconnect\",\n    \"disconnecting\",\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    \"newListener\",\n    \"removeListener\"\n]);\nclass Socket extends events_1.EventEmitter {\n    /**\n     * Interface to a `Client` for a given `Namespace`.\n     *\n     * @param {Namespace} nsp\n     * @param {Client} client\n     * @param {Object} auth\n     * @package\n     */\n    constructor(nsp, client, auth) {\n        super();\n        this.nsp = nsp;\n        this.client = client;\n        this.acks = new Map();\n        this.fns = [];\n        this.flags = {};\n        this._rooms = new Set();\n        this.server = nsp.server;\n        this.adapter = this.nsp.adapter;\n        this.id = base64id_1.default.generateId(); // don't reuse the Engine.IO id because it's sensitive information\n        this.connected = true;\n        this.disconnected = false;\n        this.handshake = this.buildHandshake(auth);\n    }\n    /**\n     * Builds the `handshake` BC object\n     *\n     * @private\n     */\n    buildHandshake(auth) {\n        return {\n            headers: this.request.headers,\n            time: new Date() + \"\",\n            address: this.conn.remoteAddress,\n            xdomain: !!this.request.headers.origin,\n            // @ts-ignore\n            secure: !!this.request.connection.encrypted,\n            issued: +new Date(),\n            url: this.request.url,\n            query: url.parse(this.request.url, true).query,\n            auth\n        };\n    }\n    /**\n     * Emits to this client.\n     *\n     * @return {Boolean} Always true\n     * @public\n     */\n    emit(ev, ...args) {\n        if (exports.RESERVED_EVENTS.has(ev)) {\n            throw new Error(`\"${ev}\" is a reserved event name`);\n        }\n        args.unshift(ev);\n        const packet = {\n            type: socket_io_parser_1.PacketType.EVENT,\n            data: args\n        };\n        // access last argument to see if it's an ACK callback\n        if (typeof args[args.length - 1] === \"function\") {\n            if (this._rooms.size || this.flags.broadcast) {\n                throw new Error(\"Callbacks are not supported when broadcasting\");\n            }\n            debug(\"emitting packet with ack id %d\", this.nsp._ids);\n            this.acks.set(this.nsp._ids, args.pop());\n            packet.id = this.nsp._ids++;\n        }\n        const rooms = new Set(this._rooms);\n        const flags = Object.assign({}, this.flags);\n        // reset flags\n        this._rooms.clear();\n        this.flags = {};\n        if (rooms.size || flags.broadcast) {\n            this.adapter.broadcast(packet, {\n                except: new Set([this.id]),\n                rooms: rooms,\n                flags: flags\n            });\n        }\n        else {\n            // dispatch packet\n            this.packet(packet, flags);\n        }\n        return true;\n    }\n    /**\n     * Targets a room when broadcasting.\n     *\n     * @param {String} name\n     * @return {Socket} self\n     * @public\n     */\n    to(name) {\n        this._rooms.add(name);\n        return this;\n    }\n    /**\n     * Targets a room when broadcasting.\n     *\n     * @param {String} name\n     * @return {Socket} self\n     * @public\n     */\n    in(name) {\n        this._rooms.add(name);\n        return this;\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return {Socket} self\n     * @public\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return {Socket} self\n     * @public\n     */\n    write(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param {Object} packet - packet object\n     * @param {Object} opts - options\n     * @private\n     */\n    packet(packet, opts = {}) {\n        packet.nsp = this.nsp.name;\n        opts.compress = false !== opts.compress;\n        this.client._packet(packet, opts);\n    }\n    /**\n     * Joins a room.\n     *\n     * @param {String|Array} rooms - room or array of rooms\n     * @return a Promise or nothing, depending on the adapter\n     * @public\n     */\n    join(rooms) {\n        debug(\"join room %s\", rooms);\n        return this.adapter.addAll(this.id, new Set(Array.isArray(rooms) ? rooms : [rooms]));\n    }\n    /**\n     * Leaves a room.\n     *\n     * @param {String} room\n     * @return a Promise or nothing, depending on the adapter\n     * @public\n     */\n    leave(room) {\n        debug(\"leave room %s\", room);\n        return this.adapter.del(this.id, room);\n    }\n    /**\n     * Leave all rooms.\n     *\n     * @private\n     */\n    leaveAll() {\n        this.adapter.delAll(this.id);\n    }\n    /**\n     * Called by `Namespace` upon successful\n     * middleware execution (ie: authorization).\n     * Socket is added to namespace array before\n     * call to join, so adapters can access it.\n     *\n     * @private\n     */\n    _onconnect() {\n        debug(\"socket connected - writing packet\");\n        this.join(this.id);\n        this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data: { sid: this.id } });\n    }\n    /**\n     * Called with each packet. Called by `Client`.\n     *\n     * @param {Object} packet\n     * @private\n     */\n    _onpacket(packet) {\n        debug(\"got packet %j\", packet);\n        switch (packet.type) {\n            case socket_io_parser_1.PacketType.EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case socket_io_parser_1.PacketType.CONNECT_ERROR:\n                this._onerror(new Error(packet.data));\n        }\n    }\n    /**\n     * Called upon event packet.\n     *\n     * @param {Object} packet - packet object\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        debug(\"emitting event %j\", args);\n        if (null != packet.id) {\n            debug(\"attaching ack callback to event\");\n            args.push(this.ack(packet.id));\n        }\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @param {Number} id - packet id\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function () {\n            // prevent double callbacks\n            if (sent)\n                return;\n            const args = Array.prototype.slice.call(arguments);\n            debug(\"sending ack %j\", args);\n            self.packet({\n                id: id,\n                type: socket_io_parser_1.PacketType.ACK,\n                data: args\n            });\n            sent = true;\n        };\n    }\n    /**\n     * Called upon ack packet.\n     *\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks.get(packet.id);\n        if (\"function\" == typeof ack) {\n            debug(\"calling ack %s with %j\", packet.id, packet.data);\n            ack.apply(this, packet.data);\n            this.acks.delete(packet.id);\n        }\n        else {\n            debug(\"bad ack %s\", packet.id);\n        }\n    }\n    /**\n     * Called upon client disconnect packet.\n     *\n     * @private\n     */\n    ondisconnect() {\n        debug(\"got disconnect packet\");\n        this._onclose(\"client namespace disconnect\");\n    }\n    /**\n     * Handles a client error.\n     *\n     * @private\n     */\n    _onerror(err) {\n        if (this.listeners(\"error\").length) {\n            super.emit(\"error\", err);\n        }\n        else {\n            console.error(\"Missing error handler on `socket`.\");\n            console.error(err.stack);\n        }\n    }\n    /**\n     * Called upon closing. Called by `Client`.\n     *\n     * @param {String} reason\n     * @throw {Error} optional error object\n     *\n     * @private\n     */\n    _onclose(reason) {\n        if (!this.connected)\n            return this;\n        debug(\"closing socket - reason %s\", reason);\n        super.emit(\"disconnecting\", reason);\n        this.leaveAll();\n        this.nsp._remove(this);\n        this.client._remove(this);\n        this.connected = false;\n        this.disconnected = true;\n        super.emit(\"disconnect\", reason);\n    }\n    /**\n     * Produces an `error` packet.\n     *\n     * @param {Object} err - error object\n     *\n     * @private\n     */\n    _error(err) {\n        this.packet({ type: socket_io_parser_1.PacketType.CONNECT_ERROR, data: err });\n    }\n    /**\n     * Disconnects this client.\n     *\n     * @param {Boolean} close - if `true`, closes the underlying connection\n     * @return {Socket} self\n     *\n     * @public\n     */\n    disconnect(close = false) {\n        if (!this.connected)\n            return this;\n        if (close) {\n            this.client._disconnect();\n        }\n        else {\n            this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });\n            this._onclose(\"server namespace disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param {Boolean} compress - if `true`, compresses the sending data\n     * @return {Socket} self\n     * @public\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n     * receive messages (because of network slowness or other issues, or because they’re connected through long polling\n     * and is in the middle of a request-response cycle).\n     *\n     * @return {Socket} self\n     * @public\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to every sockets but the\n     * sender.\n     *\n     * @return {Socket} self\n     * @public\n     */\n    get broadcast() {\n        this.flags.broadcast = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n     *\n     * @return {Socket} self\n     * @public\n     */\n    get local() {\n        this.flags.local = true;\n        return this;\n    }\n    /**\n     * A reference to the request that originated the underlying Engine.IO Socket.\n     *\n     * @public\n     */\n    get request() {\n        return this.client.request;\n    }\n    /**\n     * A reference to the underlying Client transport connection (Engine.IO Socket object).\n     *\n     * @public\n     */\n    get conn() {\n        return this.client.conn;\n    }\n    /**\n     * @public\n     */\n    get rooms() {\n        return this.adapter.socketRooms(this.id) || new Set();\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n}\nexports.Socket = Socket;\n"]},"metadata":{},"sourceType":"script"}