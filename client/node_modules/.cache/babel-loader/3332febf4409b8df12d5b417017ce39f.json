{"ast":null,"code":"var jsp = require(\"./parse-js\"),\n    pro = require(\"./process\"),\n    slice = jsp.slice,\n    member = jsp.member,\n    curry = jsp.curry,\n    MAP = pro.MAP,\n    PRECEDENCE = jsp.PRECEDENCE,\n    OPERATORS = jsp.OPERATORS;\n\nfunction ast_squeeze_more(ast) {\n  var w = pro.ast_walker(),\n      walk = w.walk,\n      scope;\n\n  function with_scope(s, cont) {\n    var save = scope,\n        ret;\n    scope = s;\n    ret = cont();\n    scope = save;\n    return ret;\n  }\n\n  ;\n\n  function _lambda(name, args, body) {\n    return [this[0], name, args, with_scope(body.scope, curry(MAP, body, walk))];\n  }\n\n  ;\n  return w.with_walkers({\n    \"toplevel\": function (body) {\n      return [this[0], with_scope(this.scope, curry(MAP, body, walk))];\n    },\n    \"function\": _lambda,\n    \"defun\": _lambda,\n    \"new\": function (ctor, args) {\n      if (ctor[0] == \"name\") {\n        if (ctor[1] == \"Array\" && !scope.has(\"Array\")) {\n          if (args.length != 1) {\n            return [\"array\", args];\n          } else {\n            return walk([\"call\", [\"name\", \"Array\"], args]);\n          }\n        } else if (ctor[1] == \"Object\" && !scope.has(\"Object\")) {\n          if (!args.length) {\n            return [\"object\", []];\n          } else {\n            return walk([\"call\", [\"name\", \"Object\"], args]);\n          }\n        } else if ((ctor[1] == \"RegExp\" || ctor[1] == \"Function\" || ctor[1] == \"Error\") && !scope.has(ctor[1])) {\n          return walk([\"call\", [\"name\", ctor[1]], args]);\n        }\n      }\n    },\n    \"call\": function (expr, args) {\n      if (expr[0] == \"dot\" && expr[2] == \"toString\" && args.length == 0) {\n        // foo.toString()  ==>  foo+\"\"\n        return [\"binary\", \"+\", expr[1], [\"string\", \"\"]];\n      }\n\n      if (expr[0] == \"name\") {\n        if (expr[1] == \"Array\" && args.length != 1 && !scope.has(\"Array\")) {\n          return [\"array\", args];\n        }\n\n        if (expr[1] == \"Object\" && !args.length && !scope.has(\"Object\")) {\n          return [\"object\", []];\n        }\n\n        if (expr[1] == \"String\" && !scope.has(\"String\")) {\n          return [\"binary\", \"+\", args[0], [\"string\", \"\"]];\n        }\n      }\n    }\n  }, function () {\n    return walk(pro.ast_add_scope(ast));\n  });\n}\n\n;\nexports.ast_squeeze_more = ast_squeeze_more;","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/uglify-js/lib/squeeze-more.js"],"names":["jsp","require","pro","slice","member","curry","MAP","PRECEDENCE","OPERATORS","ast_squeeze_more","ast","w","ast_walker","walk","scope","with_scope","s","cont","save","ret","_lambda","name","args","body","with_walkers","ctor","has","length","expr","ast_add_scope","exports"],"mappings":"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","sourcesContent":["var jsp = require(\"./parse-js\"),\n    pro = require(\"./process\"),\n    slice = jsp.slice,\n    member = jsp.member,\n    curry = jsp.curry,\n    MAP = pro.MAP,\n    PRECEDENCE = jsp.PRECEDENCE,\n    OPERATORS = jsp.OPERATORS;\n\nfunction ast_squeeze_more(ast) {\n        var w = pro.ast_walker(), walk = w.walk, scope;\n        function with_scope(s, cont) {\n                var save = scope, ret;\n                scope = s;\n                ret = cont();\n                scope = save;\n                return ret;\n        };\n        function _lambda(name, args, body) {\n                return [ this[0], name, args, with_scope(body.scope, curry(MAP, body, walk)) ];\n        };\n        return w.with_walkers({\n                \"toplevel\": function(body) {\n                        return [ this[0], with_scope(this.scope, curry(MAP, body, walk)) ];\n                },\n                \"function\": _lambda,\n                \"defun\": _lambda,\n                \"new\": function(ctor, args) {\n                        if (ctor[0] == \"name\") {\n                                if (ctor[1] == \"Array\" && !scope.has(\"Array\")) {\n                                        if (args.length != 1) {\n                                                return [ \"array\", args ];\n                                        } else {\n                                                return walk([ \"call\", [ \"name\", \"Array\" ], args ]);\n                                        }\n                                } else if (ctor[1] == \"Object\" && !scope.has(\"Object\")) {\n                                        if (!args.length) {\n                                                return [ \"object\", [] ];\n                                        } else {\n                                                return walk([ \"call\", [ \"name\", \"Object\" ], args ]);\n                                        }\n                                } else if ((ctor[1] == \"RegExp\" || ctor[1] == \"Function\" || ctor[1] == \"Error\") && !scope.has(ctor[1])) {\n                                        return walk([ \"call\", [ \"name\", ctor[1] ], args]);\n                                }\n                        }\n                },\n                \"call\": function(expr, args) {\n                        if (expr[0] == \"dot\" && expr[2] == \"toString\" && args.length == 0) {\n                                // foo.toString()  ==>  foo+\"\"\n                                return [ \"binary\", \"+\", expr[1], [ \"string\", \"\" ]];\n                        }\n                        if (expr[0] == \"name\") {\n                                if (expr[1] == \"Array\" && args.length != 1 && !scope.has(\"Array\")) {\n                                        return [ \"array\", args ];\n                                }\n                                if (expr[1] == \"Object\" && !args.length && !scope.has(\"Object\")) {\n                                        return [ \"object\", [] ];\n                                }\n                                if (expr[1] == \"String\" && !scope.has(\"String\")) {\n                                        return [ \"binary\", \"+\", args[0], [ \"string\", \"\" ]];\n                                }\n                        }\n                }\n        }, function() {\n                return walk(pro.ast_add_scope(ast));\n        });\n};\n\nexports.ast_squeeze_more = ast_squeeze_more;\n"]},"metadata":{},"sourceType":"script"}