{"ast":null,"code":"import _classCallCheck from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/node_modules/@babel/runtime/helpers/esm/createSuper\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{Component}from'react';import Phaser from'phaser';import{IonPhaser}from'@ion-phaser/react';import LocalGameScene from'../phaser/scenes/LocalGameScene.js';import OnlineGameScene from'../phaser/scenes/OnlineGameScene.js';import{socket}from'../api';var GamePage=/*#__PURE__*/function(_Component){_inherits(GamePage,_Component);var _super=_createSuper(GamePage);function GamePage(props){var _this;_classCallCheck(this,GamePage);_this=_super.call(this,props);var gameConfig=_this.props.gameConfig;var roomName=_this.props.roomName;//console.log(\"gameConfig is: \" + gameConfig);\n//let newScene = new Object();\nconsole.log('gamePage constructor called');var newScene=LocalGameScene;if(gameConfig==='createOnline'){newScene=OnlineGameScene;}else if(gameConfig=='joinOnline'){newScene=OnlineGameScene;}var controlConfig=_this.props.controlConfig;_this.state={initialize:true,//This is the Phaser game code\ngame:{type:Phaser.AUTO,width:800,height:600,physics:{default:'arcade',arcade:{debug:false,gravity:{y:0}}},input:{gamepad:true},scene:{init:function init(){//Here we can pass in the Control Config and any other data the Phaser scene needs from React\nthis.controlConfig=controlConfig;this.gameConfig=gameConfig;this.roomName=roomName;this.socket=socket;},preload:newScene.preload,create:newScene.create,update:newScene.update}}};return _this;}_createClass(GamePage,[{key:\"componentWillUnmount\",value:function componentWillUnmount(){console.log('componentUnmounted');socket.removeAllListeners();socket.emit('destroyOnlineRoom');}},{key:\"render\",value:function render(){var _this$state=this.state,initialize=_this$state.initialize,game=_this$state.game;return/*#__PURE__*/_jsx(\"div\",{style:{maxWidth:800,minWidth:800,minHeight:600,maxHeight:600,margin:'auto'},children:/*#__PURE__*/_jsx(IonPhaser,{game:game,initialize:initialize})});}}]);return GamePage;}(Component);export default GamePage;","map":{"version":3,"sources":["C:/Users/Human/Documents/MildMayhemFull/mildmayhem/client/src/pages/GamePage.js"],"names":["React","Component","Phaser","IonPhaser","LocalGameScene","OnlineGameScene","socket","GamePage","props","gameConfig","roomName","console","log","newScene","controlConfig","state","initialize","game","type","AUTO","width","height","physics","default","arcade","debug","gravity","y","input","gamepad","scene","init","preload","create","update","removeAllListeners","emit","maxWidth","minWidth","minHeight","maxHeight","margin"],"mappings":"2kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,MAAP,KAAmB,QAAnB,CACA,OAASC,SAAT,KAA0B,mBAA1B,CACA,MAAOC,CAAAA,cAAP,KAA2B,oCAA3B,CACA,MAAOC,CAAAA,eAAP,KAA4B,qCAA5B,CACA,OAAQC,MAAR,KAAqB,QAArB,C,GACMC,CAAAA,Q,oGACJ,kBAAYC,KAAZ,CAAkB,0CAChB,uBAAMA,KAAN,EACA,GAAIC,CAAAA,UAAU,CAAG,MAAKD,KAAL,CAAWC,UAA5B,CACA,GAAIC,CAAAA,QAAQ,CAAG,MAAKF,KAAL,CAAWE,QAA1B,CACA;AACA;AACAC,OAAO,CAACC,GAAR,CAAY,6BAAZ,EACA,GAAIC,CAAAA,QAAQ,CAAGT,cAAf,CACA,GAAIK,UAAU,GAAG,cAAjB,CAAgC,CAC9BI,QAAQ,CAAGR,eAAX,CACD,CAFD,IAGK,IAAII,UAAU,EAAE,YAAhB,CAA6B,CAChCI,QAAQ,CAAGR,eAAX,CACD,CACD,GAAIS,CAAAA,aAAa,CAAG,MAAKN,KAAL,CAAWM,aAA/B,CACA,MAAKC,KAAL,CAAa,CACbC,UAAU,CAAE,IADC,CAEb;AACAC,IAAI,CAAE,CACJC,IAAI,CAAEhB,MAAM,CAACiB,IADT,CAEJC,KAAK,CAAE,GAFH,CAGJC,MAAM,CAAE,GAHJ,CAIJC,OAAO,CAAE,CACPC,OAAO,CAAE,QADF,CAEPC,MAAM,CAAE,CACNC,KAAK,CAAE,KADD,CAENC,OAAO,CAAE,CAAEC,CAAC,CAAE,CAAL,CAFH,CAFD,CAJL,CAWJC,KAAK,CAAE,CACLC,OAAO,CAAE,IADJ,CAXH,CAcJC,KAAK,CAAE,CACLC,IAAI,CAAE,eAAW,CACf;AACA,KAAKjB,aAAL,CAAqBA,aAArB,CACA,KAAKL,UAAL,CAAkBA,UAAlB,CACA,KAAKC,QAAL,CAAgBA,QAAhB,CACA,KAAKJ,MAAL,CAAcA,MAAd,CACD,CAPI,CAQL0B,OAAO,CAAEnB,QAAQ,CAACmB,OARb,CASLC,MAAM,CAAEpB,QAAQ,CAACoB,MATZ,CAULC,MAAM,CAAErB,QAAQ,CAACqB,MAVZ,CAdH,CAHO,CAAb,CAfgB,aA+CjB,C,wFACsB,CACrBvB,OAAO,CAACC,GAAR,CAAY,oBAAZ,EACAN,MAAM,CAAC6B,kBAAP,GACA7B,MAAM,CAAC8B,IAAP,CAAY,mBAAZ,EACH,C,uCAEU,iBACsB,KAAKrB,KAD3B,CACCC,UADD,aACCA,UADD,CACaC,IADb,aACaA,IADb,CAEP,mBACE,YAAK,KAAK,CAAE,CAACoB,QAAQ,CAAE,GAAX,CAAgBC,QAAQ,CAAC,GAAzB,CAA8BC,SAAS,CAAC,GAAxC,CAA6CC,SAAS,CAAC,GAAvD,CAA4DC,MAAM,CAAE,MAApE,CAAZ,uBAEE,KAAC,SAAD,EAAW,IAAI,CAAExB,IAAjB,CAAuB,UAAU,CAAED,UAAnC,EAFF,EADF,CAMD,C,sBA/DoBf,S,EAkEvB,cAAeM,CAAAA,QAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport Phaser from 'phaser';\r\nimport { IonPhaser } from '@ion-phaser/react';\r\nimport LocalGameScene from '../phaser/scenes/LocalGameScene.js';\r\nimport OnlineGameScene from '../phaser/scenes/OnlineGameScene.js';\r\nimport {socket} from '../api';\r\nclass GamePage extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    let gameConfig = this.props.gameConfig;\r\n    let roomName = this.props.roomName;\r\n    //console.log(\"gameConfig is: \" + gameConfig);\r\n    //let newScene = new Object();\r\n    console.log('gamePage constructor called');\r\n    let newScene = LocalGameScene;\r\n    if (gameConfig==='createOnline'){\r\n      newScene = OnlineGameScene;\r\n    }\r\n    else if (gameConfig=='joinOnline'){\r\n      newScene = OnlineGameScene;\r\n    }\r\n    let controlConfig = this.props.controlConfig;\r\n    this.state = {\r\n    initialize: true,\r\n    //This is the Phaser game code\r\n    game: {\r\n      type: Phaser.AUTO,\r\n      width: 800,\r\n      height: 600,\r\n      physics: {\r\n        default: 'arcade',\r\n        arcade: {\r\n          debug: false,\r\n          gravity: { y: 0 }\r\n        }\r\n      },\r\n      input: {\r\n        gamepad: true\r\n      },\r\n      scene: {\r\n        init: function() {\r\n          //Here we can pass in the Control Config and any other data the Phaser scene needs from React\r\n          this.controlConfig = controlConfig;\r\n          this.gameConfig = gameConfig;\r\n          this.roomName = roomName;\r\n          this.socket = socket;\r\n        },\r\n        preload: newScene.preload,\r\n        create: newScene.create,\r\n        update: newScene.update,\r\n      }\r\n      \r\n    }\r\n  }\r\n  }\r\n  componentWillUnmount() {\r\n    console.log('componentUnmounted');\r\n    socket.removeAllListeners()\r\n    socket.emit('destroyOnlineRoom');\r\n}\r\n  \r\n  render() {\r\n    const { initialize, game } = this.state\r\n    return (\r\n      <div style={{maxWidth: 800, minWidth:800, minHeight:600, maxHeight:600, margin: 'auto'}}>\r\n      {/*Take a look at: https://github.com/proyecto26/ion-phaser/tree/master/react in order to see how this is implemented*/}\r\n        <IonPhaser game={game} initialize={initialize} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GamePage;"]},"metadata":{},"sourceType":"module"}